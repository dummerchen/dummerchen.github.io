<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【论文复现】Restormer</title>
      <link href="/p/49081.html"/>
      <url>/p/49081.html</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>因为transformer太大了，本文就设计了一个新的方式计算transformer，和新的transformer block使其复杂度降低成$O(C^2WH)$的同时刷新了sota。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_002/img/20220730175843.png" class="" title=", height&#x3D;50vh"><p>创新点主集中在transformer block：</p><ul><li><p>GDFN(gate de-conv feedforward network)：</p><p>  这部分由gate(gelu)+dwconv+1x1 conv组成，这个门似乎是灵光一闪出来的，凑创新点。</p></li><li><p>MDTA(muti-head de-conv transpose attention)：</p><p>  这个论文里面说的很nb，仔细看就发现他是相当于把矩阵转置然后再乘，原本的$HW^2$就变成了$C^2$，个人感觉这个东西挺好想的，但是为什么没人做呢。</p></li></ul><h2 id="进化学习"><a href="#进化学习" class="headerlink" title="进化学习"></a>进化学习</h2><p>前面说其他transformer用了patch对图片空间性不好，对于图像重建不友好等等，我还以为他把patch去掉了，结果只是越往后patch size越大来搞，唬人。</p><p>这个idea和fine tune很像，首先训练2x放大，再训练4x放大，这样训练出的网络会更好。可以借鉴一下思想。</p><h2 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h2><p>就说一下比较关注的GDFN和MDTA，其他的像progressive learning和加深网络什么的我觉得没有什么好讲的。</p><p>如下图：</p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_002/img/20220730182010.png" class="" title=", height&#x3D;50vh"><p>可以发现MTA+GFN是不如MTA+FN的但是MTA+DFN却有很大增长，同样MDTA+FN比MTA+FN也有很大增长，相比之下gelu的效果就没有那么明显，说明这个dwconv非常重要(或者是加了一层conv效果显著?这个应该也有个对比实验)，这可以思考借鉴一下。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>GDTA：dwconv的效果比门gelu提升更明显，更有借鉴意义？。</li><li>MDTA：文章明明强调了attention的优化，但是对比实验里面却没有着重对比速度，flops之类的，只有摘要旁边的那个图，就很迷惑。</li><li>progressive learning可以记一笔。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文复现】SwinIR</title>
      <link href="/p/3640.html"/>
      <url>/p/3640.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没更博客了，这次就爆肝两篇。</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>原来的图像重建都很少基于transformer如IPT和VSR-transformer但是这两个都是patch-wise对图像重建不是很合适，这篇文章借鉴了swin transformer的架构并且参数量更少，还能提点也不是patch-wise（但是看后面也没有着重强调这一点）。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h3><p>网络包括浅层特征提取+深层特征提取+图像重建模块，如下图：</p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_002/img/20220730123928.png" class="" title=", height&#x3D;50vh"><p>对于不同的任务，图像重建模块不同，但是浅层和深层模块都一样：</p><p>浅层模块就是一个3X3卷积，深层模块是k个有shortcut 的swin transformer的堆叠，最后也是加一个3X3卷积层。</p><p>但是对于任务不同，图像重建模块是不同的：</p><ul><li>图像超分：因为最后要上采样，所以要加一层sub pixel。</li><li>图像去噪，jpeg去伪影：就是单纯的一层卷积层（也没有说是什么卷积层）。</li></ul><p>文章还解释了一下几个创新点：</p><ul><li>为什么要在外层加入short cut：因为深层特征提取会忽视低频特征，留下高频特征，用shortcut可以最后加入低频特征。</li><li>为什么内层RSTB也要有short cut：shortcut能聚合不同层次的特征 <del>因为short cut nb</del></li><li>为什么RSTB里面需要一层卷积层：transformer可以看作空间变换的一个特例，但是卷积具有空间滤波不变性能增加平移方差。（不是很懂这个理论）</li></ul><h3 id="loss"><a href="#loss" class="headerlink" title="loss"></a>loss</h3><p>同样，对于不同任务的loss也不同：</p><ul><li>图像超分：经典的和轻量级的图像超分直接用L1 pixel loss，现实图像超分使用pixel loss+gan loss+percep loss</li><li>图像去噪：使用charbonnier loss</li></ul><h2 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h2><p>具体实验结果图如下：</p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_002/img/20220730132434.png" class="" title=", height&#x3D;50vh"><ul><li>3X3卷积的通道数：与PSNR呈正比，论文取180。</li><li>RSTB数量：与PSNR成正比，论文取6层</li><li>STL数量：与PSNR成正比，论文取6层。</li><li>RSTB中的卷积层：在有short cut的条件下尝试了1x1，3x3和三个3x3，发现一个3x3效果最好，因为1x1没有提取到图像邻近信息，文章没有说为什么3个3x3效果会变差。</li><li>RSTB中的short cut：去掉short cut 下降了0.16db。</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>读完这篇论文，感觉只有trick 又多了一个，这篇似乎只验证了short cut的可行性，平均比sota高0.3%。</p><h3 id="ensemble-strategy"><a href="#ensemble-strategy" class="headerlink" title="ensemble-strategy"></a>ensemble-strategy</h3><p>这个分为epoch ensemble strategy和self ensemble strategy：</p><ul><li>epoch ensemble strategy：取两次不同的epoch对同一张图片进行测试对结果求平均。</li><li>self ensemble strategy：对一张图片进行水平反转+垂直反转+原图+水平垂直翻转，测试后再转回去取平均。</li></ul><h3 id="卷积的空间平移方差增大"><a href="#卷积的空间平移方差增大" class="headerlink" title="卷积的空间平移方差增大"></a>卷积的空间平移方差增大</h3><p>感觉是翻译问题，我找了半天最接近的应该是translation equalvariance？ ，意思是平移卷积和卷积平移的结果不变，公式上来表示就是：$f(g(x))=g(f(x))$，这是cnn的一个现验条件之一（另一个现验条件是cnn卷积时相邻信息相关性强）</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像理解与计算机视觉笔记</title>
      <link href="/p/63048.html"/>
      <url>/p/63048.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、图像信号分析基础"><a href="#一、图像信号分析基础" class="headerlink" title="一、图像信号分析基础"></a>一、图像信号分析基础</h2><h3 id="灰度与灰度级"><a href="#灰度与灰度级" class="headerlink" title="灰度与灰度级"></a>灰度与灰度级</h3><p>每个像素的取值为灰度，所有灰度的种类成为灰度级。通常有2、8、256、65536灰度级。</p><p>色彩包括亮度、色调、饱和度。</p><h3 id="邻域与邻接"><a href="#邻域与邻接" class="headerlink" title="邻域与邻接"></a>邻域与邻接</h3><ul><li>四邻域：上下左右，四个像素相邻。</li><li>八邻域：上下左右，斜边八像素相邻。</li><li>D邻域：只有斜边的四个像素相邻。</li><li>m-连接：两个像素的四邻域没有相交且是D邻域或八邻域连接则为m连接（就是只有斜着的两个像素）</li></ul><h3 id="边缘线"><a href="#边缘线" class="headerlink" title="边缘线"></a>边缘线</h3><p>对于不同的联通方式会有不同的边缘线，比如四联通和八联通就不一样。求的都是最长的边缘线。</p><p>对于一个边缘线可以用链码来描述，按逆时针方向分别标注为0~7，七个方向。对链码进行差分则得到的是方向的相对位置，所以对平移、旋转变换很鲁棒。注意，差分是当前点减去前一个点。</p><h3 id="卷积运算"><a href="#卷积运算" class="headerlink" title="卷积运算"></a>卷积运算</h3><p>这里都默认是Same，所以要在外面填充0，然后需要注意的是模板要旋转180度。</p><h2 id="二、图像增强与恢复"><a href="#二、图像增强与恢复" class="headerlink" title="二、图像增强与恢复"></a>二、图像增强与恢复</h2><h3 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h3><p>通过修改像素种类的分布，使图片对比度增加，注意映射函数是向上取整。</p><h3 id="图像平滑"><a href="#图像平滑" class="headerlink" title="图像平滑"></a>图像平滑</h3><h4 id="空域平滑"><a href="#空域平滑" class="headerlink" title="空域平滑"></a>空域平滑</h4><ul><li>平滑模板</li><li>多帧图片求平均</li></ul><h4 id="频域平滑"><a href="#频域平滑" class="headerlink" title="频域平滑"></a>频域平滑</h4><ul><li>低通滤波</li><li>高通滤波</li></ul><h4 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h4><p>个人觉得这应该算是空域平滑的平滑模板类里面。</p><p>也就是分不同的平滑模板，但是只是求中值而不是平均值。</p><h3 id="图像锐化"><a href="#图像锐化" class="headerlink" title="图像锐化"></a>图像锐化</h3><p>感觉和求边缘很相似，都是求梯度这种，也是拉普拉斯算子之类的。拉普拉斯模板就是拉普拉斯算子求出来后再加原图片，所以中间都会比拉普拉斯算子多1。</p><h3 id="图像复原"><a href="#图像复原" class="headerlink" title="图像复原"></a>图像复原</h3><p>类似图像超分，先对图像进行退化再学习一个函数对图像进行复原，如果无约束就是一个梯度下降，有约束加一个拉格朗日算子。</p><p>图像退化分为:</p><ul><li>简单退化：直接图像加噪声</li><li>通用退化：退化函数+噪声</li><li>变形退化：也是退化函数+噪声</li><li>频域退化：频域退化函数+频域噪声</li></ul><p>现在gan都是用类通用退化，用不同的退化函数多次退化但是不加噪声，因为退化函数本身就会携带噪声进去，比如jpeg压缩会带有伪影。使用多次退化函数也能让模型学习的函数不是简单的逆函数。</p><h2 id="三、图像边缘检测"><a href="#三、图像边缘检测" class="headerlink" title="三、图像边缘检测"></a>三、图像边缘检测</h2><p>图像边缘是一个区域的终结到另一个区域的开始，是图像局部特征不连续的表现，由导数可以很明显的判断。</p><h3 id="一阶导数"><a href="#一阶导数" class="headerlink" title="一阶导数"></a>一阶导数</h3><p>不同方法就是计算水平梯度和垂直梯度的区别。</p><ul><li><p>正交梯度：</p><p>  对图片分别求水平梯度和垂直梯度，然后按不同的梯度幅值规则，合称为梯度图像，然后设定阈值对图片进行分割。</p></li><li><p>robert算子：</p><p>  对斜方向计算梯度，剩下步骤与正交梯度相同。但是对噪声更敏感</p><script type="math/tex; mode=display">  W_h= \left[ \begin{matrix}  -1&0& 0\\  0&1&0\\  0&0&0  \end{matrix} \right]  \quad  W_v= \left[ \begin{matrix}  0&-1& 0\\  1&0&0\\  0&0&0  \end{matrix} \right]</script></li><li><p>prewitt算子：使用了平均，能减少噪声的影响，但是会使边缘也更模糊</p><script type="math/tex; mode=display">  W_h=\frac{1}{3} \left[ \begin{matrix}  -1&0&1\\  -1&0&1\\  -1&0&1  \end{matrix} \right]  \quad  W_v=\frac{1}{3}\left[ \begin{matrix}  -1&-1&-1\\  0&0&0\\  1&1&1  \end{matrix} \right]</script></li><li><p>sobel算子：使用加权平均，比prewitt边缘更清晰</p><script type="math/tex; mode=display">  W_h=\frac{1}{4} \left[ \begin{matrix}  -1&0&1\\  -2&0&2\\  -1&0&1  \end{matrix} \right]  \quad  W_v=\frac{1}{4}\left[ \begin{matrix}  -1&-2&-1\\  0&0&0\\  1&2&1  \end{matrix} \right]</script></li></ul><h3 id="二阶导数"><a href="#二阶导数" class="headerlink" title="二阶导数"></a>二阶导数</h3><ul><li><p>拉普拉斯算子：对独立点和线效果很好，但是对噪声不耐受，所以一般先平滑处理，有四近邻模板，八近邻模板等。</p><script type="math/tex; mode=display">  W_4=\left[ \begin{matrix}  0&-1&0\\  -1&4&-1\\  0&-1&0  \end{matrix} \right]</script></li><li><p>LoG算子(高斯拉普拉斯算子)：实际上就是先高斯滤波平滑处理后再使用拉普拉斯算子。</p></li><li><p>canny算子：</p><p>  先高斯模糊，再计算梯度，采用非极大值抑制删掉不需要的梯度（将当前像素点与其梯度方向的像素点梯度对比，最大才保留），然后用双阈值法连接边缘（阈值高部分轮廓丢失，阈值低有假边缘，消失轮廓就用低阈值的边缘填充更有效）</p></li></ul><p>​    拉普拉斯算子增强了图像中的灰度不连续边缘，而减弱了对应图像中灰度值缓慢变化区域的对比度，将这样的结果叠加到原始图像上就能得到锐化后的图像。</p><h3 id="霍夫变换"><a href="#霍夫变换" class="headerlink" title="霍夫变换"></a>霍夫变换</h3><p>挺麻烦的，基本上就是将点通过映射到极坐标系确定线。广义霍夫变换还能检测物体位置（利用模板边缘和目标图片）。</p><h2 id="四、图像分割"><a href="#四、图像分割" class="headerlink" title="四、图像分割"></a>四、图像分割</h2><h3 id="基于阈值分割"><a href="#基于阈值分割" class="headerlink" title="基于阈值分割"></a>基于阈值分割</h3><p>都是比较针对于单一目标，对于多目标难以奏效。</p><ul><li><p>直方图均值法：</p><p>  对于双峰直方图，选取峰值间的最低点作为分割阈值，对于多峰灰度直方图，分别选取峰值最低点作为分割阈值。</p></li><li><p>最佳阈值法：</p><p>  类似最小错误率的贝叶斯决策，通过求两个分布的交点来求出阈值。</p></li><li><p>均值迭代法：</p><p>  初始选取双峰的最低点作为分割阈值，然后每次选择两个区域的均值再求平均得到新的阈值，直至阈值不再改变。</p></li><li><p>类间方差法（OTSU）阈值分割：</p><p>  和LDA类似，要求类间方差大，类内方差小，遍历一个阈值T，分别计算两个区域的均值，然后在计算类间加权方差，求出最大方差对应的T。</p></li></ul><h3 id="基于区域的分割"><a href="#基于区域的分割" class="headerlink" title="基于区域的分割"></a>基于区域的分割</h3><ul><li><p>区域生长法：</p><p>  遍历每一个像素与其邻域，如果规定的距离小于规定的阈值则合并，否则不合并。</p><p>  对于不同规定的距离，分为不同的生长法：简单生长法（当前点与邻域像素值求abs），质心生长法（当前点与邻域区域平均值求abs），混合生长法（两个区域间的平均值求abs）</p></li><li><p>分裂合并法：</p><p>  ​    利用均方差MSE，可计算区域间和区域内的loss，当一个区域间的loss大于阈值，则说明该区域不是一类，分割为4个区域，当区域间的loss小于阈值，说明区域相似，合并为一个区域。</p><p>  ​    初始将图片分割为四个区域，然后遍历四个区域进行分裂合并（分裂和合并是互不影响的）。并且不同规定的最小分裂块对结果也不同。</p></li></ul><h3 id="分水岭分割"><a href="#分水岭分割" class="headerlink" title="分水岭分割"></a>分水岭分割</h3><p>就是用洪水填充得到最后的边界，边界像素宽度必定是为1。计算简单但是容易过度分割，产生细小的区域。</p><h2 id="五、形态学数字图像处理"><a href="#五、形态学数字图像处理" class="headerlink" title="五、形态学数字图像处理"></a>五、形态学数字图像处理</h2><ul><li><p>腐蚀：</p><p>  给定一个模板B，遍历原图A每一个像素，与模板B匹配，当B中的全部1都在A中也为1则新像素为1。与卷积相同，新图大小会改变，所以一般在外围填充0，二值图表现为图像变暗，小白点消失。 </p></li><li><p>膨胀：</p><p>  给定一个模板B，遍历原图A每一个像素，与模板B匹配，当B中存在1在A中也为1则新像素为1。与腐蚀相同，新图大小会改变，所以一般在外围填充0，二值图表现为图像变亮，小黑点消失。</p></li><li><p>开操作：</p><p>  先对原图进行腐蚀，再膨胀的操作称为开操作，能够去掉噪声，二值图中表现为小白点消失，暗效果不变化。</p><p>  $A\circ B=(A\ominus B)\oplus B$。</p></li><li><p>闭操作：</p><p>  先对原图进行膨胀再腐蚀的操作称为闭操作，能够去掉细小空洞，填补断裂，二值图中表现为小黑点消失，亮效果不变化。</p><p>  $A\bullet B=(A\oplus B)\ominus B$</p></li><li><p>击中击不中变换：寻找形状的位置，B为需要找的形状，则$A*B=(A\ominus B)\and(A^C\ominus B^C) $，注意这里$B^C$是对一个任意大于B的窗口求补集。</p></li></ul><p>应用：</p><ul><li><p>边界提取：A与AB腐蚀相减，$A-A\ominus B$。</p></li><li><p>区域填充：A的补中所有区域像素分别与B膨胀得到的结果。</p></li><li><p>细化：用于提取骨架特征，使用八个方向的模板B<strong>分别</strong>对A求击中击不中变换求补集再与A求交集。</p><p>  $A\otimes B=A\and (A*B)^C \quad B={B0,B1…B7} $</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码审计工具</title>
      <link href="/p/42559.html"/>
      <url>/p/42559.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    上次抠图比赛失利，最后发现是网络最后一层操作花费太多时间，直接改成插值就能到70fps（还是python运行的!!，onnx只会更快）。上次面试也问到项目代码量是多少，我发现需要一些代码审计工具来统计分析程序的效率等功能</p><h2 id="代码量统计"><a href="#代码量统计" class="headerlink" title="代码量统计"></a>代码量统计</h2><p>​    这个很简单，pycharm里安装插件Statistic就行了，注意可以在设置里exclude 不需要统计的文件，前几次统计会有点慢，后面就快了。</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220521103420.png" alt="image-20220521103420081"></p><h2 id="代码运行时间统计"><a href="#代码运行时间统计" class="headerlink" title="代码运行时间统计"></a>代码运行时间统计</h2><h3 id="查看文件代码运行时间"><a href="#查看文件代码运行时间" class="headerlink" title="查看文件代码运行时间"></a>查看文件代码运行时间</h3><p>Pycharm 专业版有一个profile功能在Run/profile xxx.py，能查看该文件下运行的，最后会生成一个statistic和一个可视化的graph。这个分析的<strong>最小单位是函数</strong></p><h3 id="查看每行代码运行时间"><a href="#查看每行代码运行时间" class="headerlink" title="查看每行代码运行时间"></a>查看每行代码运行时间</h3><p>​    profile最小单位是函数，有时候挺鸡肋的，想到vsdebug模式下能直接看到<strong>每行代码</strong>运行的时间，pycharm能不能有这个功能呢？找了半天发现似乎只有line_profile是最满足需求的包(<a href="https://blog.csdn.net/weixin_44613728/article/details/120411325">参考这篇blog</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先简单安装一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install line_profiler</span><br></pre></td></tr></table></figure><p>有实例化line_profile类进行使用的，但是更多使用@profile装饰器会更方便（无需导入包，运行时会自动实例化）。</p><p>@profile(func=None, stream=None, precision=1, backend=’psutil’) </p><p>stream表示将分析结果输出的文件，默认为命令行；precision表示分析结果中数字小数点保留位数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在需要查看时间的函数上使用装饰器，比如我想要查看网络哪层更耗时</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SRResNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,in_channels,n_block,scale_factor,hidden_channels</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SRResNet, self).__init__()</span><br><span class="line">        self.num_blocks=n_block</span><br><span class="line">        self.conv1=nn.Conv2d(in_channels,hidden_channels,kernel_size=(<span class="number">9</span>,<span class="number">9</span>),stride=(<span class="number">1</span>,<span class="number">1</span>),padding=<span class="number">4</span>)</span><br><span class="line">        self.ac1=nn.PReLU(num_parameters=<span class="number">1</span>,init=<span class="number">0.25</span>)</span><br><span class="line">        self.blocks=nn.Sequential(*[Block(in_channels=hidden_channels,hidden=hidden_channels) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.num_blocks)])</span><br><span class="line"></span><br><span class="line">        self.conv2=nn.Conv2d(hidden_channels,hidden_channels,kernel_size=<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>)</span><br><span class="line">        self.bn=nn.BatchNorm2d(hidden_channels)</span><br><span class="line">        self.pixel_shuffle=nn.Sequential(*[SubPixelShuffleConvBlock(in_channels=hidden_channels) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(scale_factor//<span class="number">2</span>)])</span><br><span class="line">        self.conv3=nn.Conv2d(hidden_channels,<span class="number">3</span>,kernel_size=(<span class="number">9</span>,<span class="number">9</span>),stride=<span class="number">1</span>,padding=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_weights</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m,nn.Conv2d):</span><br><span class="line">                n=m.kernel_size[<span class="number">0</span>]*m.kernel_size[<span class="number">1</span>]*m.out_channels</span><br><span class="line">                m.weight.data.normal_(<span class="number">0</span>,math.sqrt(<span class="number">2.</span>/n))</span><br><span class="line">                <span class="keyword">if</span> m.bias!=<span class="literal">None</span>:</span><br><span class="line">                    m.bias.data.zero_()</span><br><span class="line"><span class="meta">    @profile</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        out1=self.conv1(x) <span class="comment"># B,64,w,h</span></span><br><span class="line">        out1=self.ac1(out1)</span><br><span class="line">        out2=self.blocks(out1) <span class="comment"># B,64,w,h</span></span><br><span class="line">        out3=self.conv2(out2) <span class="comment"># B,64,w,h</span></span><br><span class="line">        out3=self.bn(out3)</span><br><span class="line">        out4=out1+out3</span><br><span class="line">        out5=self.pixel_shuffle(out4) <span class="comment"># B,64,w*4,h*4</span></span><br><span class="line">        out6=self.conv3(out5) <span class="comment"># B,3,w*4,h*4</span></span><br><span class="line">        <span class="keyword">return</span> out6</span><br></pre></td></tr></table></figure><p>查看参数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kernprof --<span class="built_in">help</span></span><br><span class="line">usage: kernprof [-h] [-V] [-l] [-b] [-o OUTFILE] [-s SETUP] [-v] [-u UNIT]</span><br><span class="line">                [-z]</span><br><span class="line">                script ...</span><br><span class="line"></span><br><span class="line">Run and profile a python script.</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  script                The python script file to run</span><br><span class="line">  args                  Optional script arguments</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  -V, --version         show program<span class="string">&#x27;s version number and exit</span></span><br><span class="line"><span class="string">  -l, --line-by-line    Use the line-by-line profiler instead of cProfile.</span></span><br><span class="line"><span class="string">                        Implies --builtin.</span></span><br><span class="line"><span class="string">  -b, --builtin         Put &#x27;</span>profile<span class="string">&#x27; in the builtins. Use</span></span><br><span class="line"><span class="string">                        &#x27;</span>profile.enable()<span class="string">&#x27;/&#x27;</span>.<span class="built_in">disable</span>()<span class="string">&#x27;, &#x27;</span>@profile<span class="string">&#x27; to</span></span><br><span class="line"><span class="string">                        decorate functions, or &#x27;</span>with profile:<span class="string">&#x27; to profile a</span></span><br><span class="line"><span class="string">                        section of code.</span></span><br><span class="line"><span class="string">  -o OUTFILE, --outfile OUTFILE</span></span><br><span class="line"><span class="string">                        Save stats to &lt;outfile&gt; (default: &#x27;</span>scriptname.lprof<span class="string">&#x27;</span></span><br><span class="line"><span class="string">                        with --line-by-line, &#x27;</span>scriptname.prof<span class="string">&#x27; without)</span></span><br><span class="line"><span class="string">  -s SETUP, --setup SETUP</span></span><br><span class="line"><span class="string">                        Code to execute before the code to profile</span></span><br><span class="line"><span class="string">  -v, --view            View the results of the profile in addition to saving</span></span><br><span class="line"><span class="string">                        it</span></span><br><span class="line"><span class="string">  -u UNIT, --unit UNIT  Output unit (in seconds) in which the timing info is</span></span><br><span class="line"><span class="string">                        displayed (default: 1e-6)</span></span><br><span class="line"><span class="string">  -z, --skip-zero       Hide functions which have not been called</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>通常都是下面的参数运行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kernprof -l -v -z -u <span class="number">1e-3</span> xxx.py</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Wrote profile results to eval.py.lprof</span><br><span class="line">Timer unit: 0.001 s</span><br><span class="line"></span><br><span class="line">Total time: 89.0344 s</span><br><span class="line">File: E:\XXX\SRResNet.py</span><br><span class="line">Function: forward at line 30</span><br><span class="line"></span><br><span class="line">Line <span class="comment">#      Hits         Time  Per Hit   % Time  Line Contents</span></span><br><span class="line">==============================================================</span><br><span class="line">    30                                               @profile</span><br><span class="line">    31                                               def forward(self,x):</span><br><span class="line">    32         2        296.9    148.5      0.3          out1=self.conv1(x) <span class="comment"># B,64,w,h</span></span><br><span class="line">    33         2         47.0     23.5      0.1          out1=self.ac1(out1)</span><br><span class="line">    34         2      11893.6   5946.8     13.4          out2=self.blocks(out1) <span class="comment"># B,64,w,h</span></span><br><span class="line">    35         2        240.6    120.3      0.3          out3=self.conv2(out2) <span class="comment"># B,64,w,h</span></span><br><span class="line">    36         2         57.4     28.7      0.1          out3=self.bn(out3)</span><br><span class="line">    37         2         34.9     17.4      0.0          out4=out1+out3</span><br><span class="line">    38         2       9280.0   4640.0     10.4          out5=self.pixel_shuffle(out4) <span class="comment"># B,64,w*4,h*4</span></span><br><span class="line">    39         2      67184.0  33592.0     75.5          out6=self.conv3(out5) <span class="comment"># B,3,w*4,h*4</span></span><br><span class="line">    40         2          0.0      0.0      0.0          <span class="built_in">return</span> out6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>名称</th><th>意义</th></tr></thead><tbody><tr><td>Timer unit</td><td>计时器单位，微秒</td></tr><tr><td>Total time</td><td>测试代码总运行时间</td></tr><tr><td>File</td><td>测试代码文件名</td></tr><tr><td>Hits</td><td>每行代码运行次数</td></tr><tr><td>Time</td><td>每行代码运行时间</td></tr><tr><td>Per Hit</td><td>每行代码运行一次的时间</td></tr><tr><td>% Time</td><td>每行代码运行时间的百分比</td></tr><tr><td>Line Contents</td><td>每行代码内容</td></tr></tbody></table></div><p><del>通常看Time，%Time就好了，觉得命令麻烦的可以加alias</del></p><h3 id="读取lprof-文件"><a href="#读取lprof-文件" class="headerlink" title="读取lprof 文件"></a>读取lprof 文件</h3><p>进入当前目录后，在命令行中使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m line_profiler xxxx.lprof (x.lprof是自己的文件名)</span><br></pre></td></tr></table></figure><p>但是正常调试运行时会报错没有这个属性，我们需要把profile属性定义一下，让他正常运行时不用删更方便：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加在需要运行的程序最上方，本质是不使用kernprof时profile装饰器调用原本函数</span></span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;builtins&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">dir</span>() <span class="keyword">or</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(builtins, <span class="string">&#x27;profile&#x27;</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profile</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    builtins.__dict__[<span class="string">&#x27;profile&#x27;</span>] = profile</span><br></pre></td></tr></table></figure><h2 id="代码运行内存统计"><a href="#代码运行内存统计" class="headerlink" title="代码运行内存统计"></a>代码运行内存统计</h2><p>也是模仿上面那位大神开发出的包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install memory_profiler</span><br><span class="line"><span class="comment"># 加速memory profiler</span></span><br><span class="line">pip install psutil</span><br></pre></td></tr></table></figure><p>也是同样加@profile装饰器（方便二者能同时用，而不冲突）</p><p>运行方式:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m memory_profiler test.py</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Filename: E:\paper解读\Gan\2016.09_SRGAN\codes\model\SRResNet.py</span><br><span class="line"></span><br><span class="line">Line <span class="comment">#    Mem usage    Increment  Occurrences   Line Contents</span></span><br><span class="line">=============================================================</span><br><span class="line">    30  505.516 MiB  -60.969 MiB           2       @profile</span><br><span class="line">    31                                             def forward(self,x):</span><br><span class="line">    32  547.445 MiB -349.020 MiB           2           out1=self.conv1(x) <span class="comment"># B,64,w,h</span></span><br><span class="line">    33  547.488 MiB -432.805 MiB           2           out1=self.ac1(out1)</span><br><span class="line">    34  585.656 MiB -356.387 MiB           2           out2=self.blocks(out1) <span class="comment"># B,64,w,h</span></span><br><span class="line">    35  623.355 MiB -357.324 MiB           2           out3=self.conv2(out2) <span class="comment"># B,64,w,h</span></span><br><span class="line">    36  623.355 MiB -432.723 MiB           2           out3=self.bn(out3)</span><br><span class="line">    37  661.055 MiB -357.324 MiB           2           out4=out1+out3</span><br><span class="line">    38  606.195 MiB -110.090 MiB           2           out5=self.pixel_shuffle(out4) <span class="comment"># B,64,w*4,h*4</span></span><br><span class="line">    39  640.629 MiB   65.297 MiB           2           out6=self.conv3(out5) <span class="comment"># B,3,w*4,h*4</span></span><br><span class="line">    40  640.645 MiB   -3.902 MiB           2           <span class="built_in">return</span> out6</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>个人感觉没有line_profile常用，更详细方法可<a href="https://zhuanlan.zhihu.com/p/121003986">参考这篇</a>。</p><p>最后加一点代码检查：在code选项中inspect code可以看到自己哪些有warning，还可以防一手内存泄漏。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文复现】卷积网络可视化Grad-cam和Guide backpropagation</title>
      <link href="/p/44311.html"/>
      <url>/p/44311.html</url>
      
        <content type="html"><![CDATA[<h2 id="Grad-cam"><a href="#Grad-cam" class="headerlink" title="Grad cam"></a>Grad cam</h2><p>参考<a href="https://blog.csdn.net/qq_37541097/article/details/123089851?spm=1001.2014.3001.5502">我导的讲解</a></p><h3 id="论文小结"><a href="#论文小结" class="headerlink" title="论文小结"></a>论文小结</h3><p>总的公式如下：对于某一类C，<del>比如Cat</del>有</p><script type="math/tex; mode=display">Mat_{grad-cam}^c=Relu(\sum_k \alpha^c_kA^k)</script><p>其中:</p><ul><li>A代表某个特征层，在论文中一般指的是最后一个卷积层输出的特征层</li><li>K代表特征层A中第k个通道(channel)</li><li>c代表类别c</li><li>$A^k$代表特征层A中通道k的数据</li><li>$\alpha^c_k$ 代表$A^k$对应的权重</li></ul><p>最后输出的是一个特征层宽高的矩阵。</p><h4 id="计算权重"><a href="#计算权重" class="headerlink" title="计算权重"></a>计算权重</h4><script type="math/tex; mode=display">\alpha^c_k= \frac{1}{Z}\sum_i\sum_j \frac{\partial y^c}{\partial A^k}</script><p>后面那一项其实是第c类对权重的梯度，可以通过反向传播得到，本质就是对反向传播的矩阵进行一个求平均操作，输出K维的向量作为权重。</p><h4 id="根据上式计算Mat"><a href="#根据上式计算Mat" class="headerlink" title="根据上式计算Mat"></a>根据上式计算Mat</h4><h4 id="转换为图片"><a href="#转换为图片" class="headerlink" title="转换为图片"></a>转换为图片</h4><p>这时已经得到了0~1的灰度图mask，如果想放大则直接使用插值得到结果图</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.resize(mat,targetsize)</span><br></pre></td></tr></table></figure><h4 id="转rgb热力图"><a href="#转rgb热力图" class="headerlink" title="转rgb热力图"></a>转rgb热力图</h4><p>灰度图只能显示提取到的特征，不能很好显示注意力的位置，可以修改为热力图来显示。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将灰度转热力三通道</span></span><br><span class="line">heat_map=cv2.applyColorMap(mask,colormap=colormap)</span><br><span class="line">heat_map=heat_map/<span class="number">255.</span></span><br><span class="line">image=image+heat_map</span><br><span class="line">image=image/np.<span class="built_in">max</span>(image)</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GradCam</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,model_name:<span class="built_in">list</span>,target_size=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.fh=[]</span><br><span class="line">        self.bh=[]</span><br><span class="line">        self.target_size=target_size</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> model_name:</span><br><span class="line">            i.register_forward_hook(self.forward_hook)</span><br><span class="line">            i.register_backward_hook(self.backward_hook)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward_hook</span>(<span class="params">self,module,<span class="built_in">input</span>,output</span>):</span></span><br><span class="line">        self.fh.append(output.cpu().detach().numpy())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward_hook</span>(<span class="params">self,module, grad_in, grad_out</span>):</span></span><br><span class="line">        self.bh = [grad_out[<span class="number">0</span>].cpu().detach().numpy()] + self.bh</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_rgb_image</span>(<span class="params">self,image,mask,colormap: <span class="built_in">int</span> = cv2.COLORMAP_JET,rgb_or_bgr=<span class="literal">False</span>,use_heatmap=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> use_heatmap==<span class="literal">True</span>:</span><br><span class="line">            mask = np.uint8(mask * <span class="number">255</span>)</span><br><span class="line">            heat_map=cv2.applyColorMap(mask,colormap=colormap)</span><br><span class="line">            <span class="keyword">if</span> rgb_or_bgr==<span class="literal">True</span>:</span><br><span class="line">                heat_map=cv2.cvtColor(heat_map,cv2.COLOR_BGR2RGB)</span><br><span class="line">            heat_map=heat_map/<span class="number">255.</span></span><br><span class="line">            image=image+heat_map</span><br><span class="line">            image=image/np.<span class="built_in">max</span>(image)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mask=np.expand_dims(mask,axis=<span class="number">2</span>)</span><br><span class="line">            image=image*mask</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal_cam</span>(<span class="params">self,image,colormap: <span class="built_in">int</span> = cv2.COLORMAP_JET,rgb_or_bgr=<span class="literal">False</span>,use_heatmap=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            获得各层的 mask和image</span></span><br><span class="line"><span class="string">        :param image: 输入的图片 0~1格式</span></span><br><span class="line"><span class="string">        :param colormap: 热力图colormap格式</span></span><br><span class="line"><span class="string">        :param rgb_or_bgr: 输入图片是否为rgb格式HWC</span></span><br><span class="line"><span class="string">        :param use_heatmap: 输出热力图或蒙版图</span></span><br><span class="line"><span class="string">        :return: images,masks</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.Image=[]</span><br><span class="line">        self.masks=[]</span><br><span class="line">        <span class="keyword">for</span> a, a_ <span class="keyword">in</span> <span class="built_in">zip</span>(self.fh, self.bh):</span><br><span class="line">            <span class="comment"># 1,C,W,H -&gt; CWH</span></span><br><span class="line">            a=np.squeeze(a)</span><br><span class="line">            a_=np.squeeze(a_)</span><br><span class="line">            <span class="comment"># C,1,1</span></span><br><span class="line">            alpha = np.mean(a_, axis=(<span class="number">1</span>,<span class="number">2</span>),keepdims=<span class="literal">True</span>)</span><br><span class="line">            <span class="comment"># CWH-&gt; WH</span></span><br><span class="line">            mat = np.<span class="built_in">sum</span>(alpha*a,axis=<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># relu</span></span><br><span class="line">            mat[mat&lt;<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">            <span class="comment"># 转换到0-1</span></span><br><span class="line">            mat=(mat-np.<span class="built_in">min</span>(mat))/(np.<span class="built_in">max</span>(mat)+<span class="number">1e-7</span>)</span><br><span class="line">            <span class="keyword">if</span> self.target_size!=<span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># targetsize W,H</span></span><br><span class="line">                mask=cv2.resize(mat,self.target_size)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mask=mat</span><br><span class="line">            image=self.get_rgb_image(image,mask,colormap=colormap,rgb_or_bgr=<span class="literal">False</span>,use_heatmap=use_heatmap)</span><br><span class="line">            self.masks.append(mask)</span><br><span class="line">            self.Image.append(image)</span><br><span class="line">        <span class="keyword">return</span> self.Image,self.masks</span><br><span class="line"><span class="comment"># 使用方式</span></span><br><span class="line">cam=GradCam(feature_name,target_size)</span><br><span class="line">images,_=cam.cal_cam(raw_image/<span class="number">255.</span>)</span><br><span class="line">cv2.imshow(images[<span class="number">0</span>])</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="Guide-backpropagation"><a href="#Guide-backpropagation" class="headerlink" title="Guide backpropagation"></a>Guide backpropagation</h2><h3 id="论文小结-1"><a href="#论文小结-1" class="headerlink" title="论文小结"></a>论文小结</h3><p>​    总的来说就是根据正反向传播通过relu激活函数的特性进行一个可视化：正向传播中被成功激活的才认为是有效信息，反向传播也同理，所以我们通过正向传播获得激活参数的位置，与反向传播权重进行relu后相乘获得新的反向传播权重权重并回传。</p><p>​    注意这个是要走一遍所有反向传播过程，只是在relu层进行重新回传梯度这个操作，所以最后输出是第一个网络层的梯度(这里需要设置图片允许求梯度，否则第一个会是None），维度与输入图片相同，梯度的输出含义则是图片的边缘信息。</p><p><del>论文里实现部分讲的很难理解，我是根据代码进一步理解的。</del></p><p>我尝试了直接输出第一个网络层（上图）的梯度与GBP（下图）进行对比，只筛选被激活部分还是挺能说明一些东西的。</p><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220517202517.jpg"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220517202518.jpg"/></div></div><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>代码实现时有几点要注意的顺便总结一下：</p><ul><li><p>permute，transpose，view：</p><p>  view：将图片全部展开为一维，然后按照给定的维度进行拼接，会改变原始的矩阵信息。</p><p>  transpose和permute，不会改变原始矩阵信息，用法也相同，只是一个是numpy一个是tensor。</p><p>  比如permute(2,1,0)，代表原本<strong>第2个维到到第一个位置</strong>，第1个元素到第二个位置第0维到第三个位置。</p></li><li><p>直接输出的图片太暗：</p><p>  通过debug可以发现最后输出并不是0~1，所以我们需要把他进行一个0~1的转换，然后由于我们只关心高频边缘信息，所以把0~1直接的全部置0，只保留原始为1的数。这里转换还要注意一点，<strong>为了增强对比度，我们将均值设置在0.5左右，标准差设置在0.1</strong>，上图为min-max归一化，中图为mean-std归一化，下图在中图基础上还设置了方差和均值。</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220517202516.jpg"/></div></div>  <div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220517202519.jpg"/></div></div>  <div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220517202518.jpg"/></div></div></li><li><p>由于会改变反向传播的梯度，不能在训练的时候用也不能和grad-cam同时用（这里的同时是指只进行一次前后向传播）</p></li><li><p>输出gbp.image不存在：需要给前向传播的那张图片设置允许求梯度require<em>grad</em>()</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuideBackPropagation</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,model_name:<span class="built_in">list</span></span>):</span></span><br><span class="line">        self.fh=[]</span><br><span class="line">        self.model=model</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 所有relu层都注册</span></span><br><span class="line">        <span class="keyword">for</span> name, module <span class="keyword">in</span> model.features.named_children():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, nn.ReLU):</span><br><span class="line">                module.register_forward_hook(self.forward_hook)</span><br><span class="line">                module.register_backward_hook(self.backward_hook)</span><br><span class="line">        <span class="comment"># 第一个卷积层位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> model_name:</span><br><span class="line">            i.register_backward_hook(self.first_backward_hook)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normalize</span>(<span class="params">self,I</span>):</span></span><br><span class="line">        <span class="comment"># 归一化梯度map，先归一化到 mean=0 std=1</span></span><br><span class="line">        norm = (I - I.mean()) / I.std()</span><br><span class="line">        <span class="comment"># 把 std 重置为 0.1，让梯度map中的数值尽可能接近 0</span></span><br><span class="line">        norm = norm * <span class="number">0.1</span></span><br><span class="line">        <span class="comment"># 均值加 0.5，保证大部分的梯度值为正</span></span><br><span class="line">        norm = norm + <span class="number">0.5</span></span><br><span class="line">        <span class="comment"># 把 0，1 以外的梯度值分别设置为 0 和 1</span></span><br><span class="line">        norm = norm.clip(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> norm</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward_hook</span>(<span class="params">self,module,<span class="built_in">input</span>,output</span>):</span></span><br><span class="line">        self.fh.append(output.cpu().detach().numpy())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_backward_hook</span>(<span class="params">self,module,grad_in,grad_out</span>):</span></span><br><span class="line">        <span class="comment"># 获取第一个卷积层反向传播的权重</span></span><br><span class="line">        <span class="comment"># BCHW-&gt; CHW -&gt;h,w,c</span></span><br><span class="line">        self.image=grad_in[<span class="number">0</span>].cpu().detach()[<span class="number">0</span>]</span><br><span class="line">        self.image=self.image.permute(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>).numpy()</span><br><span class="line">        self.image=self.normalize(self.image)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward_hook</span>(<span class="params">self,module, grad_in, grad_out</span>):</span></span><br><span class="line">        a=self.fh.pop()</span><br><span class="line">        a[a&gt;<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">        <span class="comment"># 反向传播 relu</span></span><br><span class="line">        new_grad=torch.clamp(grad_out[<span class="number">0</span>],<span class="built_in">min</span>=<span class="number">0.0</span>)</span><br><span class="line">        <span class="comment"># rule 是返回一个参数,返回修改后的梯度</span></span><br><span class="line">        <span class="keyword">return</span> (new_grad*a,)</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">gbp=GuideBackPropagation(feature_name)</span><br><span class="line">res=model(image.require_grad_())</span><br><span class="line">res[<span class="number">0</span>,<span class="number">0</span>].backward()</span><br><span class="line">image=gbp.image</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【杂谈】 西电保研二三事</title>
      <link href="/p/37004.html"/>
      <url>/p/37004.html</url>
      
        <content type="html"><![CDATA[<h2 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h2><p>​    细心的同学肯定会发现，我已经鸽了近4个月。这四个月我都在忙保研，最终结果在9.20号终于出来了，不负众望。但是中间的种种吐槽，我觉得还是值得记录下来，毕竟人生就这么一次大四。</p><p>​    首当其冲是西电人工智能院出名单这么晚！！！直接一锤子定死，24号考研预报名，20号才出名额这不是搞吗。学院不给你时间能够提要求修改名单什么的，我只能说很绝。也杜绝了边缘人保外校的希望（没错就是我）。</p><p>​    然后就是名额数量问题，我终于知道保研名额是出了名额后再算比例的意思了。他是全院一起排名<del>至少今年2022年人工智能院是这样的</del> 然后取一个名次比如95，然后前面95人有36人智科专业，39人智能专业，最低分92.23。最后再折算比例：智科18%（200人），智能24%（159人）。虽然专业间的有几门课不同，大众角度来看还是比较公平的，最后只有边缘躺平人受伤的世界达成了。而且这名额是计算突出特长竞赛的！！所以实际上名额更少。</p><p>​    最后就是图灵班问题，总共似乎是50个人，保了20个（包括5个突出特长），最低分91.63。因为是第一年，可以理解学院偏爱了，但是可惜了我的室友等边缘人。 <del>虽然我也是边缘人</del></p><h2 id="室友预测打脸环节"><a href="#室友预测打脸环节" class="headerlink" title="室友预测打脸环节"></a>室友预测打脸环节</h2><p>这里仅仅是给网友一个忠告不要太乐观，没有吐槽室友的想法，我是怀着悲痛的心情记录下这些文字，对他们的遭遇我只感到十分的惋惜。</p><p>室友A加分15.5，裸分84.9，室友B加分9，裸分87.6，室友C Run出国。他们担心联系不上导师都提前了5个月联系到了导师，下面为室友的语录。</p><p>保研前4个月5.20，A猜测最高综合加分不会超过25，预计能到91.5~92，从往年来看，最低分为91还没有增加政治几门课，而且竞赛加分不限（今年开始学科竞赛等加分限制数量了）预测今年肯定会更低。</p><p>保研前1个月8.20，B问导师自己分数怎么样，导师劝导他做好考研的准备以防万一。室友A本来说帮老师写论文但似乎和npy过的很开心，玩了一个暑假。 </p><p>保研前15天9.5，我们开学了，回到学校可以看到室友B在准备考研，我也在稍微准备，问室友A的想法，他说不缺这几天，名单出来后再准备也不迟 <del>我深以为然，也松懈了</del>。</p><p>9.14日左右，名单第一版出来，发现综合分数按专业最高分折算，包括突出特长！也就是38分！我们三心凉了一截，A还在安慰说肯定加错了，不可能有38，并且应该按专业分开算最高分折算比例，我又开始准备考研了。</p><p>好在当天就说名单出了明显问题，A，B肯定是分数出现错误，我不以为然。</p><p>9.15，A猜测正确，名单确定出错了，并且按专业最高折算，我们三分别是36，39，41。A觉得自己很危险但又没那么危险，毕竟觉得保研率不可能会低于20%，而且听说别的学校都多了很多名额。室友B觉得自己应该还行，就和D打起了游戏。我虽然感觉应该没问题但还是不放心。</p><p>9.17 ，A从导师那得到消息名额只有39个！B也去找导师确认，结果B的导师把B卖了，直接拿聊天截图去问A导师，A导师说没有这回事。<del>虽然我也找了我导师确认，但是无奈他很自闭，不管这些东西</del></p><p>9.19 ，名单正式出来，智科36，智能39。班群可想而知炸了，边缘人全在喷教务处，我们也很伤心。本来还说保研了我请吃饭，看来要等到12月了。</p><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>9.4 室友C的托福因为疫情又推延到了10.17。他已经从去年12月等了快一年了。</p><p>9.10~9.18 室友A在室友C劝说下玩起了宝可梦，回忆童年。但我感觉他并没有乐在其中，只是在缓解焦虑。</p><p>9.10~9.18 室友C上大师失败，并且每天的目标都是昨天的分数，疯狂反复横跳。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>​    大学四年过的真的很快，我有时会想，如果我没有跟从室友一起<del>一个人做事</del> 会不会是截然不同的一条道路。。从大一什么都感兴趣到大四不那么想看论文，我能感觉到我的学习力越来越低，越来越躺平了。看到我高中同学有些能去清北深，我有点后悔，不禁反问起自己是不是大二再努力点我也有机会呢？<del>混的不好同学聚会很尴尬</del></p><p>​    现在比别人多了95天的时间是应该好好利用起来了。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文复现】SRGan</title>
      <link href="/p/39020.html"/>
      <url>/p/39020.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>似乎是第一篇用Gan做超分？挺有借鉴意义的，原文为Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>简单来说就是用MSE做loss容易丢失高频信息，他们提出用内容损失更好<del>就是特征图的MSE</del>，并且提出MOS作为评价指标<del>自己定的一个评分标准，用来吹水</del>，然后使用Gan来训练能够避免高频信息丢失，MOS更好<del>确实人眼效果更好</del>。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h4 id="SRResNet"><a href="#SRResNet" class="headerlink" title="SRResNet"></a>SRResNet</h4><p>就是一个ResNet堆叠然后使用2个pixel shuffler层放大了4倍。</p><p>看到网上有些人把BN换成了IN，PRelu换成了LeakyRelu，其实是个trick，IN在gan里面表现更好。</p><h4 id="SRGan"><a href="#SRGan" class="headerlink" title="SRGan"></a>SRGan</h4><p>使用有预训练的SRResNet作为生成器，训练一个新卷积网络作为判别器。</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>先单独使用MSE loss训练SRResNet，有一定效果后作为生成器的预训练权重，然后训练gan，有些细节：</p><ul><li>Adam beta0 使用0.9 <del>影响不大</del></li><li>lr 训练到一半时降一半 <del>个人因为没有训练那么多epoch就没有降</del></li><li>lr 使用ImageNet参数normalize，hr归一到-1~1。 <del>方便统一数量级</del></li><li>MSE loss 除一个常数，也是方便统一数量级但是新的pytorch mse默认求平均，本身就很小感觉不用除 <del>但是统一数量级很值得借鉴</del></li><li>生成器的loss为内容损失+1e-4 判别器交叉熵损失</li><li>文章还说一个图片拆成16个96X96，但我只是随机crop了96X96，然后flip，多次训练。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>最后附上我实现的代码，见<a href="https://github.com/dummerchen/SRResGan">Github</a>，参考了<a href="https://blog.csdn.net/qianbin3200896/article/details/104181552">这篇 blog</a>，数据集使用的是coco2014的val 4w张图片，验证集是bsd100。个人亲测训练集太小（使用bsd500 train）效果不好 <del>也有可能是我数据增强写的不好？</del>。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次使用VB操作excel</title>
      <link href="/p/35344.html"/>
      <url>/p/35344.html</url>
      
        <content type="html"><![CDATA[<h3 id="记一次使用VB操作excel"><a href="#记一次使用VB操作excel" class="headerlink" title="记一次使用VB操作excel"></a>记一次使用VB操作excel</h3><p>代码感觉没什么特殊的，if for都差不多，上手很快。但是表格的active不是很好控制，不能使用变量来指定挺麻烦的。</p><p>总之就是水一篇博客，顺便把代码存一下<del>我妈年终还要用</del></p><p>就是实现一个把总表按表头grouby 然后放入新表对应名字的sheet中。就是不知道为什么xp上跑不了？？现在才知道测试环境和应用环境差距真的大。</p><figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> create_sheet()</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 批量新建多个sheet表，新建一个cresheet的宏</span></span><br><span class="line">Application.ScreenUpdating = <span class="literal">False</span></span><br><span class="line"><span class="keyword">Dim</span> name <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;注射剂二楼&quot;</span></span><br><span class="line"><span class="keyword">Set</span> st = Worksheets(name)       <span class="comment">&#x27; 表初始值，定位源数据表，更改成需要拆分表的名称</span></span><br><span class="line">Workbooks.Add</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> i = <span class="number">2</span> <span class="keyword">To</span> st.UsedRange.Rows.Count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">Resume</span> <span class="keyword">Next</span>            <span class="comment">&#x27; 若表名不存在，忽略代码引起的运行错误</span></span><br><span class="line">    nn = st.Cells(i, <span class="string">&quot;A&quot;</span>).Value</span><br><span class="line">    <span class="keyword">If</span> nn &lt;&gt; <span class="string">&quot;&quot;</span> <span class="keyword">Then</span></span><br><span class="line">        <span class="keyword">If</span> Worksheets(st.Cells(i, <span class="string">&quot;A&quot;</span>).Value) <span class="built_in">Is</span> <span class="literal">Nothing</span> <span class="keyword">Then</span>  <span class="comment">&#x27;判断是否存在对应的工作表</span></span><br><span class="line">            Worksheets.Add after:=Worksheets(Worksheets.Count)      <span class="comment">&#x27;永远将新表加入到最后一个工作表之后</span></span><br><span class="line">        </span><br><span class="line">        ActiveSheet.name = nn             <span class="comment">&#x27;新的工作表为当前活动的工作，将工作表的名称更改为神山表中对应单元格的名字。</span></span><br><span class="line">        st.Range(<span class="string">&quot;A1&quot;</span>).Resize(<span class="number">1</span>, <span class="number">6</span>).Copy ActiveSheet.Range(<span class="string">&quot;A1&quot;</span>) <span class="comment">&#x27;resize 后面的6代表需要复制的行数，即表头有多少行</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">        <span class="keyword">Set</span> rng = Worksheets(nn).Range(<span class="string">&quot;A100000&quot;</span>).<span class="keyword">End</span>(xlUp).Offset(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        st.Cells(i, <span class="string">&quot;A&quot;</span>).Resize(<span class="number">1</span>, <span class="number">6</span>).Copy rng</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line">Application.DisplayAlerts = <span class="literal">False</span> <span class="comment">&#x27;取消确定弹窗</span></span><br><span class="line">Sheets(<span class="number">1</span>).Delete</span><br><span class="line"></span><br><span class="line">ActiveWorkbook.SaveAs ThisWorkbook.Path &amp; <span class="string">&quot;./&quot;</span> &amp; name</span><br><span class="line"></span><br><span class="line">Application.ScreenUpdating = <span class="literal">True</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ onnxruntime部署避坑记录</title>
      <link href="/p/10043.html"/>
      <url>/p/10043.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    我一直都知道我学的c++和工程c++不一样，所以知道这篇文章之前我连库都不知道如何安装，毕竟刷算法题不需要也不能用额外的库。我也花了很大精力从舒适区走出来，终于成功c++部署modnet|RVM上线，我感觉收获了很多。<del>对比之下用python真简单</del></p><p>​    <strong>注意，本文章并不是教程，更多是避坑记录，面向已经阅读过网上多数教程后需要debug的群体。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无特殊说明默认是在cpu i5上的结果，否则以特殊说明的型号为准</span></span><br><span class="line">win 10x64 cpu i5</span><br><span class="line"></span><br><span class="line">vs2019</span><br><span class="line">opencv 4.5.5</span><br><span class="line">onnx 1.9.1</span><br></pre></td></tr></table></figure><p>由于比赛原因，我近一个月后这篇文章才发布。</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h2 id="VisualStudio-2019"><a href="#VisualStudio-2019" class="headerlink" title="VisualStudio 2019"></a>VisualStudio 2019</h2><p>​    有人肯定会说为什么不用vscode啊巴拉巴拉。一个主打轻量级去做这种项目免不了安装很多插件<del>这么多插件哪天一个不支持了就gg</del>。所以还是vs更方便，当然各有各的喜好。</p><p>​    vs正常安装下载，然后把 xx\VisualStudio\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64路径放到环境变量即可。</p><p>这里大概说一下bin，include，lib文件夹的作用，后面安装库文件的时候就会明白很多，而不是一头雾水：</p><ul><li>include：.h结尾，主要是函数<strong>声明</strong>，可以放入子文件夹当然如果这样引用也需要带文件夹。如果运行程序include报错多半是找不到这个路径。</li><li>bin：.dll结尾，动态链接文件。</li><li>lib：.lib结尾，静态链接文件。</li></ul><p>c++编译过程图可以参考<a href="https://blog.csdn.net/qq_43133135/article/details/82865618">这篇</a></p><h3 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h3><p>​    这个网上有很多，都是安装后把有include的路径加入环境变量，链接库加入链接什么的。但是根据上面的理解，我们可以发现vs已经链接了xx\VisualStudio\VC\Tools\MSVC\14.29.30133\include、xx\VisualStudio\VC\Tools\MSVC\14.29.30133\lib\x64。我们可以把编译好的opencv里的\include\opencv，lib\xxx，bin\xxx放入vs的对应文件夹即可。同理，其他库比如gflags也是一样，编译好丢进去就行了<del>就是怕冲突不好删除</del>，就不用每次一个库占一个文件夹还要添加环境变量。</p><p>​    不过这样做就需要项目部署时把依赖重新全部丢进去。</p><h3 id="onnxruntime"><a href="#onnxruntime" class="headerlink" title="onnxruntime"></a>onnxruntime</h3><p>​    为避免踩坑可以看这篇<a href="https://blog.csdn.net/qq_19865329/article/details/115945454">csdn博客</a>，我最开始还以为像其他库一样需要编译，结果直接可以用vs自带的包管理软件nuget直接下载。<del>编译报一堆错误弄半天，吐血</del></p><p>去下载安装包<a href="https://www.nuget.org/">https://www.nuget.org/</a> (建议不要下载最新)。然后打开vs2019，工具-&gt;NuGet程序包管理器-&gt;程序包管理控制平台：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Install-Package microsoft.ml.onnxruntime.1.xx.x -Source your nupkg dir</span><br></pre></td></tr></table></figure><h2 id="python-导出onnx"><a href="#python-导出onnx" class="headerlink" title="python 导出onnx"></a>python 导出onnx</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> onnx</span><br><span class="line">pip <span class="keyword">install</span> onnxmltool</span><br></pre></td></tr></table></figure><p>这个具体如何从pth导出onnx还是要参考官网给的例子，网络不同细节也不同。</p><h2 id="ModNet-onnxruntimeC-部署"><a href="#ModNet-onnxruntimeC-部署" class="headerlink" title="ModNet onnxruntimeC++部署"></a>ModNet onnxruntimeC++部署</h2><h3 id="读取图像并预处理"><a href="#读取图像并预处理" class="headerlink" title="读取图像并预处理"></a>读取图像并预处理</h3><p>​    输入网络肯定是要预处理的图像，用image watch可以边调试边查看图片，同时我发现比较小的matting网络normalized可能效果会更差，因为相当于就是一个floor full，normalized后颜色更不好区分了,这个需要自己微调。<del>image watch真好用</del></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;cv::Mat&gt; <span class="title">HumanSeg::preprocess</span><span class="params">(cv::Mat &amp;image)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">image_h = image.rows;</span><br><span class="line">image_w = image.cols;</span><br><span class="line"><span class="keyword">int</span> rw, rh;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (image_w &gt; image_h)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">rh = 512;</span></span><br><span class="line"><span class="comment">rw = (image_w*1.0 / image_h) *refsize;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">rw = 512;</span></span><br><span class="line"><span class="comment">rh = (image_h *1.0/ image_w) * refsize;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">rh -= rh % 32;</span></span><br><span class="line"><span class="comment">rw -= rw % 32;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 图像还是出bug了，有时间能改就改</span></span><br><span class="line">rh = rw = refsize;</span><br><span class="line">cv::Mat resized_image,resized_image_float,normalized_image;</span><br><span class="line">cv::<span class="built_in">cvtColor</span>(image, image, cv::ColorConversionCodes::COLOR_BGR2RGB);</span><br><span class="line">cv::<span class="built_in">resize</span>(image, resized_image, cv::<span class="built_in">Size</span>(rw,rh),<span class="number">0</span>,<span class="number">0</span>,cv::INTER_AREA); <span class="comment">//41ms</span></span><br><span class="line"></span><br><span class="line">resized_image.<span class="built_in">convertTo</span>(resized_image_float, CV_32F,<span class="number">1.0</span>/<span class="number">255</span>); <span class="comment">//14 ms </span></span><br><span class="line">normalized_image = <span class="built_in">normalize</span>(resized_image_float); <span class="comment">// 16ms</span></span><br><span class="line">input_node_dims = &#123; <span class="number">1</span>,<span class="number">3</span>,rh,rw &#125;;</span><br><span class="line"><span class="keyword">return</span> &#123; resized_image,normalized_image &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="onnx网络运行并输出"><a href="#onnx网络运行并输出" class="headerlink" title="onnx网络运行并输出"></a>onnx网络运行并输出</h3><ul><li>首先要将hwc格式转为bchw格式才能输入网络(blob函数)</li><li>输出的是float数组指针类型，需要按对应点转换为矩阵<del>这个我也不怎么明白怎么方便转换</del>。</li><li>转换之后要转换为uint8类才能参与后面的运算。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::Mat blob = cv::dnn::<span class="built_in">blobFromImage</span>(normalized_image, <span class="number">1</span>, cv::<span class="built_in">Size</span>((<span class="number">512</span>),(<span class="number">512</span>)), cv::<span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// create input tensor</span></span><br><span class="line"><span class="keyword">auto</span> memory_info = Ort::MemoryInfo::<span class="built_in">CreateCpu</span>(OrtArenaAllocator, OrtMemTypeDefault);</span><br><span class="line"></span><br><span class="line">input_tensors.<span class="built_in">emplace_back</span>(Ort::Value::CreateTensor&lt;<span class="keyword">float</span>&gt;(memory_info, blob.ptr&lt;<span class="keyword">float</span>&gt;(), blob.<span class="built_in">total</span>(), input_node_dims.<span class="built_in">data</span>(), input_node_dims.<span class="built_in">size</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 798ms</span></span><br><span class="line">std::vector&lt;Ort::Value&gt; output_tensors = session.<span class="built_in">Run</span>(</span><br><span class="line">Ort::RunOptions&#123; <span class="literal">nullptr</span> &#125;,</span><br><span class="line">input_node_names.<span class="built_in">data</span>(),</span><br><span class="line">input_tensors.<span class="built_in">data</span>(),</span><br><span class="line">input_node_names.<span class="built_in">size</span>(),</span><br><span class="line">out_node_names.<span class="built_in">data</span>(),</span><br><span class="line">out_node_names.<span class="built_in">size</span>()</span><br><span class="line">);</span><br><span class="line"><span class="comment">// h,w,3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span>* floatarr = output_tensors[<span class="number">0</span>].GetTensorMutableData&lt;<span class="keyword">float</span>&gt;();</span><br><span class="line"></span><br><span class="line">cv::Mat mask, mask_1f;</span><br><span class="line">mask_1f = cv::<span class="built_in">Mat1f</span>(input_node_dims[<span class="number">2</span>],input_node_dims[<span class="number">3</span>], floatarr);</span><br><span class="line">mask_1f *= <span class="number">255</span>;</span><br><span class="line">mask_1f.<span class="built_in">convertTo</span>(mask, CV_8U);</span><br></pre></td></tr></table></figure><h3 id="resize并添加alpha通道"><a href="#resize并添加alpha通道" class="headerlink" title="resize并添加alpha通道"></a>resize并添加alpha通道</h3><p>要注意，网上最常见的用split然后push_back alpha通道 再merge的方法但这是有弊端的，因为输出的是四通道图片，opencv::imwrite和视频流都无法输出。</p> <div class="tip warning faa-horizontal animated"><p>cv::cvtcolor的bgra2bgr参数 是直接丢去alpha通道，而不是智能转换。</p></div><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">cv::Mat <span class="title">add_alpha</span><span class="params">(cv::Mat src,cv::Mat alpha)</span></span></span><br><span class="line"><span class="function">vector&lt;cv::Mat&gt; srcChannels</span>;</span><br><span class="line">cv::<span class="built_in">split</span>(src, srcChannels);</span><br><span class="line">    dstChannels.<span class="built_in">push_back</span>(srcChannels[<span class="number">0</span>]);</span><br><span class="line">    dstChannels.<span class="built_in">push_back</span>(srcChannels[<span class="number">1</span>]);</span><br><span class="line">    dstChannels.<span class="built_in">push_back</span>(srcChannels[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">//添加透明度通道</span></span><br><span class="line">    dstChannels.<span class="built_in">push_back</span>(alpha);</span><br><span class="line">        <span class="comment">//合并通道</span></span><br><span class="line">    cv::<span class="built_in">merge</span>(dstChannels, dst);</span><br><span class="line"><span class="keyword">return</span> dst</span><br></pre></td></tr></table></figure><p>如果用矩阵乘法转三通道也是可以的。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">raw_image.<span class="built_in">convertTo</span>(fimg,CV_32FC1);</span><br><span class="line">cv::Mat rest =cv::<span class="built_in">Scalar</span>(<span class="number">1.</span>)-pmat;</span><br><span class="line">std::vector&lt;cv::Mat1f&gt; channels;</span><br><span class="line">cv::<span class="built_in">split</span>(fimg,channels);</span><br><span class="line"><span class="comment">// 都是255就是黑色背景，这个参数是绿色背景</span></span><br><span class="line">cv::Mat mbmat = channels[<span class="number">0</span>].<span class="built_in">mul</span>(pmat) + rest.<span class="built_in">mul</span>(cv::<span class="built_in">Scalar</span>(<span class="number">153.</span>));</span><br><span class="line">cv::Mat mgmat = channels[<span class="number">1</span>].<span class="built_in">mul</span>(pmat) + rest.<span class="built_in">mul</span>(cv::<span class="built_in">Scalar</span>(<span class="number">255.</span>));</span><br><span class="line">cv::Mat mrmat = channels[<span class="number">2</span>].<span class="built_in">mul</span>(pmat) + rest.<span class="built_in">mul</span>(cv::<span class="built_in">Scalar</span>(<span class="number">120.</span>));</span><br><span class="line">vector&lt;cv::Mat&gt; merge_channel_mats;</span><br><span class="line">merge_channel_mats.<span class="built_in">push_back</span>(mbmat);</span><br><span class="line">merge_channel_mats.<span class="built_in">push_back</span>(mgmat);</span><br><span class="line">merge_channel_mats.<span class="built_in">push_back</span>(mrmat);</span><br></pre></td></tr></table></figure><p>用位与运算是可以的，如果边缘非常模糊还可以通过调节阈值来选择mask来除去。<del>位运算这个思路很巧妙</del>：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cv::<span class="built_in">threshold</span>(mask, mask_thresh, <span class="number">250</span>, <span class="number">255</span>, cv::THRESH_TOZERO);</span><br><span class="line">cv::<span class="built_in">bitwise_and</span>(src, src, dst, alpha);</span><br><span class="line">cv::<span class="built_in">resize</span>(pre_image, without_bg, cv::<span class="built_in">Size</span>(image_w, image_h), <span class="number">0</span>, <span class="number">0</span>, cv::INTER_AREA);<span class="comment">// 123ms</span></span><br></pre></td></tr></table></figure><p>注意先后顺序，如果后resize则运算量会小一点，同时锯齿现象也会小<del>取决于插值方法</del>。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>感兴趣可以去我的<a href="https://github.com/dummerchen/modnet_inference">github仓库</a>看</p><h3 id="onnx加速"><a href="#onnx加速" class="headerlink" title="onnx加速"></a>onnx加速</h3><h4 id="Fp32转Fp16"><a href="#Fp32转Fp16" class="headerlink" title="Fp32转Fp16"></a>Fp32转Fp16</h4><p><del>众所周知，Fp16会更快，训练的时候用混合精度训练也会更快</del></p><p>但是注意自己的精度是否支持，有的显卡是不支持fp16或int8的，通常来说fp32转fp16各方面效率都会快两倍,但是只支持gpu，cup可能效果还会差。</p><h4 id="多线程运行"><a href="#多线程运行" class="headerlink" title="多线程运行"></a>多线程运行</h4><p>我一直都在找onnxruntime的多线程，发现真的只有那一个参数有明显改变。其他参数我试过没有用，估计默认的就是开了。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 就这一个有用</span></span><br><span class="line">session_options.<span class="built_in">SetIntraOpNumThreads</span>(num_threads);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个开了和没开一样   </span></span><br><span class="line"><span class="comment">//session_options.SetInterOpNumThreads(num_threads);</span></span><br><span class="line"><span class="comment">// 如果开parallel会变慢</span></span><br><span class="line"><span class="comment">//session_options.SetExecutionMode(ExecutionMode::ORT_PARALLEL); </span></span><br></pre></td></tr></table></figure><p>果然最后还是和别人一样没有复现出来ModNet(700ms)，论文夹带私货太严重了。</p><h2 id="Robust-Video-Matting"><a href="#Robust-Video-Matting" class="headerlink" title="Robust Video Matting"></a>Robust Video Matting</h2><p>​    这篇论文比modnet友好很多，没有藏着掖着，该开源的都开源了，但是能看的c++部署还是一如既往的少只有这一个<a href="https://github.com/PeterL1n/RobustVideoMatting/issues/20">issuse</a>。而<a href="https://github.com/DefTruth/lite.ai.toolkit">lite.ai.toolkit</a>又”高度”耦合化，单独使用还挺麻烦的，所以我就借鉴了一下代码，然后自己写的个cpp。部署后用cpu i5跑FP32是300ms/frame的样子。更换好点的cpu可以到13fps</p><h3 id="openvino-部署"><a href="#openvino-部署" class="headerlink" title="openvino 部署"></a>openvino 部署</h3><p>​        看网上都说这个框架比onnx还能加速，但是用python实测发现IR效果和直接用pth权重推理速度相同，猜测是没有起到加速作用，就没有使用c++部署。</p><h3 id="onnxruntime-c-部署"><a href="#onnxruntime-c-部署" class="headerlink" title="onnxruntime c++部署"></a>onnxruntime c++部署</h3><p>同见<a href="https://github.com/dummerchen/RobustVideoMatting_inference">github</a></p><h3 id="优化-amp-amp-总结"><a href="#优化-amp-amp-总结" class="headerlink" title="优化&amp;&amp;总结"></a>优化&amp;&amp;总结</h3><p>rvm原始代码是将图像缩放到0~1即不做任何处理直接输入，输出也是直接通过alpha进行合成，下面我将图像进行其他简单的预处理：</p><ul><li><p>coco数据集常数进行normalization：预处理后的边缘会变的很明显，噪声很多，效果也变差很多（出现多余的目标）。</p></li><li><p>缩放到[-1,1]：效果比上一个的稍好，但是人物边缘会更模糊但是检测的精度有时会更高。</p></li><li><p>对alpha通过阈值筛选，减少边缘模糊：</p><p>  ​    将阈值设为0.32左右可以有效减少边缘模糊(不同数据集上要自己进行微调)</p></li><li><p>修改输出节点仅为pha：</p><p>  ​    因为应用中不需要fgr等，源码不仅仅输出alpha，还输出了fgr，r1o等层，我们更改输出仅为alpha，代码量减少。</p></li><li><p>实践证明fp32和fp16在仅在cpu上运行是没有优化的推理时间相同。</p></li><li><p>也尝试了使用Int8量化，但是网络结构包含大量四则运算，故需要频繁quant和dequant，并没有起到优化作用速度反而下降了两倍。参考到<a href="https://blog.csdn.net/zhqh100/article/details/123742045">这篇文章</a>也是没有量化成功，可见并非所有网络都能量化成功和达到理想的效果。</p><p>  <a href="https://onnxruntime.ai/docs/performance/quantization.html">onnxfp32转int8</a>比<a href="https://pytorch.org/docs/stable/quantization.html">pth的fp32转int8</a>更方便，用pth先转int8比较麻烦，还要改网络等，onnx只需要一行代码，所以个人建议先转fp32 onnx再转int8更简单（虽然不知道原理）而且用onnx的int8速度只会下降一点。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++,机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>放下鼠标，更高效的工作</title>
      <link href="/p/11693.html"/>
      <url>/p/11693.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    你是否曾想过像黑客一样只用键盘操控电脑？<del>实际上是为了防止鼠标手？😀</del>，这篇文章就是介绍几个好用的插件让你实现”鼠标自由”。</p><p>​    个人亲测用了近一个月还是比较方便的。</p><h2 id="浏览器脱离鼠标"><a href="#浏览器脱离鼠标" class="headerlink" title="浏览器脱离鼠标"></a>浏览器脱离鼠标</h2><p>这里就要靠<a href="https://github.com/philc/vimium">vimium</a>这款神器<del>插件下载时可以选择vimium C，这个有更多功能</del>，熟练应用它后操作浏览器就像hacker操作vim一样，而且操作也很简单。<del>最大的优点就是看小说很方便</del></p><p>但是功能太多也有不好的地方，容易误触比如i，而且随着浏览器的升级，有些按钮不再自带herf属性比如简书的评论区翻页，f检测不到也是个问题，我想这也是作者不怎么更新的理由吧。<del>但是不影响装逼</del></p><p>下面我分享我的快捷键设置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 网页内操作</span><br><span class="line"># 刷新页面ctrl r</span><br><span class="line">unmap r</span><br><span class="line">unmap R</span><br><span class="line"># 关闭就手动关闭，i容易误触</span><br><span class="line">unmap i</span><br><span class="line"># 文本框选择模式用就行了</span><br><span class="line">unmap gi</span><br><span class="line">unmap gu</span><br><span class="line">unmap gU</span><br><span class="line">unmap [[</span><br><span class="line">unmap ]]</span><br><span class="line">unmap P</span><br><span class="line">map p openCopiedUrlInNewTab</span><br><span class="line">map I zoomIn</span><br><span class="line">map O zoomOut</span><br><span class="line">map lh LinkHints.activateHover</span><br><span class="line">map f LinkHints.activateOpenInNewTab</span><br><span class="line">map F LinkHints.activate</span><br><span class="line"># 搜索框选项</span><br><span class="line">unmap gn</span><br><span class="line">unmap ge</span><br><span class="line">unmap gE</span><br><span class="line">unmap b</span><br><span class="line">unmap B</span><br><span class="line">unmap T</span><br><span class="line">unmap m</span><br><span class="line">unmap N</span><br><span class="line">map m performBackwardsFind</span><br><span class="line">map v enterVisualMode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 标签页设置</span><br><span class="line">unmap t</span><br><span class="line">unmap g0</span><br><span class="line">unmap g$</span><br><span class="line">unmap x</span><br><span class="line">unmap X</span><br><span class="line">unmap W</span><br><span class="line">unmap yt</span><br><span class="line">unmap &lt;&lt;</span><br><span class="line">unmap &gt;&gt;</span><br><span class="line">unmap gt</span><br><span class="line">unmap gT</span><br></pre></td></tr></table></figure><p>把大部分不常用的功能关掉可以有效减少误触的概率。</p><p>但是这里有几点新手比较难用：</p><ul><li><p>焦点选择：</p><blockquote><p>比如知乎你打开了评论区，但是评论区是一个新窗口用，此时焦点还是在原来窗口，这个时候用鼠标重新选择焦点就显得很憨。可以使用lh<del>我设置的快捷键，默认是没有这个的</del>，模拟鼠标点击获取焦点。</p></blockquote></li><li><p>文字选择：</p><blockquote><p>某 时候发现文章有些生词看不懂，想用鼠标复制会显得很憨。如果是超链接可以使用yv进入文字模式直接copy</p><p>如果是普通文字可以使用/搜索然后回车用n|m上下选择关键字，然后用v进入visual mod进行选择文字，alt+方向键进行拓展选择。<del>不得不说这个还是挺麻烦的</del> </p></blockquote></li></ul><h2 id="桌面脱离鼠标"><a href="#桌面脱离鼠标" class="headerlink" title="桌面脱离鼠标"></a>桌面脱离鼠标</h2><p>当然，只有浏览器脱离鼠标还是不够的，如果用鼠标打开浏览器那岂能前功尽弃。</p><p>我们可以使用wox这款软件，它综合和优化了everything的功能，alt+space可以让你随时能够搜索和打开想要的软件，根本不需要鼠标进行操作。</p><p>如果要在文件夹里操作本人亲测HuntAndPeck软件并不像vimium那么好用，文本选项并不能很好的找到，而且快捷键也容易冲突，不如用bash。</p><h2 id="任务栏脱离鼠标"><a href="#任务栏脱离鼠标" class="headerlink" title="任务栏脱离鼠标"></a>任务栏脱离鼠标</h2><p>有人说，我想要聊天怎么办？不还是要鼠标来点击任务栏里的任务吗。对于这一点倒不必担心，windows已经为我们准备好了快捷键win+b对任务栏进行选择，左右键可以移动焦点，Enter选择打开应用。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百面机器学习</title>
      <link href="/p/44332.html"/>
      <url>/p/44332.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然是临时抱佛脚，但是这些面试题对我这种小白来说还是学到很多。后面没有星星的问题并不是原书上的，因为面试也常顺便就归类了。</p><h1 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h1><h2 id="为什么需要对数值类型的特征做归一化？-bigstar"><a href="#为什么需要对数值类型的特征做归一化？-bigstar" class="headerlink" title="为什么需要对数值类型的特征做归一化？$\bigstar$"></a>为什么需要对数值类型的特征做归一化？$\bigstar$</h2><p>归一化分为min-max和z-score归一化，前者只需要min和max即可归一，后者还需要均值和方差。效果也不一定会更好，但是通常z-score效果会更好一点 <del>因为计算均值和方差更麻烦</del>，对于需要梯度下降的算法如svm，线性回归，逻辑回归，神经网路等，在相同的学习率下，归一化能明显降低算法收敛速度。但决策树不适用</p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220216124905.png" class="" title="，height&#x3D;0.3vh"><h2 id="怎样处理类别型特征？-bigstar-bigstar"><a href="#怎样处理类别型特征？-bigstar-bigstar" class="headerlink" title="怎样处理类别型特征？$\bigstar\bigstar$"></a>怎样处理类别型特征？$\bigstar\bigstar$</h2><p>类别型特征分为两类：可比较和不可比较。</p><ul><li><p>对于可比较类别型特征映射为0，1，2这种当然是没有问题。因为也保留了可比较这种特征</p></li><li><p>但是对于不可比较特征如男女，应该使用不可比较映射如onehot或二进制编码<del>现在二进制编码不常用</del>等。</p><blockquote><p>对于onehot，如果特征过多会很冗余浪费空间可以用向量的稀疏表示节省空间。如[0,0,0,5,0,0,0,0,1]=&gt;(10,[3,9],[5,1])，代表第3和9位上有个5和1</p></blockquote></li></ul><h2 id="什么是组合特征？如何处理高维组合特征？-bigstar-bigstar"><a href="#什么是组合特征？如何处理高维组合特征？-bigstar-bigstar" class="headerlink" title="什么是组合特征？如何处理高维组合特征？$\bigstar\bigstar$"></a>什么是组合特征？如何处理高维组合特征？$\bigstar\bigstar$</h2><p>组合特征简单理解就是多个类别型特征对应一个label<del>就是常见的excel文件</del>。</p><p>我们通常处理都说分别使用onehot然后再拼接。比如：</p><blockquote><p>有m个用户，n个物品，label为是否点击，拼接后对应的就是m+n+2维onehot向量（label看情况拼接）</p><p>但是对于互联网来说m和n太大了，尽管向量稀疏表示可以节省空间但是网络的训练参数确不能节省（m*n)。这个时候就需要矩阵分解了，将m*n分解乘m*k+k*n，k&lt;&lt;m,n。训练参数也大大减少</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/145120275">矩阵分解具体可以看这篇知乎</a></p><h2 id="怎样有效地找到组合特征-bigstar-bigstar"><a href="#怎样有效地找到组合特征-bigstar-bigstar" class="headerlink" title="怎样有效地找到组合特征?$\bigstar\bigstar$"></a>怎样有效地找到组合特征?$\bigstar\bigstar$</h2><p>可以通过决策树帮助来寻找。</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220216131620.png" alt="image-20220216131620391">比如通过上面的决策树可以筛选出如下四个特征：</p><ul><li>年龄&lt;=35”且“性别=女”。 </li><li>年龄&lt;=35”且“物品类别=护肤”。 </li><li>用户类型=付费”且“物品类型=食品”。 </li><li>用户类型=付费”且“年龄&lt;=40”。</li></ul><p>那么下面这条信息可以被视为[1，1，0，0] ：满足一二条不满足三四条</p><div class="table-container"><table><thead><tr><th>是否点击</th><th>年龄</th><th>性别</th><th>用户类型</th><th>物品类型</th></tr></thead><tbody><tr><td>1</td><td>28</td><td>女</td><td>免费</td><td>护肤</td></tr></tbody></table></div><h2 id="有哪些文本表示模型？它们各有什么优缺点？-bigstar-bigstar"><a href="#有哪些文本表示模型？它们各有什么优缺点？-bigstar-bigstar" class="headerlink" title="有哪些文本表示模型？它们各有什么优缺点？$\bigstar\bigstar$"></a>有哪些文本表示模型？它们各有什么优缺点？$\bigstar\bigstar$</h2><h3 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h3><p>​    将整段文本以词为单位切分开[i,am,food]， 然后每篇文章可以表示成一个长向量[[a,b,c],[aa,bb,cc],[aaa,bbb,ccc]]，向量中的每一维代表一个单词，而该维对应的权重则反映了这个词在原文章中的重要程度。</p><p>​    可以看出权重计算极其关键，那如何计算权重呢？常用的是TF-IDF来计算文本的权重：TF-IDF=TF*IDF</p><p>TF为单词t在所有文章里的频率，IDF=$log \frac{文章总数}{包含单词t的文章总数+1}$。实际应用时可能不会直接按单词直接分割文本，而是可以word stemming（提取词干）和n-gram（提取短语）结合处理文本后再进行分割计算权重。</p><h3 id="主题模型"><a href="#主题模型" class="headerlink" title="主题模型"></a>主题模型</h3><p>LDA（隐迪利克雷模型）通过对所有文章训练然后将所有文章分为k个主题，每个主题n个关键词（k，n为参数）</p><h3 id="深度学习模型和词嵌入模型"><a href="#深度学习模型和词嵌入模型" class="headerlink" title="深度学习模型和词嵌入模型"></a>深度学习模型和词嵌入模型</h3><p>通过各种玄学的网络结构（如transformer）将文本映射为一系列向量，由于深度网络很大，能更深层的提取语义特征。</p><p>词嵌入模型作用也是和神经网络相同将词映射为向量最常用的就是谷歌提出的word2vec（本质也是个小型神经网路）</p><h2 id="Word2Vec是如何工作的？它和LDA有什么区别与联系？-bigstar-bigstar-bigstar"><a href="#Word2Vec是如何工作的？它和LDA有什么区别与联系？-bigstar-bigstar-bigstar" class="headerlink" title="Word2Vec是如何工作的？它和LDA有什么区别与联系？$\bigstar\bigstar\bigstar$"></a><strong>Word2Vec</strong>是如何工作的？它和<strong>LDA</strong>有什么区别与联系？$\bigstar\bigstar\bigstar$</h2><p>word2vec是将一个词映射为一个向量，属于文本表示模型中的词嵌入模型</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220223215430.png" alt="image-20220223215430575"></p><p>本质是一个神经网络，分为CBOW（根据前后预测中间的概率）和Skip-gram（通过中间预测前后的概率）两种实现方式，如上图</p><p>主题模型是一种基于概率图模型的生成式模型，其似然函数可以写成若干条件概率连乘的形式，其中包括需要推测的隐含变</p><p>量（即主题）；而词嵌入模型一般表达为神经网络的形式，似然函数定义在网络的输出之上，需要通过学习网络的权重以得</p><p>到单词的稠密向量表示。</p><h2 id="在图像分类任务中，训练数据不足会带来什么问题？如何缓解数据量不足带来的问题？-bigstar-bigstar"><a href="#在图像分类任务中，训练数据不足会带来什么问题？如何缓解数据量不足带来的问题？-bigstar-bigstar" class="headerlink" title="在图像分类任务中，训练数据不足会带来什么问题？如何缓解数据量不足带来的问题？$\bigstar\bigstar$"></a>在图像分类任务中，训练数据不足会带来什么问题？如何缓解数据量不足带来的问题？$\bigstar\bigstar$</h2><p>数据不足代表现验信息较少会导致训练集上效果可能还不错，测试集上蒙蔽（鲁棒性不强，过拟合)。</p><ul><li><p>向增加模型泛化能力着手：</p><p>  可以减少非线性层，增加惩罚项，调节dropout超参数等。</p></li><li><p>向增加现验信息着手，在保证特定信息条件下对数据进行扩充（Data Agumentation）：</p><p>  形态变换上可以：旋转，伸缩，裁剪（mask），平移，填充，<del>目标检测还可以重叠mosaic|mix up</del></p><p>  颜色饱和度等方面：噪声扰动，对颜色进行pca聚类得到三个主成分向量再在rgb添加主成分增量（可以参考Alex net）</p><p>  图像空间上可以：在特征空间上进行变换如通用的SMOTE（Synthetic Minority Over-sampling Technique）算法。</p><p>  增加样本上还可以使用Gan。</p></li></ul><h1 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h1><h2 id="准确率的局限性"><a href="#准确率的局限性" class="headerlink" title="准确率的局限性"></a>准确率的局限性</h2><p>精确率准确率召回率f1score就不再说了，值得一提的是可以找更好的评估指标，比如平均绝对百分比误差（Mean Absolute Percent Error，MAPE），它比RMSE的鲁棒性更好。</p><h1 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h1><h2 id="如何定义主成分？从这种定义出发，如何设计目标函数使得降维达到提取主成分的目的？针对这个目标函数，如何对PCA问题进行求解-bigstar-bigstar"><a href="#如何定义主成分？从这种定义出发，如何设计目标函数使得降维达到提取主成分的目的？针对这个目标函数，如何对PCA问题进行求解-bigstar-bigstar" class="headerlink" title="如何定义主成分？从这种定义出发，如何设计目标函数使得降维达到提取主成分的目的？针对这个目标函数，如何对PCA问题进行求解 $\bigstar \bigstar$"></a>如何定义主成分？从这种定义出发，如何设计目标函数使得降维达到提取主成分的目的？针对这个目标函数，如何对<strong>PCA</strong>问题进行求解 $\bigstar \bigstar$</h2><p>主成分从数学上来说是降维后特征向量对应的特征值最大的为候选，但具体为哪些要通过人为设置的阈值来决定。降维的目的是我们想降维后的样本距离间尽可能大，投影尽可能分开并且样本离超平面尽可能近(<strong>回归的角度</strong>)。虽然有两个目标但是最后推导出的目标函数是相同的，下面以样本间距离尽可能大来推导：</p><p>首先我们需要将样本进行中心化，即$\sum_{i=1}^m X_i=0$，这样样本方差可以表示为$W^TXX^TW$，而且$W^TW=I$:</p><script type="math/tex; mode=display">\begin{cases}min_w -tr(W^TXX^TW) \\s.t. W^TW=I\end{cases}</script><h2 id="对于具有类别标签的数据，应当如何设计目标函数使得降维的过程中不损失类别信息？在这种目标下，应当如何进行求解？（手推LDA）-bigstar-bigstar"><a href="#对于具有类别标签的数据，应当如何设计目标函数使得降维的过程中不损失类别信息？在这种目标下，应当如何进行求解？（手推LDA）-bigstar-bigstar" class="headerlink" title="对于具有类别标签的数据，应当如何设计目标函数使得降维的过程中不损失类别信息？在这种目标下，应当如何进行求解？（手推LDA）$\bigstar \bigstar$"></a>对于具有类别标签的数据，应当如何设计目标函数使得降维的过程中不损失类别信息？在这种目标下，应当如何进行求解？（手推LDA）$\bigstar \bigstar$</h2><p>​    又pca我们知道，它不管类别标签，在对于有标签情况下根本无法使用。而我们可以从pca中受到启发，目标为类内距离尽可能小，类间距离尽可能大，下面用两类标签情况来演示（fisher 线性判别分析）<del>多类则叫LDA</del></p><p>​    我们还是需要求解个超平面（二维是直线）W，满足上述条件：</p><p>假设低维类均值为$\bar\mu_i$,方差为$\bar\Sigma_i$，特征值为$y_i$，高维空间均值方差为$\mu_i,\Sigma_i$，特征值为x_i。目标函数为$max J_w=\frac{(\bar\mu_1-\bar\mu_2)^2}{\bar\Sigma_1^2+\bar\Sigma_2^2}$</p><p>投影后的类间距离可以表示为:</p><script type="math/tex; mode=display">\bar\mu_1-\bar\mu_2=\frac{1}{n}\sum_{i=1}^ny_{1i}-\frac{1}{m}\sum_{i=1}^my_{2i}=\frac{1}{n}\sum W^Tx_1-\frac{1}{m}\sum W^Tx_2=W^T(\mu_1-\mu_2)</script><p>我们知道协方差矩阵可以写为:</p><script type="math/tex; mode=display">\bar\Sigma_i^2=\sum_{j=1}^m(y_{2j}-\bar\mu_{1i})^2=W^T\sum(x_{2j}-\mu_1)^T(x_{2j}-\mu_1)W=W^T\Sigma_iW</script><p>故$L(w,\lambda)=W^T(\mu_1-\mu_2)(\mu_1-\mu_2)^TW+\lambda(W^T(\Sigma_1+\Sigma_2) W-c)$</p><p>$\frac{\partial L}{\partial w}=(\mu_1-\mu_2)(\mu_1-\mu_2)^TW+\lambda(\Sigma_1+\Sigma_2) W=0$</p><p>故$W=\frac{1}{\lambda}(\Sigma_1+\Sigma_2)^{-1}(\mu_1-\mu_2)R=(\Sigma_1+\Sigma_2)^{-1}(\mu_1-\mu_2)$</p><h2 id="LDA和PCA作为经典的降维算法，如何从应用的角度分析其原理的异同？从数学推导的角度，两种降维算法在目标函数上有何区别与联系？"><a href="#LDA和PCA作为经典的降维算法，如何从应用的角度分析其原理的异同？从数学推导的角度，两种降维算法在目标函数上有何区别与联系？" class="headerlink" title="LDA和PCA作为经典的降维算法，如何从应用的角度分析其原理的异同？从数学推导的角度，两种降维算法在目标函数上有何区别与联系？"></a><strong>LDA</strong>和<strong>PCA</strong>作为经典的降维算法，如何从应用的角度分析其原理的异同？从数学推导的角度，两种降维算法在目标函数上有何区别与联系？</h2><p>​    从应用角度来说，无监督使用PCA，因为PCA不涉及到类间距离，只人为类内距离越大隐含的信息越多，留下的主成分认为是最佳描述整体的特征（用于除去冗余信息如噪音）。而LDA需要标签来区别类间的距离，留下的主成分认为是每个类别的最佳描述特征。</p><p>​    从上面来看，LDA具有很大的优势，但由于涉及到不同领域（有监督和无监督）所整体来看还是各有千秋。</p><p>从算法流程来看，目标函数在一维下是相同的，且两者最后都是计算特征向量，非常相似，所以算法本质是相同的。</p><h2 id="除了pca传统的的特征降维方法有哪些，特征选择方法有哪些"><a href="#除了pca传统的的特征降维方法有哪些，特征选择方法有哪些" class="headerlink" title="除了pca传统的的特征降维方法有哪些，特征选择方法有哪些"></a>除了pca传统的的特征降维方法有哪些，特征选择方法有哪些</h2><p>LDA(linear discriminat analysis)，MDS(muti dimension scaling)，LLE(local linear embeding)。</p><p>特征选择有过滤式选择，包裹式选择和嵌入式选择。</p><p>过滤式选择是先人为选择好特征子集再训练，模型与特征选择无关。</p><p>包裹式选择是选择与模型匹配的最好特征，即每次随机选择特征给模型进行训练，最后效果肯定比过滤式选择好，但是更耗费时间。</p><p>嵌入式选择是在训练的时候删去某个特征，然后对比效果，简单来说就是增加L1正则化，正则化项中有一项为0就是代表删去了特征。L1正则化比L2正则化稀疏解更多，即w中0更多。由下图可知：</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220306125714.png" alt="image-20220306125714772"></p><p>L1的等值线与误差等值线交点更多在坐标轴上，L2则是在象限中。</p><h2 id="什么是流型学习，ISOmap和LLE的原理"><a href="#什么是流型学习，ISOmap和LLE的原理" class="headerlink" title="什么是流型学习，ISOmap和LLE的原理"></a>什么是流型学习，ISOmap和LLE的原理</h2><p>流型是指局部具有欧式空间同胚的<strong>空间</strong>，流型学习是指低维欧式空间嵌入到高维仍具有欧式空间的特性，通过计算高维空间的距离并利用流型空间的特性可以局部映射到低维空间，然后再把局部映射关系推广到全局。因为具有距离不变性，常常用来数据可视化。比如已知n个城市飞机飞行的距离（高维空间的距离），我们可以用ISOmap将城市映射到二维空间并可视化。</p><p>ISOmap(isometric map)等度量映射：实际上是将MDS在应用方向的另一个名称，算法本质就是MDS。具体步骤：已知高维空间坐标，计算高维空间两两距离，然后使用MDS映射到低维空间得到低维空间的坐标。</p><p>由于ISOmap只能离线处理(每次需要等数据输入完后再计算，且不能用于预测)，实际使用并不是很方便，比较流行的方法：</p><blockquote><p> 通过n个点高维坐标输入，低维坐标作为输出训练一个回归器，当第n+1个点输入时使用回归器预测n+1点低维的坐标。</p></blockquote><p>但是仍不能很好解决问题。</p><p> LLE(Local linear embedding)局部线性嵌入：与保持空间距离不变不同LLE旨在保持空间的线性性：假设高维空间的n节点可以用k近邻个节点线性表示，那么我们希望低维空间的n节点仍然有这个性质(组合系数w不变)。</p><p>即先后优化两个Loss：</p><script type="math/tex; mode=display">L_w=argmin_w \sum_{i=1}^{n} ||x_i-\sum_{j=1}^K w^Tx_j||^2 \\L_y'=argmin_y \sum_{i=1}^n ||y_i-\sum_{j=1}^K w^Ty_j||2</script><p>第一个目标函数求出组合系数w第二个目标函数求出低维坐标y。</p><h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1><h2 id="K均值算法的优缺点是什么？如何对其进行调优？-bigstar-bigstar-bigstar"><a href="#K均值算法的优缺点是什么？如何对其进行调优？-bigstar-bigstar-bigstar" class="headerlink" title="K均值算法的优缺点是什么？如何对其进行调优？$\bigstar \bigstar\bigstar$"></a>K均值算法的优缺点是什么？如何对其进行调优？$\bigstar \bigstar\bigstar$</h2><p>优点：</p><ul><li>算法足够高效，复杂度低。</li><li>局部最优常常也能满足需求。</li></ul><p>缺点：</p><ul><li>离群值处理不太行。</li><li>对于数据分布不均匀处理不当。</li><li><strong>不太适用离散分布</strong>。</li><li>初始点选择很重要。</li><li>K值选择也很重要。</li></ul><p>调优：</p><ul><li>适用中位数代替平均数（k-media）和对数据进行预处理，能很好减少离群点的影响</li><li>多次尝试初始值可以缓解初始值的影响或适用Kmeans++来弥补。</li><li>可以通过手肘法或Gap Statistic方法选择K值。</li><li>通过核函数映射到高维（核kmeans）达到更准确的聚类结果</li></ul><h2 id="高斯混合模型的核心思想是什么？它是如何迭代计算的-bigstar-bigstar"><a href="#高斯混合模型的核心思想是什么？它是如何迭代计算的-bigstar-bigstar" class="headerlink" title="高斯混合模型的核心思想是什么？它是如何迭代计算的$\bigstar\bigstar$"></a>高斯混合模型的核心思想是什么？它是如何迭代计算的$\bigstar\bigstar$</h2><p>高斯混合模型和核心是假设数据是高斯分布生成出来的，但我们不知道均值方差和权重，故先假设已知再通过EM算法求出最合适（似然函数变化稳定）的均值方差和权重。</p><h2 id="以聚类问题为例，假设没有外部标签数据，如何评估两个聚类算法的优劣？-bigstar-bigstar-bigstar"><a href="#以聚类问题为例，假设没有外部标签数据，如何评估两个聚类算法的优劣？-bigstar-bigstar-bigstar" class="headerlink" title="以聚类问题为例，假设没有外部标签数据，如何评估两个聚类算法的优劣？$\bigstar\bigstar\bigstar$"></a>以聚类问题为例，假设没有外部标签数据，如何评估两个聚类算法的优劣？$\bigstar\bigstar\bigstar$</h2><h1 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h1><h2 id="推导SVM"><a href="#推导SVM" class="headerlink" title="推导SVM"></a>推导SVM</h2><p>我们需要一个超平面将两类点分隔开，且不同类别的点到直线距离都尽可能大。$max {min J(w)=\frac{|w^Tx+b|}{||w||}}$</p><p>设标签类别为$y_i$，由于对于正类$y_i&gt;0$且$w^Tx+b&gt;=1$对于负类$y_i&lt;0$, $w^Tx+b&lt;=-1$:故点到直线距离可去掉绝对值统一为$y_i*(w^Tx+b)$。</p><p>对于$|w^Tx+b|=1$这两条线，我们称为支持向量，<strong>如果点线性可分（下面讨论线性可分支持向量机）</strong>，则上述目标函数可转换为两个支持向量距离最长即：</p><script type="math/tex; mode=display">max J_w=\frac{1}{||w||}\frac{(w^Tx+b-1)-(w^Tx+b+1)}{||w||}=\frac{2}{||w||^2}=min J_w=\frac{||w||^2}{2}</script><p>约束条件为：<strong>w,x为列向量</strong></p><script type="math/tex; mode=display">y_i*(w^Tx+b)>=1</script><p>拉格朗日函数：</p><script type="math/tex; mode=display">L(w,b,a)=\frac{||w||^2}{2}-\sum a_i(y_i(w^Tx_i+b)-1) \quad a_i>=0</script><p>此方程组的限制条件（又称KKT条件）为：</p><script type="math/tex; mode=display">\begin{cases}\frac{\partial L}{\partial w,b}=0 \\y_i(w^Tx_i+b)-1>=0 \\a_i>=0 \\a_i*(y_i(w^Tx_i+b)-1)=0\end{cases}</script><p>其中$a_i$为KKT乘数，如何判断KKT乘数的符号也有讲究：对于min问题，乘数项应该异号对于max问题，乘数项应该同号。</p><p>KKT条件实际上并不是条件，而是前提，存在不等式方程组求解时，如果可以求解则必须满足KKT条件，此时通过求解的拉格朗日方程组也叫KKT方程组。<del>自己理解，不一定对</del></p><p>对上式求偏导：</p><script type="math/tex; mode=display">\begin{cases}\frac{\partial L}{\partial w}=w-\sum a_iy_ix_i=0 \\\frac{\partial L}{\partial b}=\sum a_iy_i=0 \\\end{cases}</script><p>带入拉格朗日方程：</p><script type="math/tex; mode=display">\begin{aligned}min L&=\frac{1}{2}\sum_{i=1}^m a_ia_jy_iy_jx_i^Tx_j-\sum_{i=1}^ma_iy_iw^Tx_i-\sum_{i=1}^ma_iy_ib+\sum_{i=1}^m a_i \\&=\frac{1}{2}\sum_{i=1}^m a_ia_jy_iy_jx_i^Tx_j-\sum_{i=1}^ma_iy_i\sum_{j=1}^ma_jy_jx_j^T x_i-\sum_{i=1}^ma_iy_ib+\sum_{i=1}^m a_i \\&=-\frac{1}{2}\sum_{i=1}^ma_ia_jy_iy_jx_i^Tx_j+\sum_{i=1}^ma_i\end{aligned}</script><p>其实这里已经可以求解出具体的w和b了。但是不同方法结果不同，我这里采用SMO方法求解(具体SMO还是得看书，比较麻烦）。</p><blockquote><p>选取$a<em>i,a_j$,其余$a_k$看成常数，$a_iy_i+a_jy_j=\sum</em>{k\neq i,j}^ma_ky_k$</p><p>用$a<em>i$表示$a_j$，对消去$a_j$的L求导可求出$a</em>{i}$。</p><p>关于b，我们可以通过支持向量的约束来求解$y<em>s(\sum</em>{i\in S}a_iy_ix_i^Tx_s+b)=1$</p><p>但每一个支持向量的点都能求出一个b，这里直接暴力去平均即可得到$b=\frac{1}{|S|}\sum<em>{i \in S} (y_s-\sum</em>{i\in S}a_iy_ix_i^Tx_s)$</p></blockquote><h2 id="在空间上线性可分的两类点，分别向SVM分类的超平面上做投影，这些点在超平面上的投影仍然是线性可分的吗？-bigstar-bigstar-bigstar"><a href="#在空间上线性可分的两类点，分别向SVM分类的超平面上做投影，这些点在超平面上的投影仍然是线性可分的吗？-bigstar-bigstar-bigstar" class="headerlink" title="在空间上线性可分的两类点，分别向SVM分类的超平面上做投影，这些点在超平面上的投影仍然是线性可分的吗？ $\bigstar \bigstar\bigstar$"></a>在空间上线性可分的两类点，分别向<strong>SVM</strong>分类的超平面上做投影，这些点在超平面上的投影仍然是线性可分的吗？ $\bigstar \bigstar\bigstar$</h2><p>结论：对于任意线性可分的两组点，它们在SVM分类的超平面上的投影都是线性不可分的。</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220224231854.png" alt="image-20220224231853997"></p><p>该问题可以通过凸优化理论中的超平面分离定理（Separating Hyperplane Theorem，SHT）更加轻巧地解决。该定理描述的是，对于不相交的两个凸集，存在一个超平面，将两个凸集分离。对于二维的情况，两个凸集间距离最短两点连线的中垂线就是一个将它们分离的超平面。</p><p>通过以上定理，我们可以将两组点先各自求凸包，可以发现分割两个凸包的超平面就是SVM所得出的支持向量（二维情况下就是两个凸包距离最小点的中垂线）。</p><p>遂有图3.12三种情况，对于任意一种情况，其投影都<strong>线性不可分</strong>。（在二维情况上就是两个点集投影在支持向量上，然后再用一条线将他们分开，显然不可能）</p><h1 id="Logistic-回归"><a href="#Logistic-回归" class="headerlink" title="Logistic 回归"></a>Logistic 回归</h1><h2 id="逻辑回归相比于线性回归，有何异同？-bigstar-bigstar"><a href="#逻辑回归相比于线性回归，有何异同？-bigstar-bigstar" class="headerlink" title="逻辑回归相比于线性回归，有何异同？$\bigstar \bigstar$"></a>逻辑回归相比于线性回归，有何异同？$\bigstar \bigstar$</h2><p>​    在此之前我们要知道广义的线性回归：满足$y=g(w^Tx+b)$，其中g为可微函数。</p><p>由于人们在考虑回归时也想用回归来进行分类任务，灵机一动想到阶跃函数，但是阶跃函数不可微，遂使用对数几率函数(Logistic Function)$y=\frac{1}{1+e^{-z}}$函数来代替，这个<strong>函数是Sigmod函数的一种</strong><del>只要是S形状的都是sigmod函数</del>。</p><p>​    我们将logistic function代替广义回归式中的g并做变换则有：</p><script type="math/tex; mode=display">ln(\frac{y}{1-y})=w^Tx+b</script><p>若将y视为x为正例的可能性，1-y则是x为反例的可能性，他们比值就是几率反映了相对可能性，这就是对数几率回归(logistic regression)的由来。</p><p>然而逻辑回归的最优化函数与线性回归截然不同：</p><p>通过上述有$p(y=k|x)=e^{w^x+b}$，要求分类错误最小则最大化对数似然函数，估计w和b：</p><script type="math/tex; mode=display">max L(w,b)=max \sum_{i=1}^{n}ln(y_ip(y=1|x)+(1-y_i)p(y=0|x)) \\=max \sum_{i=1}^n ln(e^{w^Tx+b}y_i+(1-y_i)) -ln(1+e^{w^Tx+b})\leftrightarrow min \sum_{i=1}^{n}-y_i*(w^Tx+b)+ln(1+e^{w^T+b})</script><p>则也是<strong>最小化$-L(w,b)$即等价于最小化CrossEntryloss</strong></p><p>总结以下，逻辑回归与线性回归相比：</p><ul><li>一个用于分类，一个用于回归，使用方向完全不同。</li><li>线性回归是求解均方差最小，而logistic regression是求解最大似然函数。</li><li>但他们求解方法都可以使用梯度下降法求解。</li></ul><h2 id="逻辑回归为什么不使用MSE作为loss"><a href="#逻辑回归为什么不使用MSE作为loss" class="headerlink" title="逻辑回归为什么不使用MSE作为loss"></a>逻辑回归为什么不使用MSE作为loss</h2><p>假设这是一个二分类，预测类别为0，实际类别为1。显然这个分类器完全错误，但是MSE loss仅仅为1！！！。对比交叉熵：</p><script type="math/tex; mode=display">Entry loss=-1*log(0)\rightarrow\infin</script><p>其次，MSE会出现梯度消失现：</p><script type="math/tex; mode=display">L_w=\sum (y_i-h(s_i))^2 \quad s=w^Tx+b \quad h=\frac{1}{1+e^{-s}} \\L_w'=-2\sum_{i=1}^m (y_i-h(s_i))h(s_i)(1-h(s_i))*x_i</script><p>当$h(s_i)$为1或0时$L_w’\rightarrow0$，出现梯度消失。</p><p>更重要的是，它不是一个非凸函数，要知道梯度下降需要如果优化非凸函数并不能找到全局最优<del>虽然一般也找不到</del>：</p><script type="math/tex; mode=display">\begin{aligned}L_w''&=-2\sum_{i=1}^m [-h(s_i)+h^2(s_i)+(y-h(s_i)(1-2h(s_i))] (h(s_i)-h^2(s_i))x_i\\    &=-2\sum_{i=1}^m[y-2yh(s_i)-2h(s_i)+3h^2(s_i)](h-h^2(s_i))x_i^2\end{aligned}</script><p>当$h(s_i)\in (0,1)，y=0$时，$L’’$由$3h(s_i)^2-2h(s_i)$决定，这个在$h\in (0,1)$有正有负，所以$L_w$非凸。</p><h2 id="当使用逻辑回归处理多标签的分类问题时，有哪些常见做法，分别应用于哪些场景，它们之间又有怎样的关系？-bigstar-bigstar-bigstar"><a href="#当使用逻辑回归处理多标签的分类问题时，有哪些常见做法，分别应用于哪些场景，它们之间又有怎样的关系？-bigstar-bigstar-bigstar" class="headerlink" title="当使用逻辑回归处理多标签的分类问题时，有哪些常见做法，分别应用于哪些场景，它们之间又有怎样的关系？$\bigstar \bigstar \bigstar$"></a>当使用逻辑回归处理多标签的分类问题时，有哪些常见做法，分别应用于哪些场景，它们之间又有怎样的关系？$\bigstar \bigstar \bigstar$</h2><p>对于每类只有一个标签的多分类，我们假设每类都符合几何分布：</p><script type="math/tex; mode=display">h_{\theta}(x)=\left[ \begin{matrix}p(y=1|x;\theta)\\\vdots  \\p(y=n|x;\theta) \\\end{matrix}\right] =\frac{1}{\sum_{j=1}^{k}e^{\theta_j^Tx}}\left[ \begin{matrix}e^{\theta_1^Tx} \\\vdots \\e^{\theta_n^Tx} \\\end{matrix}\right]</script><p>一般来说，多项逻辑回归具有参数冗余的特点，即将同时加减一个向量后预测结果不变。特别地，当类别数为2时。</p><script type="math/tex; mode=display">h_{\theta}(x)=\frac{1}{e^{\theta_1^Tx}+e^{\theta_2^Tx}}\left[ \begin{matrix}e^{\theta_1^Tx} \\e^{\theta_2^Tx} \\\end{matrix}\right]</script><p>令所有参数减去$\theta_1$，则有</p><script type="math/tex; mode=display">h_{\theta}(x)=\frac{1}{1+e^{(\theta_2-\theta_1)^Tx}}\left[ \begin{matrix}1 \\e^{(\theta_2-\theta_1)^Tx} \\\end{matrix}\right]</script><p>整理后发现与逻辑回归相同。因此，多标签分类逻辑回归实际上是二分类的一种拓展。而多元逻辑回归式子又叫softmax函数。</p><h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><h2 id="决策树有哪些常用的启发函数？-bigstar-bigstar"><a href="#决策树有哪些常用的启发函数？-bigstar-bigstar" class="headerlink" title="决策树有哪些常用的启发函数？$\bigstar \bigstar$"></a>决策树有哪些常用的启发函数？$\bigstar \bigstar$</h2><ul><li><p>IDF3(Iterater dichotomister 3) 最大信息增益：</p><blockquote><p>数据集D的经验熵：$H(D)=-\sum_{i=1}^SP(w_i|t)*log_2P(w_i|t)$</p><p>对于特征A经验条件熵$H(D|A)=\sum_i^n \frac{|D_i|}{|D|}H(D_i)$</p><p>判定停止条件为：$max {g(D)}=H(D)-H(D|A)$</p></blockquote></li><li><p>C4.5 最大信息增益比：</p><blockquote><p>判断停止条件为$g_r(D)=\frac{g(D)}{H_A(D)}$</p><p>其中取值熵：$H<em>A(D)=\sum</em>{i=1}^{n}\frac{|D_i|}{|D|}log_2\frac{|D_i|}{|D|}$</p></blockquote></li><li><p>CART(Classification And Regression Tree) 最大基尼系数：</p><blockquote><p>$G(D)=\sum<em>{i=1}^{n}p(x_i)(1-p</em>{x<em>i})=1-\sum</em>{i=1}^{n}p(x<em>i)^2=1-\sum</em>{i=1}^n(\frac{|C_k|}{|D|})^2$ k为所有特征种类如年龄性别等</p><p>代表从数据集D中随机抽取两个样本，其类别标记不一致的概率。因此G(D)越小，则数据集D的纯度越高。</p><p>特征A的基尼系数$G(D|A)=\sum_{i=1}^n\frac{|D_i|}{|D|}G(D_i)$，n为特征A的种类如年龄中的老少等。</p><p>划分点就是最小特征基尼系数。</p></blockquote></li></ul><p>首先，ID3是采用信息增益作为评价标准，会倾向于取值较多的特征。因为，信息增益反映的是给定条件以后不确定性减少的程度，特征取值越多就意味着确定性更高，也就是条件熵越小，信息增益越大。这导致泛化能力很弱。因此，C4.5实际上是对ID3进行优化，通过引入信息增益比，一定程度上对取值比较多的特征进行惩罚，避免ID3出现过拟合的特性，提升决策树的泛化能力。</p><p>其次，<strong>从样本类型的角度</strong>，ID3只能处理离散型变量（对于长度这种就不能了），而C4.5和CART都可以处理连续型变量。C4.5处理连续型变量时，通过对数据排序之后找到数值不同的点，根据切分点把连续属性转换为布尔型，从而将连续型变量转换多个取值区间的离散型变量。而对于CART，由于其构建时每次都会对特征进行二值划分，因此可以很好地适用于连续性变量。 </p><p>从<strong>应用角度</strong>，ID3和C4.5只能用于分类任务，而CART可以用于回归任务（回归树使用最小平方误差准则）。</p><p>此外，从<strong>实现细节、优化过程</strong>等角度：ID3对样本特征缺失值比较敏感，而C4.5和CART可以对缺失值进行不同方式的处理；ID3和C4.5可以在每个结点上产生出多叉分支，且每个特征在层级之间不会复用，而CART每个结点只会产生两个分支，因此最后会形成一颗二叉树，且每个特征可以被重复使用；ID3和C4.5通过剪枝来权衡树的准确性与泛化能力，而CART直接利用全部数据发现所有可能的树结构进行对比。</p><h2 id="如何对决策树进行剪枝？-bigstar-bigstar-bigstar"><a href="#如何对决策树进行剪枝？-bigstar-bigstar-bigstar" class="headerlink" title="如何对决策树进行剪枝？ $\bigstar \bigstar \bigstar$"></a>如何对决策树进行剪枝？ $\bigstar \bigstar \bigstar$</h2><p>预剪枝(pre-pruning)：</p><ul><li>做数据集划分，每次生成分支的时候通过验证集算损失，损失最小时则停止。</li><li>设置固定深度，到达深度时停止增长。</li><li>设置熵变化量阈值，熵变化量小于阈值时停止</li><li>信息增益显著性分析，如果当前增益不显著则停止划分。通常使用卡方检验。</li></ul><p>后剪枝(post-pruning):</p><ul><li><p>基于最小分类错误(Reduced Error Pruning，REP)：如果去掉该枝干错误率减小则剪枝。</p></li><li><p>最小长度准则：对决策树编码，剪枝得到编码最短的决策树（不是很明白）</p></li><li><p>基于代价和复杂性综合考虑(Cost Complexity Pruning，CCP)：如果去掉该枝干，综合错误率和复杂性综合考虑是否剪枝。</p><blockquote><p>设在t处剪枝的误差为：$\alpha=\frac{R(t)-R(T<em>t)}{|L</em>(t)|-1}$</p><p>L(t)代表以t节点为根的叶子数总数,R(t)代表t</p></blockquote></li></ul><h1 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h1><h2 id="监督学习的损失函数-bigstar"><a href="#监督学习的损失函数-bigstar" class="headerlink" title="监督学习的损失函数 $\bigstar$"></a>监督学习的损失函数 $\bigstar$</h2><p>最基础的肯定是0-1 loss，预测正确为0，错误为1，但是它不平滑不可导，就有了hinge loss替代它：</p><script type="math/tex; mode=display">hingeloss= max(0,1-f*y)</script><p>同样，预测正确时损失为0，预测错误是hinge loss 是0-1 loss的凸上界。但是显然，某一点仍然不可导不能用梯度下降法进行优化。</p><p>0-1 loss 另一个替代就是logsitic loss：</p><script type="math/tex; mode=display">logistic loss=log_2(1+e^{-fy})</script><p>它处处可导，但是在预测正确时仍有损失，还有一种就是交叉熵损失：</p><script type="math/tex; mode=display">Entry loss= -log_2(\frac{1+fy}{2})</script><p>四种函数图像如下所示</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220306002750.png" alt="image-20220306002750188"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最巧妙的算法之一--快速傅里叶变换</title>
      <link href="/p/33310.html"/>
      <url>/p/33310.html</url>
      
        <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>​    数字信号处理FFT讲的和什么一样，<del>完全听不懂</del>还好这个<a href="https://www.bilibili.com/video/BV1za411F76U?from=search&amp;seid=13419393491585280858&amp;spm_id_from=333.337.0.0">有翻译的3Blue1Brown讲解FFT</a>，不然就gg了，由于视频讲的太妙了，让我不总结一下不行。</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>​    如果让你求两个多项式相乘后的多项式即求$C(x):C(x)=A(x)*B(x)$，你会想到什么方法？On的暴力？没错，但是我们能否改进呢：</p><p>引理1：</p><ul><li>最少已知一个多项式的m+1个点，则可以唯一确定这个多项式（m为多项式的阶数，下面假设$n=2^{\lceil{log(m+1)}\rceil}$​​​​）</li></ul><p>由于多项式可写成矩阵相乘的形式，则可通过范德蒙行列式和克莱默法得到上述结论。</p><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>现在问题则变成了：</p><blockquote><p>​    已知两个n阶多项式的n+1个点，求这两个多项式的乘积后的多项式</p></blockquote><p>现在暴力则变成了O(n)，对吗？但是还有些问题，比如如何找这n+1个点及已知n+1个点如何转换为多项式。后者我们先按下不表，先解决找点的问题。</p><p>如果随便找n+1个点，每个点x计算y(x)也是O(n)总复杂度还是O(n^2)没有变，我们需要更高效的找点算法：</p><blockquote><p> 假设函数$y=x^2+1$，如果让你找8个点是不是会倾向于找对称点呢？比如寻找$[(1,2),(2,5),…(4,17)]$这样你就知道了$[(-1,2),..(-4,17)]$寻找8个点就变成了找4个点的问题，规模小了一半！类比于奇函数也有这种性质。</p></blockquote><p>我们知道任何函数都可以表示偶函数和奇函数的和，多项式也不例外。</p><p>假设有多项式:</p><script type="math/tex; mode=display">P(x)=1+2x^2+3x^3+4x^4+5x^5+6x^6</script><p>可以变形为：</p><script type="math/tex; mode=display">P(x)=(1+2x^2+4x^4+6x^6)+x(3x^2+5x^4)=P_e(t)+xP_o(t)</script><p>为方便理解，我变量替换了一下，t=x^2，可以看出这里$P_e$和$P_t$​​都是偶函数，由于：</p><script type="math/tex; mode=display">P(x)=P_e(t)+xP_o(t)\\P(-x)=P_e(t)-xP_o(t)</script><p>故满足上述条件，此变换可以将寻找的点数减半。我们只需求出$P_e(t)$和$P_o(t)$两个多项式即可。</p><p>看到这里，显然可以发现这是一个递归过程，因为$P_e(t)$和$P_o(t)$明显可以在像$P(x)$一样拆分。</p><script type="math/tex; mode=display">P_e(t)=1+2t+4t^2+6t^3=P_e^{\prime}(t^\prime)+tP_o^{\prime}(t^\prime)</script><p>但是遗憾的是$t^\prime$​​ 在实数域取负值，也就是说无法利用O(1)对称，似乎陷入了瓶颈？接着往下看，这就是FFT的由来。</p><h2 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h2><p>​    我们现在需要的是寻找一个$x_1、x_2$有$x_1^2=-x_2^2$，显然实数域不存在，故拓展到负数域，由于可以随便取初始点，方便起见令$t^n=1$，由欧拉公式可知，这样寻找的n个点则是在负数域单位圆周上等间隔分布即第k个点$w_k=e^{\frac{2\pi}{n}*k}$​​，这样无论递归到何时，t都存在对称点的情况，同时推导P(x)的公式也需要跟着改变：</p><p>由于</p><script type="math/tex; mode=display">P(x):[x_0,x_1,...,x_{n-1}]\leftrightarrow [w^0,w^1,...,w^{n-1}] \\P_e(x):[x_0,x_2,...,x_{n-2}]\leftrightarrow[w^0,w^2,w^4,...,w^{n-2}]\\P_o(x):[x_1,x_3,...,x_{n-1}]\leftrightarrow[w^1,w^3,w^5,...,w^{n-1}]\\</script><p>根据第i个点$w^i$求函数值如下：</p><script type="math/tex; mode=display">P(w^i)=P_e(w^{2i})+w^iP_o(w^{2i}) \\P(-w^i)=P(w^{i+n/2})=P_e(w^{2i})-w^iP_o(w^{2i}) \quad i \in [0,n/2-1]\\</script><h3 id="FFT代码"><a href="#FFT代码" class="headerlink" title="FFT代码"></a>FFT代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">void FFT(vector&lt;complexx&gt; &amp;A, <span class="built_in">int</span> tempn,<span class="built_in">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    // flag作用后面会解释</span><br><span class="line">    <span class="keyword">if</span> (tempn == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">int</span> M = tempn/<span class="number">2</span>;</span><br><span class="line">    vector&lt;complexx&gt; A0, A1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= tempn; i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        A0.push_back(A[i]);</span><br><span class="line">        A1.push_back(A[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    FFT(A0, M,flag);</span><br><span class="line">    FFT(A1, M,flag);</span><br><span class="line">    auto W = complexx(cos(<span class="number">1.0</span> * Pi / M),flag*sin(<span class="number">1.0</span> * Pi / M));</span><br><span class="line">    auto w = complexx(<span class="number">1.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] = A0[i] + w * A1[i];</span><br><span class="line">        A[i + M] = A0[i] - w * A1[i];</span><br><span class="line">        w= w*W;</span><br><span class="line">    &#125;</span><br><span class="line">    A0.clear();</span><br><span class="line">    A1.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IFFT"><a href="#IFFT" class="headerlink" title="IFFT"></a>IFFT</h2><p>现在还剩最后一个问题，如何将已知的函数值转换回对应的多项式系数呢？</p><p>已知多项式可以被以下矩阵乘法表示</p><script type="math/tex; mode=display">\left[\begin{matrix}p(w^0) \\p(w^1) \\p(w^2) \\\vdots \\p(w^{n-1}) \\\end{matrix} \right]=\left[\begin{matrix}1 & 1 & 1 & 1 & 1 \\1 & w& w^2 & w^3 &w^{n-1} \\1 & w^2& w^4 & \dots &w^{2(n-1)} \\\vdots & \vdots & \vdots &\ddots &\vdots \\1 & w^{n-1} & w^{2(n-1)} & \dots &w^{(n-1)(n-1)}\\\end{matrix} \right] \left[\begin{matrix}p_0 \\p_1 \\p_2 \\\vdots \\p_{n-1} \\\end{matrix}\right]</script><p>则取逆变换有：</p><script type="math/tex; mode=display">\left[\begin{matrix}p_0 \\p_1 \\p_2 \\\vdots \\p_{n-1} \\\end{matrix} \right]=\left[\begin{matrix}1 & 1 & 1 & 1 & 1 \\1 & w& w^2 & w^3 &w^{n-1} \\1 & w^2& w^4 & \dots &w^{2(n-1)} \\\vdots &\vdots & \vdots & \ddots & \vdots \\1 & w^{n-1} & w^{2(n-1)} & \dots &w^{(n-1)(n-1)}\\\end{matrix} \right] ^{-1}\left[\begin{matrix}p(w^0) \\p(w^1) \\p(w^2) \\\vdots \\p(w^{n-1}) \\\end{matrix}\right]</script><p>由范德蒙行列式的特性求逆可转换为以下形式：</p><script type="math/tex; mode=display">\left[\begin{matrix}p_0 \\p_1 \\p_2 \\\vdots \\p_{n-1} \\\end{matrix} \right]=\frac{1}{n}\left[\begin{matrix}1 & 1 & 1 & 1 & 1 \\1 & w^{-1} & w^{-2} & w^{-3} &w^{-(n-1)} \\1 & w^{-2}& w^{-4} & \dots & w^{-2(n-1)} \\\vdots & \vdots & \vdots & \ddots & \vdots \\1 & w^{-(n-1)} & w^{-2(n-1)} & \dots &w^{-(n-1)(n-1)}\\\end{matrix} \right] \left[\begin{matrix}p(w^0) \\p(w^1) \\p(w^2) \\\vdots \\p(w^{n-1}) \\\end{matrix}\right]</script><p>可见IFFT与FFT变动并不大，代码甚至只需要修改W的正负（flag的作用），然后最后除n即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计技巧与分析笔记</title>
      <link href="/p/26814.html"/>
      <url>/p/26814.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本来是觉得可以不用复习的<del>angry bird还没写完呢</del>，但是老师说全是大题还是有点慌 <del>毕竟我不记得英文名啊，只写过代码</del></p><p>小小的按目录考点顺序总结一下。书在<a href="https://www.weifengz.com/pan/67b89ea653516eae50e673ed9e5f13ac">这里下载</a></p><p>​    代码都是伪代码<del>大概</del>，还有些自己yy的抓题。</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>这一部分单独提前提出来复习一下，不然后面算法要分析复杂度又提一遍。</p><ul><li>O：最坏复杂度</li><li>$\Omega$：理想情况下最好的时间复杂度​</li><li>$\Theta$：平均复杂度</li></ul><p>​    通常解题说的O是渐进时间复杂度，因为我们只关心最坏的时间复杂度能不能过这一题，而不是$ \Omega $，且因为最好情况没有实际意义。而$\Theta$、可能是因为打出来太麻烦导致人们不是很常用（其实我们平常口胡的复杂度含义更多是$\Theta$​），而且人们更喜欢一个确定的值故O更为常用 <del>个人理解</del>。</p><p>使用什么算法大概可以用以下依据判断:</p><blockquote><p>每个阶段只有一个状态-&gt;递推；<br>每个阶段的最优状态都是由上一个阶段的最优状态得到的-&gt;贪心；<br>每个阶段的最优状态是由之前所有阶段的状态的组合得到的-&gt;搜索；<br>每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到而不管之前这个状态是如何得到的-&gt;动态规划。</p></blockquote><h3 id="重要推论"><a href="#重要推论" class="headerlink" title="重要推论"></a>重要推论</h3><p>在推导复杂度或比较次数的时候会遇到很多形如下面的式子：</p><script type="math/tex; mode=display">f(n)\begin{cases}d & \quad n=1\\af(n/c)+bn &\quad n\geq2\end{cases}</script><p>上述递推式的解为</p><script type="math/tex; mode=display">f(n)=\begin{cases}bnlog_cn+dn & \quad a=c \\(d+\frac{bc}{a-c})n^{log_c a}-\frac{bc}{a-c}n &\quad a\neq c\end{cases}</script><p>通常情况下c=a=2，所以通常复杂度是$bnlog_2n+dn$​</p><p>更通常情况：</p><script type="math/tex; mode=display">f(n)\begin{cases}d & \quad n=1\\af(n/c)+bn^x &\quad n\geq2\end{cases}</script><p>的解是：</p><script type="math/tex; mode=display">f(n)=\begin{cases}\Theta(n^x) \\\Theta(n^xlog~n) \\\Theta(n^{log_ca}) \\\end{cases}=\begin{cases}bn^x                & \quad a<c^x\\O(n^{log_ca})logn  &\quad a=c^x \\O(n^{log_ca})        &\quad a>c^x \\\end{cases}</script><p><del>O还是$\Theta$我也有点不确定</del></p><p>上面通解看似难实际上 就是比较递归部分和非递归部分的复杂度递归部分$O(n^{log_ca})$，非递归部分$bn^x$，</p><h2 id="二分搜索-binary-find"><a href="#二分搜索-binary-find" class="headerlink" title="二分搜索(binary find)"></a>二分搜索(binary find)</h2><p>没啥，最大比较次数$\lfloor{log n}\rfloor+1$​​​，因为一颗二叉树最大高度是$\lfloor log n\rfloor$​​</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a递增</span></span><br><span class="line">l=<span class="number">1</span>,r=n;</span><br><span class="line"><span class="keyword">while</span> l&lt;=r</span><br><span class="line">    mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> a[mid]==x</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> a[mid]&lt;x</span><br><span class="line">    l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        r=mid<span class="number">-1</span>;</span><br></pre></td></tr></table></figure><h3 id="容易被误导的例子"><a href="#容易被误导的例子" class="headerlink" title="容易被误导的例子"></a>容易被误导的例子</h3><p>同时寻找数组中最大和最小的数。很容易被误导为二分，但是仔细一下发现必须遍历一遍所以复杂度不可能是O(log)而应是O(n)的</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span>(l,r)</span><br><span class="line">    <span class="keyword">if</span> r-l==<span class="number">1</span> <span class="comment">// 用if可以实现只比较1次</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(a[l],a[r]),<span class="built_in">max</span>(a[l],a[r])</span><br><span class="line">    mid=(l+r)/<span class="number">2</span></span><br><span class="line">    x1,y1=<span class="built_in">find</span>(l,mid)</span><br><span class="line">    x2,y2=<span class="built_in">find</span>(mid+<span class="number">1</span>,r)</span><br><span class="line">    x=<span class="built_in">min</span>(x1,x2)</span><br><span class="line">    y=<span class="built_in">max</span>(y1,y2)</span><br><span class="line">    <span class="keyword">return</span> x,y</span><br></pre></td></tr></table></figure><p>递推式是：</p><script type="math/tex; mode=display">f(n)=\begin{cases}1 &\quad n=2 \\2*f(n/2)+2 & \quad n>2 \\\end{cases}</script><p>算出比较次数为n/2+n-2 </p><h2 id="合并有序的两个列表-merge"><a href="#合并有序的两个列表-merge" class="headerlink" title="合并有序的两个列表(merge)"></a>合并有序的两个列表(merge)</h2><p>太简单，单独出大题不太可能。比较次数在$min(n_1，n_2) 到 n_1+n_2-1$​​​​​之间</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a[p,q] a[q+1,r]有序,从小到大合并</span></span><br><span class="line">x=p,y=q+<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x&lt;=q &amp;&amp; y&lt;=r</span><br><span class="line"><span class="keyword">if</span> a[x]&lt;a[y]</span><br><span class="line">b[k]=a[x];</span><br><span class="line">x++</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">b[k]=a[y];</span><br><span class="line">y++;</span><br><span class="line">k++;</span><br><span class="line"><span class="keyword">if</span> x==q+<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i=y;i&lt;=r;i++,k++</span><br><span class="line">b[k]=a[i]</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> i=x;i&lt;=q;i++,k++</span><br><span class="line">b[k]=a[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="选择排序-selection-sort"><a href="#选择排序-selection-sort" class="headerlink" title="选择排序(selection sort)"></a>选择排序(selection sort)</h2><p>依次选出第k小，$O(n^2)$</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>;i&lt;=n;i++;</span><br><span class="line">temp=i;</span><br><span class="line"><span class="keyword">for</span> j=i+<span class="number">1</span>;j&lt;n;j++;</span><br><span class="line"><span class="keyword">if</span> a[j]&lt;a[temp]</span><br><span class="line">temp=j</span><br><span class="line"><span class="built_in">swap</span>(a[i],a[temp])</span><br></pre></td></tr></table></figure><p>算法比较次数为$\sum_1^{n-1}n-i=\frac{n(n-1)}{2}$，因为每次循环都会赋值三次，故赋值次数为0~3(n-1)​</p><h2 id="插入排序-insertion-sort"><a href="#插入排序-insertion-sort" class="headerlink" title="插入排序(insertion sort)"></a>插入排序(insertion sort)</h2><p>从已经排好序的序列中寻找小于当前值的进行插入</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">2</span>;i&lt;=n;i++</span><br><span class="line">x=a[i]</span><br><span class="line">j=i<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> j&gt;<span class="number">0</span> &amp;&amp; a[j]&gt;x;</span><br><span class="line">a[j+<span class="number">1</span>]=a[j]</span><br><span class="line">         j--;</span><br><span class="line">a[j+<span class="number">1</span>]=x;</span><br></pre></td></tr></table></figure><p>最大比较次数：$\sum_{i=2}^n i-1=\frac{n(n-1)}{2}$，最小比较次数：n-1，元素赋值次数：比较次数+n-1​​</p><h2 id="自底向上的排序-bottom-up"><a href="#自底向上的排序-bottom-up" class="headerlink" title="自底向上的排序(bottom up)"></a>自底向上的排序(bottom up)</h2><p>其实就是一个递归，只有两个元素的时候回溯(见下面的merge sort)，合并就是上面的merge</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">t=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> t&lt;n</span><br><span class="line">s=t,t=<span class="number">2</span>*s,i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> i+t&lt;=n</span><br><span class="line">        <span class="comment">// 分别对应p,q,r </span></span><br><span class="line">        <span class="comment">// 每次合并[p,q],[q+1,r]</span></span><br><span class="line">    <span class="built_in">merge</span>(i+<span class="number">1</span>,i+s,i+t);</span><br><span class="line">    i+=t</span><br><span class="line">    <span class="keyword">if</span> i+s&lt;n</span><br><span class="line">        <span class="built_in">merge</span>(i+<span class="number">1</span>,i+s,n);</span><br></pre></td></tr></table></figure><p>有观察结论：每次比较次数在$\frac{n}{2^j}<em>2^{j-1}$​​​~$\frac{n}{2^j}</em>(2^j-1)$​​​，级数求和可知最少比较次数为$\frac{nlog_2n}{2}$​​​最大比较次数为$nlog n-n+1$​​​。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>外层循环为$\lfloor log (n-1)\rfloor+1$​​​，现先假设n为二的幂，这样if语句不会被执行，外层循环log n次，里层的while执行为n/t次(注意t=2*s把t重新赋值了涉及到循环次数问题)，每次复杂度为O(merge):</p><p>当merge总是最小比较次数时：</p><script type="math/tex; mode=display">f(t)=\frac{n}{t}*min(s,t-s-1+1)=n/t*s \\</script><script type="math/tex; mode=display">\begin{aligned}f(n)&=\sum_{t=1}^{n-1} f(t)\\~~~~&=\sum_{i=1}^{k} \frac{n}{2^i}*\frac{2^{i}}{2} \\~~~~&= \frac{n}{2}logn\end{aligned}</script><p>当merge部分总是最大比较次数时：</p><script type="math/tex; mode=display">f(t)=\frac{n}{t}*(s+t-s-1+1-1)=n/t*(t-1) \\</script><script type="math/tex; mode=display">\begin{aligned}f(n)&=\sum_{t=1}^{n-1} f(t) \\&=\sum_{i=1}^{k} \frac{n}{2^i}*(2^{i}-1) \\&= nlogn-n\sum_{i=1}^k 2^{-i}    \\&= nlogn-n(1-\frac{1}{n}) \\&= nlogn-n+1 \\\end{aligned}</script><h2 id="基数排序-radix-sort"><a href="#基数排序-radix-sort" class="headerlink" title="基数排序(radix sort)"></a>基数排序(radix sort)</h2><p>这个伪代码比较好写</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">L=&#123;a0,a1,...an&#125; </span><br><span class="line"><span class="keyword">for</span> i in <span class="number">1</span>~k</span><br><span class="line">L0~L9=empty</span><br><span class="line"><span class="keyword">while</span> L!=empty:</span><br><span class="line">a=L.font;</span><br><span class="line">L.pop;</span><br><span class="line"><span class="keyword">if</span> j=a的第i位数字</span><br><span class="line">Lj.push a</span><br><span class="line">L=L0</span><br><span class="line"><span class="keyword">for</span> i in <span class="number">1</span>~<span class="number">9</span></span><br><span class="line">L.push Li</span><br><span class="line">print L</span><br></pre></td></tr></table></figure><h2 id="生成排列"><a href="#生成排列" class="headerlink" title="生成排列"></a>生成排列</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p><del>似乎和书上的有些不同</del></p><p>如果有1~n-1的排列，则将n插入到每个排列的每个位置则可以得到1~n的排列。故从1开始到n+1结束（边界记得模拟一下）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>;i&lt;=n;i++</span><br><span class="line">p[i]=i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">perm</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">perm m:</span><br><span class="line"><span class="keyword">if</span> m==n print p[<span class="number">1</span>~n]</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">swap</span>(p[m],p[i]);</span><br><span class="line"><span class="built_in">perm</span>(m+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">swap</span>(p[m],p[i]);</span><br></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>​    排列就是n个数的自由组合，每一次选择一个数到下一个状态，知道每个数都选择完毕即可。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">use[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">perm</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">perm m:</span><br><span class="line"><span class="keyword">if</span> m==n+<span class="number">1</span> print use[<span class="number">1</span>~n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span> use[i]==<span class="number">1</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">         use[i]=m;</span><br><span class="line"><span class="built_in">perm</span>(m+<span class="number">1</span>);</span><br><span class="line">use[i]=<span class="number">0</span></span><br></pre></td></tr></table></figure><p>复杂度是n*n!</p><h3 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h3><h4 id="自己的yy"><a href="#自己的yy" class="headerlink" title="自己的yy"></a>自己的yy</h4><p>每太看懂书上递推的写法，自己yy的感觉没问题</p><script type="math/tex; mode=display">f(m)=\begin{cases}n & m=n+1\\(n-m+1)f(m+1) & 1<=m<=n\end{cases}</script><p>递推:</p><script type="math/tex; mode=display">f(1)=n*f(2)=n*(n-1)*f(3)=\dots=n!*f(n+1)=n*n!</script><h4 id="书上的答案"><a href="#书上的答案" class="headerlink" title="书上的答案"></a>书上的答案</h4><script type="math/tex; mode=display">f(m)=\begin{cases}0 & m=0\\mf(m-1)+n & m>=1 \\end{cases}</script><p>令 $m!h(m)=f(m)[h(0)=0]$则有：</p><script type="math/tex; mode=display">\begin{aligned}h(m)&=h(m-1)+\frac{n}{m!}\\h(m)&=h(0)+\sum_{j=1}^m\frac{n}{j!}=n\sum_{j=1}^m \frac{1}{j!} \\f(m)&=n*m!*\sum_{j=1}^m\frac{1}{j!}<2nm! \\\end{aligned}</script><p>将n带入m则有$f(n)&lt;2n*n!$</p><h2 id="寻找多数元素"><a href="#寻找多数元素" class="headerlink" title="寻找多数元素"></a>寻找多数元素</h2><p>注意这里的多数元素是大于n/2的元素，并不是众数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;)</span><br><span class="line">c=a[i];</span><br><span class="line">count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n,count&gt;<span class="number">0</span>;j++)</span><br><span class="line"><span class="keyword">if</span> c==a[j]</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">count--;</span><br><span class="line">i=j+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">check</span>(c) <span class="comment">// 判断c是否真的大于n/2 因为可能存在 4 4 4 3 2 1 5这种序列</span></span><br><span class="line">print c</span><br></pre></td></tr></table></figure><h2 id="合并排序-merge-sort"><a href="#合并排序-merge-sort" class="headerlink" title="合并排序(merge sort)"></a>合并排序(merge sort)</h2><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><p>当n为2的幂时，比较次数与bottomup相同，实际上无论从应用层面分析都说bottomup牛逼，只是merge sort代码更好看更好调试罢了。人们更容易看懂递归而不是迭代</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">mergesort l,r</span><br><span class="line"><span class="keyword">if</span> l&lt;r</span><br><span class="line">        <span class="keyword">int</span> mid =(l+r)/<span class="number">2</span></span><br><span class="line">        <span class="built_in">mergesort</span>(l,mid);   <span class="comment">// f(n/2)</span></span><br><span class="line">        <span class="built_in">mergesort</span>(mid+<span class="number">1</span>,r); <span class="comment">// f(n/2)</span></span><br><span class="line">        <span class="built_in">merge</span>(l,mid,r); <span class="comment">// n/2~n-1</span></span><br></pre></td></tr></table></figure><h3 id="复杂度计算"><a href="#复杂度计算" class="headerlink" title="复杂度计算"></a>复杂度计算</h3><script type="math/tex; mode=display">f_{min}(n)=\begin{cases}0    \quad & n=1 \\2*f_{min}(n/2)+n/2 & n>=2\\\end{cases}\\f_{max}(n)=\begin{cases}0    \quad & n=1 \\2*f_{max}(n/2)+n-1 & n>=2\\\end{cases}</script><p>最后计算得比较次数为$nlogn/2$~$nlogn-n+1$之间，时间复杂度为$\Theta (nlogn)$，空间复杂度为$\Theta(n)$​</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>个人觉得未增强的快排和merge sort差不多，就是合并的算法不一样罢了。</p><h3 id="split-算法"><a href="#split-算法" class="headerlink" title="split 算法"></a>split 算法</h3><p>选择一个初始区间，在for之后在区间内得到一个位置i，位置小于i的全部不大于a[l]，位置大于i的全部不小于a[l]。</p><p>并不保证前半部分和后半部分有序！！</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">split</span>(l,r): <span class="comment">//</span></span><br><span class="line">x=a[l]</span><br><span class="line">pos=l</span><br><span class="line"><span class="keyword">for</span> (i=l+<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">if</span> a[i]&lt;=x</span><br><span class="line">pos++</span><br><span class="line">             <span class="keyword">if</span> i!=pos</span><br><span class="line">             <span class="built_in">swap</span>(a[i],a[pos])</span><br><span class="line">    <span class="built_in">swap</span>(a[l],a[pos])</span><br><span class="line">    <span class="keyword">return</span> a,pos</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次固定比较n-1次但可能不交换，故复杂度为O(n)</p><h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><p>因为根据split算法，已经将序列分为两个有序的部分，现在只需要执行分治的基本思想即可：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(a,l,r)</span><br><span class="line">w=<span class="built_in">split</span>(l,r)</span><br><span class="line"><span class="built_in">sort</span>(a,l,w<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">sort</span>(a,w+<span class="number">1</span>,n)</span><br></pre></td></tr></table></figure><h3 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h3><p>假设需求是从小到大排序。</p><h4 id="最坏情况"><a href="#最坏情况" class="headerlink" title="最坏情况"></a>最坏情况</h4><p>可见快排的分治不像buttomup sort那样非常稳定（永远都是分一半），所以最坏的情况是每次w=l+1，即序列每次都被分为sort(a,l,l)，sort(a,l+1,n)，这样则需要递归调用n次，而split比较次数是稳定的(n-1)，故最坏情况复杂度为:</p><p>$\sum_{i=1}^{n} i-1=\frac{n(n-1)}{2}=O(n^2)$</p><h4 id="平均情况"><a href="#平均情况" class="headerlink" title="平均情况"></a>平均情况</h4><p>考虑数字都是随机排列且没有重复。则每个数字被split后w位置随机：设f(m)代表区间长度为m时的快排比较次数</p><script type="math/tex; mode=display">f(n)=\begin{cases}0 & \quad n=1 \\n-1+\frac{1}{n}\sum_{w=1}^{w=n} f(w-1)+f(n-w)    & \quad n>1\end{cases}</script><script type="math/tex; mode=display">\begin{aligned}f(n)&=n-1+\frac{1}{n}\sum_{w=1}^{w=n} f(w-1)+f(m-w) \\    &=n-1+\frac{2}{n}\sum_{w=1}^{n}f(w-1)            \\\end{aligned}</script><p>变形则有：</p><script type="math/tex; mode=display">\begin{cases}n*f(n)&=n*(n-1)+2\sum_{w=1}^{n}f(w-1) \\(n-1)*f(n-1)&=(n-1)*(n-2)+2\sum_{w=1}^{n-1}f(w-1) \\\end{cases}\rightarrow \\ \frac{f(n)}{n+1}=\frac{2(n-1)}{n(n+1)}+\frac{f(n-1)}{n}</script><p>令$D(n)=\frac{f(n)}{n+1}$，D(1)=0：</p><script type="math/tex; mode=display">\begin{aligned}D(n)&=\sum_{i=1}^{n} \frac{2(i-1)}{i*(i+1)}    \\    &=\sum_{i=1}^{n} \frac{4}{i+1}-\frac{2}{i}  \\    &=\frac{4}{n+1}-4+\sum_{i=1}^{n} \frac{2}{i} \\    &=\frac{4}{n+1}-4+2\gamma+2ln(n) \\    &=2log(n)+\Theta(1) \\    &\approx 1.44log (n)\end{aligned}</script><p>所以$f(n)=\Theta(nlog(n))$​</p><h2 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h2><div class="table-container"><table><thead><tr><th>算法名称</th><th style="text-align:center">平均比较次数</th><th style="text-align:center">最好比较次数</th><th style="text-align:center">最坏比较次数</th><th style="text-align:center">是否稳定</th></tr></thead><tbody><tr><td>选择排序</td><td style="text-align:center">$\frac{n*(n-1)}{2}$</td><td style="text-align:center">$\frac{n(n-1)}{2}$</td><td style="text-align:center">$\frac{n(n-1)}{2}$</td><td style="text-align:center">否</td></tr><tr><td>插入排序</td><td style="text-align:center">$n^2$</td><td style="text-align:center">$n-1$</td><td style="text-align:center">$\frac{n*(n-1)}{2}$</td><td style="text-align:center">是</td></tr><tr><td>冒泡排序</td><td style="text-align:center">$n^2$​</td><td style="text-align:center">$\frac{n(n-1)}{2}$​​</td><td style="text-align:center">$\frac{n(n-1)}{2}$</td><td style="text-align:center">是</td></tr><tr><td>radix sort</td><td style="text-align:center">$nd$</td><td style="text-align:center">$nd$</td><td style="text-align:center">$nd$</td><td style="text-align:center">是</td></tr><tr><td>bottomup sort</td><td style="text-align:center">$nlog_2n$</td><td style="text-align:center">$\frac{nlog_2n}{2}$</td><td style="text-align:center">$nlog_2n-n+1$</td><td style="text-align:center">是</td></tr><tr><td>merge sort</td><td style="text-align:center">$nlog_2n$</td><td style="text-align:center">$\frac{nlog_2n}{2}$</td><td style="text-align:center">$nlog_2n-n+1$</td><td style="text-align:center">是</td></tr><tr><td>quick sort</td><td style="text-align:center">$nlog_2n$</td><td style="text-align:center">$nlogn$</td><td style="text-align:center">$n^2$</td><td style="text-align:center">否</td></tr><tr><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="寻找第k小元素"><a href="#寻找第k小元素" class="headerlink" title="寻找第k小元素"></a>寻找第k小元素</h2><h3 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">select</span>(A,l,r,k)</span><br><span class="line">&#123;</span><br><span class="line">p=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> p&lt;<span class="number">44</span><span class="comment">// c</span></span><br><span class="line"><span class="built_in">sort</span>(A)</span><br><span class="line"><span class="keyword">return</span> A[k]</span><br><span class="line">q=p/<span class="number">5</span> 将A分为五组</span><br><span class="line">    将q组中的元素单独排序找出中项并得到中项集合M。</span><br><span class="line">mm=<span class="built_in">select</span>(M,<span class="number">1</span>,q,(q+<span class="number">1</span>)/<span class="number">2</span>) <span class="comment">// f(n/5)</span></span><br><span class="line">    <span class="comment">// n         </span></span><br><span class="line">A1=&#123;a|a&lt;mm&#125;</span><br><span class="line">A2=&#123;a|a=mm&#125;</span><br><span class="line">A3=&#123;a|a&gt;mm&#125;</span><br><span class="line">    <span class="comment">// f(0.7n)</span></span><br><span class="line"><span class="keyword">case</span>:</span><br><span class="line">|A1|&gt;=k</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">select</span>(A1,<span class="number">1</span>,|A1|,k);</span><br><span class="line">|A2|+|A1|&gt;=k  <span class="comment">// 一定在A2里面</span></span><br><span class="line"><span class="keyword">return</span> mm;</span><br><span class="line">|A1|+|A2|&lt;k <span class="comment">// 一定在A3里面</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">select</span>(A3,<span class="number">1</span>,|A3|,k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>由上伪代码可见，关键是0.7n是如何计算出来的。只考虑第一和第三种情况，不考虑之间返回mm，只考虑最坏情况:</p><p>显然该两种情况是对称的，故可以只计算A1或A3的规模，严格小于可以转换为n-A3’其中A3’为大于等于mm的数</p><p>故有： </p><script type="math/tex; mode=display">|A1|<=>|A3|\leq n-\frac{3}{2} \lfloor{n/5}\rfloor \leq n-\frac{3(n-4)}{2*5}=0.7n+1.2</script><p>想办法去掉1.2的常数</p><p>假设$0.7n+1.2 \leq \lfloor{0.75n}\rfloor$ <del>当然这里0.75是可以随便设置的</del></p><script type="math/tex; mode=display">0.7n+1.2 \leq 0.75*n-1=> \quad n>=44</script><p>当然，不等式放缩可以有别的方式，所以常数可能不一样</p><script type="math/tex; mode=display">f(n)=\begin{cases}c1 \quad & n<C \\f(n/5)+f(0.75n)+c_2n & n>= C\end{cases}</script><h2 id="最长公子序列问题-LCS"><a href="#最长公子序列问题-LCS" class="headerlink" title="最长公子序列问题(LCS)"></a>最长公子序列问题(LCS)</h2><p>感觉dp的都不是很侧重讲啊。</p><h3 id="伪代码-2"><a href="#伪代码-2" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++</span><br><span class="line">l[i,<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">l[<span class="number">1</span>,j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line"><span class="keyword">if</span> a[i]==b[j]</span><br><span class="line">l[i][j]=l[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l[i][j]=<span class="built_in">max</span>(l[i<span class="number">-1</span>][j],l[i][j<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">f[i,j]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">fp[i][j]=f[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="keyword">if</span> j&gt;=s[i]</span><br><span class="line">f[i][j]=<span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j-s[i]]+v[i])</span><br></pre></td></tr></table></figure><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="两两间最短路"><a href="#两两间最短路" class="headerlink" title="两两间最短路"></a>两两间最短路</h3><h3 id="dijstra"><a href="#dijstra" class="headerlink" title="dijstra"></a>dijstra</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">dis[i]=inf</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">temp=q.<span class="built_in">front</span>()</span><br><span class="line">q.<span class="built_in">pop</span>()</span><br><span class="line"><span class="keyword">for</span>(i in temp的边)</span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">not</span> in q</span><br><span class="line"><span class="keyword">if</span> dis[i]&gt;dis[temp]+length[i][temp]</span><br><span class="line">dis[i]=dis[temp]+length[i][temp]</span><br><span class="line">q.<span class="built_in">push</span>(i)</span><br></pre></td></tr></table></figure><h3 id="krusal"><a href="#krusal" class="headerlink" title="krusal"></a>krusal</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">将边从小到大排序得到E</span><br><span class="line">tot=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(e in E)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">find</span>(e.l)!=<span class="built_in">find</span>(e.r)</span><br><span class="line">        tot++</span><br><span class="line">      fa[e.l]=<span class="built_in">find</span>(e.r)</span><br><span class="line">    <span class="keyword">if</span> tot&gt;=n<span class="number">-1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prim"><a href="#prim" class="headerlink" title="prim"></a>prim</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">T=&#123;&#125;,x=&#123;<span class="number">1</span>&#125;,y=V-&#123;<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">while</span>(y!=&#123;&#125;)</span><br><span class="line">    (x,y)为最小权重边,x属于X，y属于Y</span><br><span class="line">    X=X+&#123;y&#125;</span><br><span class="line">    Y=Y-&#123;y&#125;</span><br><span class="line">    T=T+(x,y)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h2 id="三着色问题-八皇后问题"><a href="#三着色问题-八皇后问题" class="headerlink" title="三着色问题|八皇后问题"></a>三着色问题|八皇后问题</h2><p>这两个本质都是染色问题，所以在一起分析。</p><h3 id="伪代码-3"><a href="#伪代码-3" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">\\递归回溯</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>;i&lt;=n;i++</span><br><span class="line">c[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">color</span>(k):</span><br><span class="line">    <span class="keyword">for</span> i in color</span><br><span class="line">        c[k]=i</span><br><span class="line">        <span class="comment">// check为 O(n)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">check</span>(c)全部着色且不冲突 <span class="keyword">return</span> <span class="keyword">and</span> print c；</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">check</span>(c)不冲突</span><br><span class="line">                <span class="comment">// 部分着色</span></span><br><span class="line">                <span class="built_in">color</span>(k+<span class="number">1</span>)；</span><br><span class="line">    <span class="keyword">return</span>       </span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">\\ 迭代回溯</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> n:</span><br><span class="line"><span class="built_in">c</span>[i]=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(k&gt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">c</span>[k]&lt;color)</span><br><span class="line"><span class="built_in">c</span>[k]++</span><br><span class="line"><span class="keyword">if</span> check 全部着色且不冲突</span><br><span class="line">print <span class="built_in">c</span></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> check部分着色且不冲突</span><br><span class="line">               k++</span><br><span class="line">    end <span class="keyword">while</span></span><br><span class="line">    <span class="built_in">c</span>[k]=<span class="number">0</span></span><br><span class="line">    k--</span><br><span class="line">end <span class="keyword">while</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><script type="math/tex; mode=display">f(k)=\begin{cases}n \quad &    k=1 \\3*f(k-1) & k>=2\\\end{cases}</script><p><del>搜索剪枝他不香吗</del></p><h2 id="网络流-了解步骤即可"><a href="#网络流-了解步骤即可" class="headerlink" title="网络流(了解步骤即可)"></a>网络流(了解步骤即可)</h2><h3 id="FF"><a href="#FF" class="headerlink" title="FF"></a>FF</h3><p>如果流量是无理数，可能找不到解，如果流量收敛可能不是最优解</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">for 边u,v 属于E</span><br><span class="line">f<span class="comment">(u,v)</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> G中有一条增广路径 p</span><br><span class="line">delta=p的瓶颈流量</span><br><span class="line">for p中每条边u,v</span><br><span class="line">f<span class="comment">(u,v)</span>=f<span class="comment">(u,v)</span>+delta</span><br><span class="line">更新剩余图G</span><br></pre></td></tr></table></figure><h3 id="最短路径长度增广-Minimum-path-length-augmentation"><a href="#最短路径长度增广-Minimum-path-length-augmentation" class="headerlink" title="最短路径长度增广(Minimum path length augmentation)"></a>最短路径长度增广(Minimum path length augmentation)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">初始化剩余图R&lt;-G，层次图L</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> t在L中</span><br><span class="line">    <span class="keyword">while</span> L中存在s到t的路径</span><br><span class="line">        对每个路径分别求出瓶颈容量d</span><br><span class="line">        该路径增值d</span><br><span class="line">    更新L</span><br><span class="line">    end <span class="keyword">while</span> </span><br><span class="line">    用剩余图更新L</span><br><span class="line">end <span class="keyword">while</span></span><br></pre></td></tr></table></figure><h2 id="匈牙利"><a href="#匈牙利" class="headerlink" title="匈牙利"></a>匈牙利</h2><h3 id="伪代码-4"><a href="#伪代码-4" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">初始化匹配M=&#123;<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">while</span> G中存在自由节点x，y：</span><br><span class="line">    设r为一个自由节点，从r开始搜索生成一个路径交替树T。</span><br><span class="line">    <span class="keyword">if</span> T是一条匈牙利树</span><br><span class="line">    G-=t</span><br><span class="line">    <span class="keyword">if</span> T中找到一条增广路m</span><br><span class="line">        M+=m</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 基本属性（占坑）</title>
      <link href="/p/61367.html"/>
      <url>/p/61367.html</url>
      
        <content type="html"><![CDATA[<h2 id="Unity坐标系"><a href="#Unity坐标系" class="headerlink" title="Unity坐标系"></a>Unity坐标系</h2><p><a href="https://blog.csdn.net/qq_15020543/article/details/80777249">参考</a></p><h2 id="暂停-等待操作"><a href="#暂停-等待操作" class="headerlink" title="暂停|等待操作"></a>暂停|等待操作</h2>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mosaic And Mixup 实现源码分析</title>
      <link href="/p/45458.html"/>
      <url>/p/45458.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    看了yolox后发现数据增强是真的nb，但是自己想如何实现的时候就感觉不太行了（不能简洁的实现）。又一想，数据增强这种trick肯定会用到其他网络的dataloader里面啊，所以仔细研究了一下代码复现一下。</p><p>​    最后附上我自己封装的mosaic和mixup，不自己封装到时候现copy别人的都不知bug在哪 <del>虽然核心与原论文差不多</del></p><h1 id="Mosaic"><a href="#Mosaic" class="headerlink" title="Mosaic"></a>Mosaic</h1><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>下面根据yolox源码进行分析：</p><p>yolox想法是先生成一个Dataset类，然后根据这个类可以进行iterater，故写了一个pull_item函数。</p><p>基于以上，然后可以定义到MosaicDetection类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MosaicDetection</span>(<span class="params">Dataset</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Detection dataset wrapper that performs mixup for normal dataset.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self, dataset, img_size, mosaic=<span class="literal">True</span>, preproc=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        degrees=<span class="number">10.0</span>, translate=<span class="number">0.1</span>, mosaic_scale=(<span class="params"><span class="number">0.5</span>, <span class="number">1.5</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="function">        mixup_scale=(<span class="params"><span class="number">0.5</span>, <span class="number">1.5</span></span>), shear=<span class="number">2.0</span>, perspective=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        enable_mixup=<span class="literal">True</span>, mosaic_prob=<span class="number">1.0</span>, mixup_prob=<span class="number">1.0</span>, *args</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(img_size, mosaic=mosaic)</span><br><span class="line">        self._dataset = dataset</span><br><span class="line">        self.preproc = preproc</span><br><span class="line">        self.degrees = degrees</span><br><span class="line">        self.translate = translate</span><br><span class="line">        self.scale = mosaic_scale</span><br><span class="line">        self.shear = shear</span><br><span class="line">        self.perspective = perspective</span><br><span class="line">        self.mixup_scale = mixup_scale</span><br><span class="line">        self.enable_mosaic = mosaic</span><br><span class="line">        self.enable_mixup = enable_mixup</span><br><span class="line">        self.mosaic_prob = mosaic_prob</span><br><span class="line">        self.mixup_prob = mixup_prob</span><br><span class="line">        self.local_rank = get_local_rank()</span><br></pre></td></tr></table></figure><p>参数含义就不讲了，关键是self._dataset这个字段，可以看出Mosaic是在原先的Dataset基础上实现的。</p><p>也就是说需要的只是重写getitem和len，下面开始讲解getitem</p><h3 id="第一部分-图片拼接"><a href="#第一部分-图片拼接" class="headerlink" title="第一部分 图片拼接"></a>第一部分 图片拼接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, idx</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.enable_mosaic <span class="keyword">and</span> random.random() &lt; self.mosaic_prob:</span><br><span class="line">        mosaic_labels = []</span><br><span class="line">        input_dim = self._dataset.input_dim</span><br><span class="line">        input_h, input_w = input_dim[<span class="number">0</span>], input_dim[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># yc, xc = s, s  # mosaic center x, y</span></span><br><span class="line">        <span class="comment"># 画布大小为input_h,input_w</span></span><br><span class="line">        <span class="comment"># 拼接公共点位置</span></span><br><span class="line">        yc = <span class="built_in">int</span>(random.uniform(<span class="number">0.5</span> * input_h, <span class="number">1.5</span> * input_h))</span><br><span class="line">        xc = <span class="built_in">int</span>(random.uniform(<span class="number">0.5</span> * input_w, <span class="number">1.5</span> * input_w))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3 additional image indices</span></span><br><span class="line">        indices = [idx] + [random.randint(<span class="number">0</span>, <span class="built_in">len</span>(self._dataset) - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i_mosaic, index <span class="keyword">in</span> <span class="built_in">enumerate</span>(indices):</span><br><span class="line">            img, _labels, _, img_id = self._dataset.pull_item(index)</span><br><span class="line">            <span class="comment"># 得到的第一张图片的原始大小</span></span><br><span class="line">            h0, w0 = img.shape[:<span class="number">2</span>]  </span><br><span class="line">            </span><br><span class="line">            scale = <span class="built_in">min</span>(<span class="number">1.</span> * input_h / h0, <span class="number">1.</span> * input_w / w0)</span><br><span class="line">            <span class="comment"># 放大到input size</span></span><br><span class="line">            img = cv2.resize(</span><br><span class="line">                img, (<span class="built_in">int</span>(w0 * scale), <span class="built_in">int</span>(h0 * scale)), interpolation=cv2.INTER_LINEAR</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># generate output mosaic image</span></span><br><span class="line">            (h, w, c) = img.shape[:<span class="number">3</span>]</span><br><span class="line">            <span class="comment"># 生成一个新的画布，颜色是114</span></span><br><span class="line">            <span class="keyword">if</span> i_mosaic == <span class="number">0</span>:</span><br><span class="line">                mosaic_img = np.full((input_h * <span class="number">2</span>, input_w * <span class="number">2</span>, c), <span class="number">114</span>, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># suffix l means large image, while s means small image in mosaic aug.</span></span><br><span class="line">            <span class="comment"># 根据图片的先后顺序分别放入左上、右上、左下、右下四个方向。</span></span><br><span class="line">            <span class="comment"># 函数返回的是基于画布的新坐标 和 原图像的坐标（要注意由于0.5-1.5倍，原图像可能会超出画布范围</span></span><br><span class="line">            (l_x1, l_y1, l_x2, l_y2), (s_x1, s_y1, s_x2, s_y2) = get_mosaic_coordinate(</span><br><span class="line">                mosaic_img, i_mosaic, xc, yc, w, h, input_h, input_w</span><br><span class="line">            )</span><br><span class="line">  <span class="comment"># 赋值到画布</span></span><br><span class="line">            mosaic_img[l_y1:l_y2, l_x1:l_x2] = img[s_y1:s_y2, s_x1:s_x2]</span><br><span class="line">            plt.imshow(mosaic_img)</span><br><span class="line">            plt.show()</span><br><span class="line">            <span class="comment"># 坐标偏移量</span></span><br><span class="line">            padw, padh = l_x1 - s_x1, l_y1 - s_y1</span><br><span class="line"></span><br><span class="line">            labels = _labels.copy()</span><br><span class="line">            <span class="comment"># Normalized xywh to pixel xyxy format</span></span><br><span class="line">            <span class="comment"># 个人觉得这个注释意思有问题（可能我理解错了？下面细说</span></span><br><span class="line">            <span class="comment"># 这是转换到新坐标轴的坐标</span></span><br><span class="line">            <span class="keyword">if</span> _labels.size &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 左上角坐标</span></span><br><span class="line">                labels[:, <span class="number">0</span>] = scale * _labels[:, <span class="number">0</span>] + padw</span><br><span class="line">                labels[:, <span class="number">1</span>] = scale * _labels[:, <span class="number">1</span>] + padh</span><br><span class="line">                <span class="comment"># 右下</span></span><br><span class="line">                labels[:, <span class="number">2</span>] = scale * _labels[:, <span class="number">2</span>] + padw</span><br><span class="line">                labels[:, <span class="number">3</span>] = scale * _labels[:, <span class="number">3</span>] + padh</span><br><span class="line">            mosaic_labels.append(labels)</span><br><span class="line">        plt.imshow(mosaic_img)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    大概思路是先随机得到<strong>四张图片</strong>，然后创建一个大小为网络输入两倍的input，随机（0.5-1.5 scale）生成一个mosaic center（简单理解就是四张图片的公共点）。之后按照顺序拼接到左上、右上、左下、右下四个部分。</p><p>​    当一张图片放入画布时，得到x，y的原偏移量（padw，padh），然后计算偏移后的bbox位置。</p><p>​    有个问题是新bbox的坐标，注释写的是xywh转x1 y1 x2 y2，但是个人实现的时候发现输入是bbox的x1y1x2y2转换能正确框出，有无评论区大佬说明一下。</p><p>第二部分：图像旋转与剪切</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(mosaic_labels):</span><br><span class="line">       <span class="comment"># 将bbox超出画布部分变为画布边缘</span></span><br><span class="line">           mosaic_labels = np.concatenate(mosaic_labels, <span class="number">0</span>)</span><br><span class="line">           np.clip(mosaic_labels[:, <span class="number">0</span>], <span class="number">0</span>, <span class="number">2</span> * input_w, out=mosaic_labels[:, <span class="number">0</span>])</span><br><span class="line">           np.clip(mosaic_labels[:, <span class="number">1</span>], <span class="number">0</span>, <span class="number">2</span> * input_h, out=mosaic_labels[:, <span class="number">1</span>])</span><br><span class="line">           np.clip(mosaic_labels[:, <span class="number">2</span>], <span class="number">0</span>, <span class="number">2</span> * input_w, out=mosaic_labels[:, <span class="number">2</span>])</span><br><span class="line">           np.clip(mosaic_labels[:, <span class="number">3</span>], <span class="number">0</span>, <span class="number">2</span> * input_h, out=mosaic_labels[:, <span class="number">3</span>])</span><br><span class="line"><span class="comment"># 顺时针旋转degree°，输出新的图像和新的bbox坐标</span></span><br><span class="line">       mosaic_img, mosaic_labels = random_perspective(</span><br><span class="line">           mosaic_img,</span><br><span class="line">           mosaic_labels,</span><br><span class="line">           degrees=self.degrees,</span><br><span class="line">           translate=self.translate,</span><br><span class="line">           scale=self.scale,</span><br><span class="line">           shear=self.shear,</span><br><span class="line">           perspective=self.perspective,</span><br><span class="line">           border=[-input_h // <span class="number">2</span>, -input_w // <span class="number">2</span>],</span><br><span class="line">       )  <span class="comment"># border to remove</span></span><br><span class="line"></span><br><span class="line">       </span><br></pre></td></tr></table></figure><p>​    这一部分就比较简单了，先是用clip函数处理好画布，然后旋转一个角度，旋转后bbox坐标变化其实可以不用关心，因为角度很小物体几乎超不出bbox的范围。细究旋转代码可以自己去看看<del>我不想看了</del>，<strong>最后还裁剪成了input size</strong>，所以这个最后输出还是input size而不是2*input size</p><h1 id="Mix-up"><a href="#Mix-up" class="headerlink" title="Mix up"></a>Mix up</h1><p>论文mosaic后半部分还增加了mixup（可选，但默认使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -----------------------------------------------------------------</span></span><br><span class="line">       <span class="comment"># CopyPaste: https://arxiv.org/abs/2012.07177</span></span><br><span class="line">       <span class="comment"># -----------------------------------------------------------------</span></span><br><span class="line">       <span class="keyword">if</span> (</span><br><span class="line">           self.enable_mixup</span><br><span class="line">           <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">len</span>(mosaic_labels) == <span class="number">0</span></span><br><span class="line">           <span class="keyword">and</span> random.random() &lt; self.mixup_prob</span><br><span class="line">           <span class="comment"># 如果mosaic_prob=0.5 mixup_prob=0.5这里0.5*0.5是0.25的概率mixup了</span></span><br><span class="line">       ):</span><br><span class="line">           mosaic_img, mosaic_labels = self.mixup(mosaic_img, mosaic_labels, self.input_dim)</span><br><span class="line">       <span class="comment"># 这里还增加了其他的预处理</span></span><br><span class="line">       mix_img, padded_labels = self.preproc(mosaic_img, mosaic_labels, self.input_dim)</span><br><span class="line">       img_info = (mix_img.shape[<span class="number">1</span>], mix_img.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">       <span class="comment"># -----------------------------------------------------------------</span></span><br><span class="line">       <span class="comment"># img_info and img_id are not used for training.</span></span><br><span class="line">       <span class="comment"># They are also hard to be specified on a mosaic image.</span></span><br><span class="line">       <span class="comment"># -----------------------------------------------------------------</span></span><br><span class="line">       <span class="keyword">return</span> mix_img, padded_labels, img_info, img_id</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="comment"># 这个else是和mosaic的if对应的，不mosaic则默认只有预处理</span></span><br><span class="line">       self._dataset._input_dim = self.input_dim</span><br><span class="line">       img, label, img_info, img_id = self._dataset.pull_item(idx)</span><br><span class="line">       img, label = self.preproc(img, label, self.input_dim)</span><br><span class="line">       <span class="keyword">return</span> img, label, img_info, img_id</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mixup函数    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mixup</span>(<span class="params">self, origin_img, origin_labels, input_dim</span>):</span></span><br><span class="line">        jit_factor = random.uniform(*self.mixup_scale)</span><br><span class="line">        <span class="comment"># 图像是否翻转</span></span><br><span class="line">        FLIP = random.uniform(<span class="number">0</span>, <span class="number">1</span>) &gt; <span class="number">0.5</span></span><br><span class="line">        cp_labels = []</span><br><span class="line">        <span class="comment"># 保证不是背景 load_anno函数不涉及图像读取会更快（coco类</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(cp_labels) == <span class="number">0</span>:</span><br><span class="line">            cp_index = random.randint(<span class="number">0</span>, self.__len__() - <span class="number">1</span>)</span><br><span class="line">            cp_labels = self._dataset.load_anno(cp_index)</span><br><span class="line">        <span class="comment"># 确定不是背景后再载入img</span></span><br><span class="line">        img, cp_labels, _, _ = self._dataset.pull_item(cp_index)</span><br><span class="line">    <span class="comment"># 创建画布</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(img.shape) == <span class="number">3</span>:</span><br><span class="line">            cp_img = np.ones((input_dim[<span class="number">0</span>], input_dim[<span class="number">1</span>], <span class="number">3</span>), dtype=np.uint8) * <span class="number">114</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cp_img = np.ones(input_dim, dtype=np.uint8) * <span class="number">114</span></span><br><span class="line">    <span class="comment"># 计算scale</span></span><br><span class="line">        cp_scale_ratio = <span class="built_in">min</span>(input_dim[<span class="number">0</span>] / img.shape[<span class="number">0</span>], input_dim[<span class="number">1</span>] / img.shape[<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># resize</span></span><br><span class="line">        resized_img = cv2.resize(</span><br><span class="line">            img,</span><br><span class="line">            (<span class="built_in">int</span>(img.shape[<span class="number">1</span>] * cp_scale_ratio), <span class="built_in">int</span>(img.shape[<span class="number">0</span>] * cp_scale_ratio)),</span><br><span class="line">            interpolation=cv2.INTER_LINEAR,</span><br><span class="line">        )</span><br><span class="line">    <span class="comment"># 放入画布</span></span><br><span class="line">        cp_img[</span><br><span class="line">            : <span class="built_in">int</span>(img.shape[<span class="number">0</span>] * cp_scale_ratio), : <span class="built_in">int</span>(img.shape[<span class="number">1</span>] * cp_scale_ratio)</span><br><span class="line">        ] = resized_img</span><br><span class="line">    <span class="comment"># 画布放大jit factor倍</span></span><br><span class="line">        cp_img = cv2.resize(</span><br><span class="line">            cp_img,</span><br><span class="line">            (<span class="built_in">int</span>(cp_img.shape[<span class="number">1</span>] * jit_factor), <span class="built_in">int</span>(cp_img.shape[<span class="number">0</span>] * jit_factor)),</span><br><span class="line">        )</span><br><span class="line">        cp_scale_ratio *= jit_factor</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> FLIP:</span><br><span class="line">            cp_img = cp_img[:, ::-<span class="number">1</span>, :]</span><br><span class="line">    <span class="comment"># 以上创建好了一个可以mix up的图像</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 下面开始mix up</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建的画布向输入的图像上面叠加</span></span><br><span class="line">        origin_h, origin_w = cp_img.shape[:<span class="number">2</span>]</span><br><span class="line">        target_h, target_w = origin_img.shape[:<span class="number">2</span>]</span><br><span class="line">        <span class="comment"># 取最大面积然后全部padding 0 </span></span><br><span class="line">        padded_img = np.zeros(</span><br><span class="line">            (<span class="built_in">max</span>(origin_h, target_h), <span class="built_in">max</span>(origin_w, target_w), <span class="number">3</span>), dtype=np.uint8</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 放入新画布（也只有新画布</span></span><br><span class="line">        padded_img[:origin_h, :origin_w] = cp_img</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机偏移量</span></span><br><span class="line">        x_offset, y_offset = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> padded_img.shape[<span class="number">0</span>] &gt; target_h:</span><br><span class="line">            y_offset = random.randint(<span class="number">0</span>, padded_img.shape[<span class="number">0</span>] - target_h - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> padded_img.shape[<span class="number">1</span>] &gt; target_w:</span><br><span class="line">            x_offset = random.randint(<span class="number">0</span>, padded_img.shape[<span class="number">1</span>] - target_w - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 裁剪画布</span></span><br><span class="line">        padded_cropped_img = padded_img[</span><br><span class="line">            y_offset: y_offset + target_h, x_offset: x_offset + target_w</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调整scale后画布中图像的bbox坐标</span></span><br><span class="line">        cp_bboxes_origin_np = adjust_box_anns(</span><br><span class="line">            cp_labels[:, :<span class="number">4</span>].copy(), cp_scale_ratio, <span class="number">0</span>, <span class="number">0</span>, origin_w, origin_h</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 是否镜像翻转</span></span><br><span class="line">        <span class="keyword">if</span> FLIP:</span><br><span class="line">            cp_bboxes_origin_np[:, <span class="number">0</span>::<span class="number">2</span>] = (</span><br><span class="line">                origin_w - cp_bboxes_origin_np[:, <span class="number">0</span>::<span class="number">2</span>][:, ::-<span class="number">1</span>]</span><br><span class="line">            )</span><br><span class="line">           </span><br><span class="line">        <span class="comment"># 调整裁剪后bbox坐标（以裁剪左上角为新的原点</span></span><br><span class="line">        cp_bboxes_transformed_np = cp_bboxes_origin_np.copy()</span><br><span class="line">        cp_bboxes_transformed_np[:, <span class="number">0</span>::<span class="number">2</span>] = np.clip(</span><br><span class="line">            cp_bboxes_transformed_np[:, <span class="number">0</span>::<span class="number">2</span>] - x_offset, <span class="number">0</span>, target_w</span><br><span class="line">        )</span><br><span class="line">        cp_bboxes_transformed_np[:, <span class="number">1</span>::<span class="number">2</span>] = np.clip(</span><br><span class="line">            cp_bboxes_transformed_np[:, <span class="number">1</span>::<span class="number">2</span>] - y_offset, <span class="number">0</span>, target_h</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 通过五个条件判断offset是否合理，下面细说</span></span><br><span class="line">        keep_list = box_candidates(cp_bboxes_origin_np.T, cp_bboxes_transformed_np.T, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 满足条件则合并label和image</span></span><br><span class="line">        <span class="keyword">if</span> keep_list.<span class="built_in">sum</span>() &gt;= <span class="number">1.0</span>:</span><br><span class="line">            cls_labels = cp_labels[keep_list, <span class="number">4</span>:<span class="number">5</span>].copy()</span><br><span class="line">            box_labels = cp_bboxes_transformed_np[keep_list]</span><br><span class="line">            labels = np.hstack((box_labels, cls_labels))</span><br><span class="line">            origin_labels = np.vstack((origin_labels, labels))</span><br><span class="line">            origin_img = origin_img.astype(np.float32)</span><br><span class="line">            origin_img = <span class="number">0.5</span> * origin_img + <span class="number">0.5</span> * padded_cropped_img.astype(np.float32)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> origin_img.astype(np.uint8), origin_labels</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总体来说比较好理解，因为坐标变换方法和mosaic相同，而最头疼的就是坐标变换了。</p><p>首先随机出一个非背景图像（必定有bbox的图像），然后缩放到input size，再放入input size（比如650*640）大小的画布。然后画布整体放大到jit facotr倍，在原图和新图中寻找最大的画布，在大画布中随机出裁剪偏移量，裁剪，检查没问题后mix up即可。</p><p>大致流程如下（省略了寻找最大的画布过程）：</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210926210238.png" alt=""></p><p>下面讲检查函数box_candidates：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_candidates</span>(<span class="params">box1, box2, wh_thr=<span class="number">2</span>, ar_thr=<span class="number">20</span>, area_thr=<span class="number">0.2</span></span>):</span></span><br><span class="line">    <span class="comment"># box1(4,n), box2(4,n)</span></span><br><span class="line">    <span class="comment"># Compute candidate boxes which include follwing 5 things:</span></span><br><span class="line">    <span class="comment"># box1 before augment, box2 after augment, wh_thr (pixels), aspect_ratio_thr, area_ratio</span></span><br><span class="line">    w1, h1 = box1[<span class="number">2</span>] - box1[<span class="number">0</span>], box1[<span class="number">3</span>] - box1[<span class="number">1</span>]</span><br><span class="line">    w2, h2 = box2[<span class="number">2</span>] - box2[<span class="number">0</span>], box2[<span class="number">3</span>] - box2[<span class="number">1</span>]</span><br><span class="line">    ar = np.maximum(w2 / (h2 + <span class="number">1e-16</span>), h2 / (w2 + <span class="number">1e-16</span>))  <span class="comment"># aspect ratio</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (w2 &gt; wh_thr)</span><br><span class="line">        &amp; (h2 &gt; wh_thr)</span><br><span class="line">        &amp; (w2 * h2 / (w1 * h1 + <span class="number">1e-16</span>) &gt; area_thr)</span><br><span class="line">        &amp; (ar &lt; ar_thr)</span><br><span class="line">    )  <span class="comment"># candidates</span></span><br></pre></td></tr></table></figure><p>就是将偏移后的box和偏移前的box进行比较，四项指标分别是偏移后的box宽度，高度，面积，box长宽比</p><p><del>注释里写的五个实现只有四个</del></p><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210926215440.png" alt="最终结果，中间的那两个是mix up" style="height:60vh;"/></div><span class="image-caption">最终结果，中间的那两个是mix up</span></div><h1 id="自用代码"><a href="#自用代码" class="headerlink" title="自用代码"></a>自用代码</h1><p>因为yolox等里面肯定是用了各种东西对dataloader加速比如pycoco类封装（这个包不是很懂）、preload等，一时半会也看不完。只好剥离了，loader的效率估计不会那么高 <del>以后变成大牛了再加吧</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2021/9/25 14:06</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> draw_box_utli <span class="keyword">import</span> draw_box</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> VocDataset <span class="keyword">import</span> VocDataSet</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mosaic_coordinate</span>(<span class="params">mosaic_image, mosaic_index, xc, yc, w, h, input_h, input_w</span>):</span></span><br><span class="line">    <span class="comment"># TODO update doc</span></span><br><span class="line">    <span class="comment"># index0 to top left part of image</span></span><br><span class="line">    <span class="keyword">if</span> mosaic_index == <span class="number">0</span>:</span><br><span class="line">        x1, y1, x2, y2 = <span class="built_in">max</span>(xc - w, <span class="number">0</span>), <span class="built_in">max</span>(yc - h, <span class="number">0</span>), xc, yc</span><br><span class="line">        small_coord = w - (x2 - x1), h - (y2 - y1), w, h</span><br><span class="line">    <span class="comment"># index1 to top right part of image</span></span><br><span class="line">    <span class="keyword">elif</span> mosaic_index == <span class="number">1</span>:</span><br><span class="line">        x1, y1, x2, y2 = xc, <span class="built_in">max</span>(yc - h, <span class="number">0</span>), <span class="built_in">min</span>(xc + w, input_w * <span class="number">2</span>), yc</span><br><span class="line">        small_coord = <span class="number">0</span>, h - (y2 - y1), <span class="built_in">min</span>(w, x2 - x1), h</span><br><span class="line">    <span class="comment"># index2 to bottom left part of image</span></span><br><span class="line">    <span class="keyword">elif</span> mosaic_index == <span class="number">2</span>:</span><br><span class="line">        x1, y1, x2, y2 = <span class="built_in">max</span>(xc - w, <span class="number">0</span>), yc, xc, <span class="built_in">min</span>(input_h * <span class="number">2</span>, yc + h)</span><br><span class="line">        small_coord = w - (x2 - x1), <span class="number">0</span>, w, <span class="built_in">min</span>(y2 - y1, h)</span><br><span class="line">    <span class="comment"># index2 to bottom right part of image</span></span><br><span class="line">    <span class="keyword">elif</span> mosaic_index == <span class="number">3</span>:</span><br><span class="line">        x1, y1, x2, y2 = xc, yc, <span class="built_in">min</span>(xc + w, input_w * <span class="number">2</span>), <span class="built_in">min</span>(input_h * <span class="number">2</span>, yc + h)  <span class="comment"># noqa</span></span><br><span class="line">        small_coord = <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">min</span>(w, x2 - x1), <span class="built_in">min</span>(y2 - y1, h)</span><br><span class="line">    <span class="keyword">return</span> (x1, y1, x2, y2), small_coord</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_perspective</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        img,</span></span></span><br><span class="line"><span class="params"><span class="function">        targets=(<span class="params"></span>),</span></span></span><br><span class="line"><span class="params"><span class="function">        degrees=<span class="number">10</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        translate=<span class="number">0.1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        scale=<span class="number">0.1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        shear=<span class="number">10</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        perspective=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        border=(<span class="params"><span class="number">0</span>, <span class="number">0</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="function"></span>):</span></span><br><span class="line">    <span class="comment"># targets = [cls, xyxy]</span></span><br><span class="line">    height = img.shape[<span class="number">0</span>] + border[<span class="number">0</span>] * <span class="number">2</span>  <span class="comment"># shape(h,w,c)</span></span><br><span class="line">    width = img.shape[<span class="number">1</span>] + border[<span class="number">1</span>] * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Center</span></span><br><span class="line">    C = np.eye(<span class="number">3</span>)</span><br><span class="line">    C[<span class="number">0</span>, <span class="number">2</span>] = -img.shape[<span class="number">1</span>] / <span class="number">2</span>  <span class="comment"># x translation (pixels)</span></span><br><span class="line">    C[<span class="number">1</span>, <span class="number">2</span>] = -img.shape[<span class="number">0</span>] / <span class="number">2</span>  <span class="comment"># y translation (pixels)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rotation and Scale</span></span><br><span class="line">    R = np.eye(<span class="number">3</span>)</span><br><span class="line">    a = random.uniform(-degrees, degrees)</span><br><span class="line">    <span class="comment"># a += random.choice([-180, -90, 0, 90])  # add 90deg rotations to small rotations</span></span><br><span class="line">    s = random.uniform(scale[<span class="number">0</span>], scale[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># s = 2 ** random.uniform(-scale, scale)</span></span><br><span class="line">    R[:<span class="number">2</span>] = cv2.getRotationMatrix2D(angle=a, center=(<span class="number">0</span>, <span class="number">0</span>), scale=s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Shear</span></span><br><span class="line">    S = np.eye(<span class="number">3</span>)</span><br><span class="line">    S[<span class="number">0</span>, <span class="number">1</span>] = math.tan(random.uniform(-shear, shear) * math.pi / <span class="number">180</span>)  <span class="comment"># x shear (deg)</span></span><br><span class="line">    S[<span class="number">1</span>, <span class="number">0</span>] = math.tan(random.uniform(-shear, shear) * math.pi / <span class="number">180</span>)  <span class="comment"># y shear (deg)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Translation</span></span><br><span class="line">    T = np.eye(<span class="number">3</span>)</span><br><span class="line">    T[<span class="number">0</span>, <span class="number">2</span>] = (</span><br><span class="line">            random.uniform(<span class="number">0.5</span> - translate, <span class="number">0.5</span> + translate) * width</span><br><span class="line">    )  <span class="comment"># x translation (pixels)</span></span><br><span class="line">    T[<span class="number">1</span>, <span class="number">2</span>] = (</span><br><span class="line">            random.uniform(<span class="number">0.5</span> - translate, <span class="number">0.5</span> + translate) * height</span><br><span class="line">    )  <span class="comment"># y translation (pixels)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Combined rotation matrix</span></span><br><span class="line">    M = T @ S @ R @ C  <span class="comment"># order of operations (right to left) is IMPORTANT</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line">    <span class="comment"># For Aug out of Mosaic</span></span><br><span class="line">    <span class="comment"># s = 1.</span></span><br><span class="line">    <span class="comment"># M = np.eye(3)</span></span><br><span class="line">    <span class="comment">###########################</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (border[<span class="number">0</span>] != <span class="number">0</span>) <span class="keyword">or</span> (border[<span class="number">1</span>] != <span class="number">0</span>) <span class="keyword">or</span> (M != np.eye(<span class="number">3</span>)).<span class="built_in">any</span>():  <span class="comment"># image changed</span></span><br><span class="line">        <span class="keyword">if</span> perspective:</span><br><span class="line">            img = cv2.warpPerspective(</span><br><span class="line">                img, M, dsize=(width, height), borderValue=(<span class="number">114</span>, <span class="number">114</span>, <span class="number">114</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># affine</span></span><br><span class="line">            img = cv2.warpAffine(</span><br><span class="line">                img, M[:<span class="number">2</span>], dsize=(width, height), borderValue=(<span class="number">114</span>, <span class="number">114</span>, <span class="number">114</span>)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Transform label coordinates</span></span><br><span class="line">    n = <span class="built_in">len</span>(targets)</span><br><span class="line">    <span class="keyword">if</span> n:</span><br><span class="line">        <span class="comment"># warp points</span></span><br><span class="line">        xy = np.ones((n * <span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">        xy[:, :<span class="number">2</span>] = targets[:, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]].reshape(</span><br><span class="line">            n * <span class="number">4</span>, <span class="number">2</span></span><br><span class="line">        )  <span class="comment"># x1y1, x2y2, x1y2, x2y1</span></span><br><span class="line">        xy = xy @ M.T  <span class="comment"># transform</span></span><br><span class="line">        <span class="keyword">if</span> perspective:</span><br><span class="line">            xy = (xy[:, :<span class="number">2</span>] / xy[:, <span class="number">2</span>:<span class="number">3</span>]).reshape(n, <span class="number">8</span>)  <span class="comment"># rescale</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># affine</span></span><br><span class="line">            xy = xy[:, :<span class="number">2</span>].reshape(n, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create new boxes</span></span><br><span class="line">        x = xy[:, [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]]</span><br><span class="line">        y = xy[:, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]]</span><br><span class="line">        xy = np.concatenate((x.<span class="built_in">min</span>(<span class="number">1</span>), y.<span class="built_in">min</span>(<span class="number">1</span>), x.<span class="built_in">max</span>(<span class="number">1</span>), y.<span class="built_in">max</span>(<span class="number">1</span>))).reshape(<span class="number">4</span>, n).T</span><br><span class="line"></span><br><span class="line">        <span class="comment"># clip boxes</span></span><br><span class="line">        xy[:, [<span class="number">0</span>, <span class="number">2</span>]] = xy[:, [<span class="number">0</span>, <span class="number">2</span>]].clip(<span class="number">0</span>, width)</span><br><span class="line">        xy[:, [<span class="number">1</span>, <span class="number">3</span>]] = xy[:, [<span class="number">1</span>, <span class="number">3</span>]].clip(<span class="number">0</span>, height)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># filter candidates</span></span><br><span class="line">        i = box_candidates(box1=targets[:, :<span class="number">4</span>].T * s, box2=xy.T)</span><br><span class="line">        targets = targets[i]</span><br><span class="line">        targets[:, :<span class="number">4</span>] = xy[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> img, targets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_candidates</span>(<span class="params">box1, box2, wh_thr=<span class="number">2</span>, ar_thr=<span class="number">20</span>, area_thr=<span class="number">0.2</span></span>):</span></span><br><span class="line">    <span class="comment"># box1(4,n), box2(4,n)</span></span><br><span class="line">    <span class="comment"># Compute candidate boxes which include follwing 5 things:</span></span><br><span class="line">    <span class="comment"># box1 before augment, box2 after augment, wh_thr (pixels), aspect_ratio_thr, area_ratio</span></span><br><span class="line">    w1, h1 = box1[<span class="number">2</span>] - box1[<span class="number">0</span>], box1[<span class="number">3</span>] - box1[<span class="number">1</span>]</span><br><span class="line">    w2, h2 = box2[<span class="number">2</span>] - box2[<span class="number">0</span>], box2[<span class="number">3</span>] - box2[<span class="number">1</span>]</span><br><span class="line">    ar = np.maximum(w2 / (h2 + <span class="number">1e-16</span>), h2 / (w2 + <span class="number">1e-16</span>))  <span class="comment"># aspect ratio</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">            (w2 &gt; wh_thr)</span><br><span class="line">            &amp; (h2 &gt; wh_thr)</span><br><span class="line">            &amp; (w2 * h2 / (w1 * h1 + <span class="number">1e-16</span>) &gt; area_thr)</span><br><span class="line">            &amp; (ar &lt; ar_thr)</span><br><span class="line">    )  <span class="comment"># candidates</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_box_anns</span>(<span class="params">bbox, scale_ratio, padw, padh, w_max, h_max</span>):</span></span><br><span class="line">    bbox[:, <span class="number">0</span>::<span class="number">2</span>] = np.clip(bbox[:, <span class="number">0</span>::<span class="number">2</span>] * scale_ratio + padw, <span class="number">0</span>, w_max)</span><br><span class="line">    bbox[:, <span class="number">1</span>::<span class="number">2</span>] = np.clip(bbox[:, <span class="number">1</span>::<span class="number">2</span>] * scale_ratio + padh, <span class="number">0</span>, h_max)</span><br><span class="line">    <span class="keyword">return</span> bbox</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MasaicDataset</span>(<span class="params">Dataset</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self, dataset, input_size=(<span class="params"><span class="number">640</span>,<span class="number">640</span></span>),mosaic=<span class="literal">True</span>, preproc=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        degrees=<span class="number">10.0</span>, translate=<span class="number">0.1</span>, mosaic_scale=(<span class="params"><span class="number">0.5</span>, <span class="number">1.5</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="function">        mixup_scale=(<span class="params"><span class="number">0.5</span>, <span class="number">1.5</span></span>), shear=<span class="number">2.0</span>, perspective=<span class="number">0.0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        enable_mixup=<span class="literal">True</span>, mosaic_prob=<span class="number">1.0</span>, mixup_prob=<span class="number">1.0</span>, *args</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            dataset(Dataset) : Pytorch dataset object.</span></span><br><span class="line"><span class="string">            img_size (tuple):</span></span><br><span class="line"><span class="string">            mosaic (bool): enable mosaic augmentation or not.</span></span><br><span class="line"><span class="string">            preproc (func):</span></span><br><span class="line"><span class="string">            degrees (float):</span></span><br><span class="line"><span class="string">            translate (float):</span></span><br><span class="line"><span class="string">            mosaic_scale (tuple):</span></span><br><span class="line"><span class="string">            mixup_scale (tuple):</span></span><br><span class="line"><span class="string">            shear (float):</span></span><br><span class="line"><span class="string">            perspective (float):</span></span><br><span class="line"><span class="string">            enable_mixup (bool):</span></span><br><span class="line"><span class="string">            *args(tuple) : Additional arguments for mixup random sampler.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self._dataset = dataset</span><br><span class="line">        self.input_dim=input_size</span><br><span class="line">        self.preproc = preproc</span><br><span class="line">        self.degrees = degrees</span><br><span class="line">        self.translate = translate</span><br><span class="line">        self.scale = mosaic_scale</span><br><span class="line">        self.shear = shear</span><br><span class="line">        self.perspective = perspective</span><br><span class="line">        self.mixup_scale = mixup_scale</span><br><span class="line">        self.enable_mosaic = mosaic</span><br><span class="line">        self.enable_mixup = enable_mixup</span><br><span class="line">        self.mosaic_prob = mosaic_prob</span><br><span class="line">        self.mixup_prob = mixup_prob</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self._dataset)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, idx</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.enable_mosaic <span class="keyword">and</span> random.random() &lt; self.mosaic_prob:</span><br><span class="line">            mosaic_labels = []</span><br><span class="line"></span><br><span class="line">            input_h, input_w = self.input_dim[<span class="number">0</span>], self.input_dim[<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># input_h,input_w=2600,4624</span></span><br><span class="line">            <span class="comment"># yc, xc = s, s  # mosaic center x, y</span></span><br><span class="line">            <span class="comment"># 画布大小为input_h,input_w</span></span><br><span class="line">            <span class="comment"># yc = int(random.uniform(0.5 * input_h, 1.5 * input_h))</span></span><br><span class="line">            <span class="comment"># xc = int(random.uniform(0.5 * input_w, 1.5 * input_w))</span></span><br><span class="line">            yc=<span class="number">640</span></span><br><span class="line">            xc=<span class="number">640</span></span><br><span class="line">            <span class="comment"># 3 additional image indices</span></span><br><span class="line">            indices = [idx] + [random.randint(<span class="number">0</span>, <span class="built_in">len</span>(self._dataset) - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i_mosaic, index <span class="keyword">in</span> <span class="built_in">enumerate</span>(indices):</span><br><span class="line">                img, target = self._dataset.pull_item(index)</span><br><span class="line">                _labels=target[<span class="string">&#x27;labels&#x27;</span>]</span><br><span class="line"></span><br><span class="line">                h0, w0 = target[<span class="string">&#x27;image_info&#x27;</span>]  <span class="comment"># orig hw</span></span><br><span class="line">                scale = <span class="built_in">min</span>(<span class="number">1.</span> * input_h / h0, <span class="number">1.</span> * input_w / w0)</span><br><span class="line">                <span class="comment"># img 放大到input size</span></span><br><span class="line">                img = cv2.resize(</span><br><span class="line">                    img, (<span class="built_in">int</span>(w0 * scale), <span class="built_in">int</span>(h0 * scale)), interpolation=cv2.INTER_LINEAR</span><br><span class="line">                )</span><br><span class="line">                <span class="comment"># generate output mosaic image</span></span><br><span class="line">                (h, w, c) = img.shape[:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># draw_box(</span></span><br><span class="line">                <span class="comment">#     img, _labels[:, :4],</span></span><br><span class="line">                <span class="comment">#     classes=_labels[:, -1],</span></span><br><span class="line">                <span class="comment">#     category_index=self._dataset.name2num,</span></span><br><span class="line">                <span class="comment">#     scores=np.ones(shape=(len(_labels[:, -1]))),</span></span><br><span class="line">                <span class="comment">#     thresh=0</span></span><br><span class="line">                <span class="comment"># )</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> i_mosaic == <span class="number">0</span>:</span><br><span class="line">                    mosaic_img = np.full((input_h * <span class="number">2</span>, input_w * <span class="number">2</span>, c), <span class="number">114</span>, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># suffix l means large image, while s means small image in mosaic aug.</span></span><br><span class="line">                (l_x1, l_y1, l_x2, l_y2), (s_x1, s_y1, s_x2, s_y2) = get_mosaic_coordinate(</span><br><span class="line">                    mosaic_img, i_mosaic, xc, yc, w, h, input_h, input_w</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                mosaic_img[l_y1:l_y2, l_x1:l_x2] = img[s_y1:s_y2, s_x1:s_x2]</span><br><span class="line"></span><br><span class="line">                padw, padh = l_x1 - s_x1, l_y1 - s_y1</span><br><span class="line"></span><br><span class="line">                labels = _labels.copy()</span><br><span class="line">                <span class="comment"># Normalized xywh to pixel xyxy format</span></span><br><span class="line">                <span class="keyword">if</span> _labels.size &gt; <span class="number">0</span>:</span><br><span class="line">                    labels[:, <span class="number">0</span>] = scale * _labels[:, <span class="number">0</span>] + padw</span><br><span class="line">                    labels[:, <span class="number">1</span>] = scale * _labels[:, <span class="number">1</span>] + padh</span><br><span class="line">                    labels[:, <span class="number">2</span>] = scale * _labels[:, <span class="number">2</span>] + padw</span><br><span class="line">                    labels[:, <span class="number">3</span>] = scale * _labels[:, <span class="number">3</span>] + padh</span><br><span class="line"></span><br><span class="line">                mosaic_labels.append(labels)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(mosaic_labels):</span><br><span class="line">                mosaic_labels = np.concatenate(mosaic_labels, <span class="number">0</span>)</span><br><span class="line">                np.clip(mosaic_labels[:, <span class="number">0</span>], <span class="number">0</span>, <span class="number">2</span> * input_w, out=mosaic_labels[:, <span class="number">0</span>])</span><br><span class="line">                np.clip(mosaic_labels[:, <span class="number">1</span>], <span class="number">0</span>, <span class="number">2</span> * input_h, out=mosaic_labels[:, <span class="number">1</span>])</span><br><span class="line">                np.clip(mosaic_labels[:, <span class="number">2</span>], <span class="number">0</span>, <span class="number">2</span> * input_w, out=mosaic_labels[:, <span class="number">2</span>])</span><br><span class="line">                np.clip(mosaic_labels[:, <span class="number">3</span>], <span class="number">0</span>, <span class="number">2</span> * input_h, out=mosaic_labels[:, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            mosaic_img, mosaic_labels = random_perspective(</span><br><span class="line">                mosaic_img,</span><br><span class="line">                mosaic_labels,</span><br><span class="line">                degrees=self.degrees,</span><br><span class="line">                translate=self.translate,</span><br><span class="line">                scale=self.scale,</span><br><span class="line">                shear=self.shear,</span><br><span class="line">                perspective=self.perspective,</span><br><span class="line">                border=[-input_h // <span class="number">2</span>, -input_w // <span class="number">2</span>],</span><br><span class="line">            )  <span class="comment"># border to remove</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># -----------------------------------------------------------------</span></span><br><span class="line">            <span class="comment"># CopyPaste: https://arxiv.org/abs/2012.07177</span></span><br><span class="line">            <span class="comment"># -----------------------------------------------------------------</span></span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                self.enable_mixup</span><br><span class="line">                <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">len</span>(mosaic_labels) == <span class="number">0</span></span><br><span class="line">                <span class="keyword">and</span> random.random() &lt; self.mixup_prob</span><br><span class="line">            ):</span><br><span class="line">                mosaic_img, mosaic_labels = self.mixup(mosaic_img, mosaic_labels, self.input_dim)</span><br><span class="line">            <span class="comment"># mix_img, padded_labels = self.preproc(mosaic_img, mosaic_labels, self.input_dim)</span></span><br><span class="line">            img_info = (mosaic_img.shape[<span class="number">1</span>], mosaic_img.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            draw_box(</span><br><span class="line">                mosaic_img, mosaic_labels[:, :<span class="number">4</span>],</span><br><span class="line">                classes=mosaic_labels[:, -<span class="number">1</span>],</span><br><span class="line">                category_index=self._dataset.num2name,</span><br><span class="line">                scores=np.ones(shape=(<span class="built_in">len</span>(mosaic_labels[:, -<span class="number">1</span>]))),</span><br><span class="line">                thresh=<span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># 想怎么输出怎么输出</span></span><br><span class="line">            <span class="keyword">return</span> mosaic_img, mosaic_labels,img_info</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img, target = self._dataset.pull_item(idx)</span><br><span class="line">            <span class="comment"># img, label = self.preproc(img, label, self.input_dim)</span></span><br><span class="line">            <span class="keyword">return</span> img, target</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mixup</span>(<span class="params">self, origin_img, origin_labels, input_dim</span>):</span></span><br><span class="line">        jit_factor = random.uniform(*self.mixup_scale)</span><br><span class="line">        FLIP = random.uniform(<span class="number">0</span>, <span class="number">1</span>) &gt; <span class="number">0.5</span></span><br><span class="line">        cp_labels = []</span><br><span class="line">        img=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(cp_labels) == <span class="number">0</span>:</span><br><span class="line">            cp_index = random.randint(<span class="number">0</span>, self.__len__() - <span class="number">1</span>)</span><br><span class="line">            img,target = self._dataset.pull_item(cp_index)</span><br><span class="line">            cp_labels=target[<span class="string">&#x27;labels&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        draw_box(img,cp_labels[:,:<span class="number">4</span>],cp_labels[:,-<span class="number">1</span>],self._dataset.num2name,scores=np.ones(<span class="built_in">len</span>(cp_labels[:,-<span class="number">1</span>])))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(img.shape) == <span class="number">3</span>:</span><br><span class="line">            cp_img = np.ones((input_dim[<span class="number">0</span>], input_dim[<span class="number">1</span>], <span class="number">3</span>), dtype=np.uint8) * <span class="number">114</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cp_img = np.ones(input_dim, dtype=np.uint8) * <span class="number">114</span></span><br><span class="line"></span><br><span class="line">        cp_scale_ratio = <span class="built_in">min</span>(input_dim[<span class="number">0</span>] / img.shape[<span class="number">0</span>], input_dim[<span class="number">1</span>] / img.shape[<span class="number">1</span>])</span><br><span class="line">        resized_img = cv2.resize(</span><br><span class="line">            img,</span><br><span class="line">            (<span class="built_in">int</span>(img.shape[<span class="number">1</span>] * cp_scale_ratio), <span class="built_in">int</span>(img.shape[<span class="number">0</span>] * cp_scale_ratio)),</span><br><span class="line">            interpolation=cv2.INTER_LINEAR,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        cp_img[</span><br><span class="line">            : <span class="built_in">int</span>(img.shape[<span class="number">0</span>] * cp_scale_ratio), : <span class="built_in">int</span>(img.shape[<span class="number">1</span>] * cp_scale_ratio)</span><br><span class="line">        ] = resized_img</span><br><span class="line"></span><br><span class="line">        cp_img = cv2.resize(</span><br><span class="line">            cp_img,</span><br><span class="line">            (<span class="built_in">int</span>(cp_img.shape[<span class="number">1</span>] * jit_factor), <span class="built_in">int</span>(cp_img.shape[<span class="number">0</span>] * jit_factor)),</span><br><span class="line">        )</span><br><span class="line">        cp_scale_ratio *= jit_factor</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> FLIP:</span><br><span class="line">            cp_img = cp_img[:, ::-<span class="number">1</span>, :]</span><br><span class="line"></span><br><span class="line">        origin_h, origin_w = cp_img.shape[:<span class="number">2</span>]</span><br><span class="line">        target_h, target_w = origin_img.shape[:<span class="number">2</span>]</span><br><span class="line">        padded_img = np.zeros(</span><br><span class="line">            (<span class="built_in">max</span>(origin_h, target_h), <span class="built_in">max</span>(origin_w, target_w), <span class="number">3</span>), dtype=np.uint8</span><br><span class="line">        )</span><br><span class="line">        padded_img[:origin_h, :origin_w] = cp_img</span><br><span class="line"></span><br><span class="line">        x_offset, y_offset = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> padded_img.shape[<span class="number">0</span>] &gt; target_h:</span><br><span class="line">            y_offset = random.randint(<span class="number">0</span>, padded_img.shape[<span class="number">0</span>] - target_h - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> padded_img.shape[<span class="number">1</span>] &gt; target_w:</span><br><span class="line">            x_offset = random.randint(<span class="number">0</span>, padded_img.shape[<span class="number">1</span>] - target_w - <span class="number">1</span>)</span><br><span class="line">        padded_cropped_img = padded_img[</span><br><span class="line">            y_offset: y_offset + target_h, x_offset: x_offset + target_w</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        cp_bboxes_origin_np = adjust_box_anns(</span><br><span class="line">            cp_labels[:, :<span class="number">4</span>].copy(), cp_scale_ratio, <span class="number">0</span>, <span class="number">0</span>, origin_w, origin_h</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> FLIP:</span><br><span class="line">            cp_bboxes_origin_np[:, <span class="number">0</span>::<span class="number">2</span>] = (</span><br><span class="line">                origin_w - cp_bboxes_origin_np[:, <span class="number">0</span>::<span class="number">2</span>][:, ::-<span class="number">1</span>]</span><br><span class="line">            )</span><br><span class="line">        cp_bboxes_transformed_np = cp_bboxes_origin_np.copy()</span><br><span class="line">        cp_bboxes_transformed_np[:, <span class="number">0</span>::<span class="number">2</span>] = np.clip(</span><br><span class="line">            cp_bboxes_transformed_np[:, <span class="number">0</span>::<span class="number">2</span>] - x_offset, <span class="number">0</span>, target_w</span><br><span class="line">        )</span><br><span class="line">        cp_bboxes_transformed_np[:, <span class="number">1</span>::<span class="number">2</span>] = np.clip(</span><br><span class="line">            cp_bboxes_transformed_np[:, <span class="number">1</span>::<span class="number">2</span>] - y_offset, <span class="number">0</span>, target_h</span><br><span class="line">        )</span><br><span class="line">        keep_list = box_candidates(cp_bboxes_origin_np.T, cp_bboxes_transformed_np.T, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> keep_list.<span class="built_in">sum</span>() &gt;= <span class="number">1.0</span>:</span><br><span class="line">            cls_labels = cp_labels[keep_list, <span class="number">4</span>:<span class="number">5</span>].copy()</span><br><span class="line">            box_labels = cp_bboxes_transformed_np[keep_list]</span><br><span class="line">            labels = np.hstack((box_labels, cls_labels))</span><br><span class="line">            origin_labels = np.vstack((origin_labels, labels))</span><br><span class="line">            origin_img = origin_img.astype(np.float32)</span><br><span class="line">            origin_img = <span class="number">0.5</span> * origin_img + <span class="number">0.5</span> * padded_cropped_img.astype(np.float32)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> origin_img.astype(np.uint8), origin_labels</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># vocdataset=VocDataSet(voc_root=r&#x27;E:\py_exercise\Dataset\pear_dataset\voc&#x27;,)</span></span><br><span class="line">    vocdataset=VocDataSet(</span><br><span class="line">        voc_root=<span class="string">r&#x27;E:\py_exercise\deep-learning-for-image-processing\pytorch_object_detection\faster_rcnn\taboca\Tobacco&#x27;</span>,</span><br><span class="line">        image_folder_name=<span class="string">&#x27;JPEGImages&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    dataset=MasaicDataset(</span><br><span class="line">        dataset=vocdataset,</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">next</span>(<span class="built_in">iter</span>(dataset))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021数模国赛反思</title>
      <link href="/p/49629.html"/>
      <url>/p/49629.html</url>
      
        <content type="html"><![CDATA[<p>国赛已经过去一天了，评分细则也出来了，没有看评分细则时信心满满，看完之后就暴毙gg。</p><p>我们选的是C题，C题最关键的就是预测24周而评分细则说预测24周要结合前一天的订货和供货。</p><p>我们直接头铁莽供货量，用LSTM预测，虽然结果看起来还行。</p><p><del>因为使用ARIMA效果并不好，这种数据似乎不能用这个预测，不知别人是怎么做出来的，也可能单纯是我菜</del></p><p>目标函数本来是两个阶段的（我解的步骤是分两个阶段，但是论文列出来并不是，也不知道是好是坏）</p><p>最最最拉跨的就是没有分析第三问方案变动和第二问的区别….然后图还错位了两个。</p><p>第一次打<del>也可能是最后一次</del> 缺乏经验，也没有用程序检查最后结果的正确性（因为维度转换也可能是会错的）</p><p>总之就是gg了，国奖无了。</p><p>最后是省一，大概看了优秀论文，一三问方法都差不多，第二问有点不同，可能是图少了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Long Tail Classification Review</title>
      <link href="/p/27272.html"/>
      <url>/p/27272.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    暑假的比赛数据集分类极度不平衡，最多的有两万，最少的只有50多，因为是NLP，我个人是通过调百度接口回译来拓展数据集，耗时耗力还可能没效果。勉强将最少类别拓展到了5000，再重采样train的效果还行，最后还用伪标签训练了一波（这个稳定提升0.1%<del>因为是测试集上过拟合</del>）有大佬带飞最后也就第5名 <del>差一名就有3000rmb了</del></p><p>但是数据不均衡这类问题总是很关键and常见（这类也被称为Long Tail Classification）故在此学习记录，日后实现过的会继续贴详细代码，当然遇到trick也会在此记录。    </p><p><del>现在主要都是从<a href="https://www.zhihu.com/question/372186043">知乎回答</a>里总结出来的。</del></p><h1 id="数据处理方法"><a href="#数据处理方法" class="headerlink" title="数据处理方法"></a>数据处理方法</h1><h2 id="数据增强类"><a href="#数据增强类" class="headerlink" title="数据增强类"></a>数据增强类</h2><h3 id="重采样"><a href="#重采样" class="headerlink" title="重采样"></a>重采样</h3><p>重采样是最简单和常见的方法了，但是越简单缺点越明显。</p><p>单纯的重采样：</p><ul><li>少样本过采样，多样本欠采样。pandas.sample可以很方便实现</li><li>缺点是导致样本过多特征丢失，样本过少会过拟合，且数量差别越大缺点越明显。</li></ul><p>但是仍有许多在此基础上改进的算法比如SMOTE<del>见下文</del></p><h3 id="SMOTE"><a href="#SMOTE" class="headerlink" title="SMOTE"></a>SMOTE</h3><p>参考<a href="https://zhuanlan.zhihu.com/p/275744968">知乎</a></p><p>基本算法流程：</p><ul><li>通过KNN寻找当前需要拓展点最近的K个点，随机0，1权重</li><li>新的点为K个点*权重平均</li></ul><p>看似简单弊端很多，但是通过时间的‘洗礼’现在也渐渐变的成熟了，比如不再通过原始数据KNN，而是通过特征数据KNN。最后附上sklearn已经封装好的SMOTE的<a href="https://github.com/scikit-learn-contrib/imbalanced-learn">Github</a></p><h3 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h3><p>​    在NLP中可以通过提取近义词、关键字、回译来生成新的数据，来增加少数据<del>这就是我2021.8.1比赛用的方法</del></p><p>高端点可以使用Gan或者其他半监督自监督模型<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/abs/2009.12991">Long-Tailed Classification by Keeping the Good and Removing the Bad Momentum Causal Effect</a>诸如此类。</p><p><del>论文还是看少了啊</del></p><h3 id="Mosaic"><a href="#Mosaic" class="headerlink" title="Mosaic"></a>Mosaic</h3><p>​    这个在ultralytics-YOLOv3被提出（有撞车现象），<strong>在CV方向中</strong>，<strong>小目标的AP</strong>一般比中目标和大目标低很多。虽然数据集中也包含大量的小目标类别，但比较麻烦的是小目标的分布<strong>并不均匀</strong> <del>也可以看作BBox类别不均衡</del>。</p><p>​    Mosaic要随机使用<strong>x张图片</strong>，随机缩放，再随机分布进行拼接，大大丰富了检测数据集，特别是随机缩放增加了很多小目标，让网络的鲁棒性更好。由于拼接图像的挑选组合是随机的，拼接图像的多样性防止了过拟合的发生。<del>可以提升1%</del></p><p>​    然后对loss设置一个阈值，如果小于这个阈值则采用拼接后的数据训练一个iterater否则采用原来数据训练一个iterater<a href="https://www.zhihu.com/question/390191723?rf=390194081">具体可参考Stitcher</a>，代码分析可以看另一篇</p><h3 id="Mix-up"><a href="#Mix-up" class="headerlink" title="Mix up"></a>Mix up</h3><p>​    <strong>同样是CV方向</strong>，先读取一张图片，图像两侧填充，缩放到640*640大小，即Image_1，假设人脸检测框为红色框。再随机选取一张图片，图像上下填充，也缩放到640*640大小，即Image_2，假设人脸检测框为蓝色框。然后设置一个融合系数，比如上图中，设置为0.5，将Image_1和Image_2，加权融合，得到最终Image。最终的Image<strong>人脸的红色框和蓝色框是叠加存在的。</strong></p><p>​    在训练的<strong>最后15个epoch</strong>，这Mix up，mosaic会被关闭掉<del>不追求sota不关应该也没大问题吧</del>。而在此之前，Mosaic和Mixup数据增强，都是打开的，这个细节需要注意。由于采取了更强的数据增强方式，作者在研究中发现，<strong>ImageNet预训练将毫无意义</strong>，因此，所有的模型，均是从头开始训练的。<a href="https://zhuanlan.zhihu.com/p/397993315">参考知乎yolox讲解</a></p><h3 id="困难样本挖掘"><a href="#困难样本挖掘" class="headerlink" title="困难样本挖掘"></a>困难样本挖掘</h3><p>OHEM(online hard negative/example mining)听说是度量学习常用的方法。<del>我也没学过</del></p><p>但是hard negative/example mining 你肯定听说过（RCNN里使用的）。</p><p>具体思想是先正负样本均衡训练一遍，再预测负样本，将hard negative分离出来加入负样本训练集中再重新训练。<del>大众比喻是错题集针对训练</del></p><h2 id="模型类"><a href="#模型类" class="headerlink" title="模型类"></a>模型类</h2><h3 id="focal-loss"><a href="#focal-loss" class="headerlink" title="focal loss"></a>focal loss</h3><p>​    对于每一类出现的概率可能会不相同，直接修改loss函数，对loss进行加权，详情可见论文<a href="https://arxiv.org/pdf/1708.02002.pdf">Focal Loss for Dense Object Detection</a></p><p>简单可以表示为</p><script type="math/tex; mode=display">FL=\sum_{t=1}^{n}-\alpha(1-p_t)^\gamma logp_t</script><p>$\gamma$​，$\alpha$​为超参数，一般为1</p><h3 id="模型融合"><a href="#模型融合" class="headerlink" title="模型融合"></a>模型融合</h3><p><del>对，模型融合也能降bias</del></p><p>模型融合最基本的就是投票法了，容易实现的效果都可见一般。</p><p>另一个就是使用最广泛的加权投票：先权重加权再相加，选取概率最大的，个人实验平均加权就投票多了0.3%。</p><p>当然这里面也有各种trick，比如有最简单的<a href="https://arxiv.org/abs/1806.00194">按照类别数目的倒数来做加权</a>，<a href="https://arxiv.org/abs/1901.05555v1">按照“有效”样本数加权</a>，<a href="https://arxiv.org/abs/1906.07413v2">根据样本数优化分类间距的loss加权</a>（个人感觉不太行）等等。对于这类方法，还可以用bayesian对每个样本做uncertainty估计，来<a href="https://arxiv.org/abs/1901.07590">refine决策边界</a>，再或者后面接一个线性回归层自己训练。这类方法目前应该是使用的最广泛的，可以看一下这个<a href="https://arxiv.org/abs/1505.01658">2015年的survey paper</a>，<del>但是哪一类最有效我也还没全试过</del></p><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><blockquote><p> <strong>解耦特征和分类器（decoupling representation &amp; classifier）</strong>：最近的研究发现将特征学习和分类器学习解耦，把不平衡学习分为两个阶段，在特征学习阶段正常采样，在分类器学习阶段平衡采样，可以<a href="https://arxiv.org/abs/1912.02413v1">带来更好的长尾学习结果</a></p></blockquote><div class="tip info"><p>To be Continued</p></div><p><del>读论文去了</del></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> trick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【论文】深度学习CV方向论文解读</title>
      <link href="/p/61340.html"/>
      <url>/p/61340.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文章通过时间轴来按顺序整理CV方向的经典paper的优势和该paper对之前的改进以及个人吐槽。</p><p>每篇paper主要从网络架构和数据增强两方面来分析学习trick。</p><div class="tip warning"><p>个人哔哔纯属吐槽，不具有专业性分析参考</p></div><p>PS：paper的时间按照arxiv最后时间为准，不代表论文<strong>最初</strong>发表时间。<del>因为我也被弄糊涂了</del></p><hr><p>后来发现要写的论文很多，都放在一篇文章不太合适<del>不好水博客啊</del>，以后就分开写算了，这样每篇篇幅也能更长一点。<del>发现自己很容易就忘记之前总结的东西</del></p><div class="timeline"><div class="timenode"><div class="meta"><p><p>2012 Alexnet Author<strong>：</strong>Alex Krizhevsky</p></p></div><div class="body"><h1 id="Alex-Net"><a href="#Alex-Net" class="headerlink" title="Alex Net"></a>Alex Net</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><p>将饱和非线性神经元（tanh，sigmod）换为了非饱和非线性神经元：<strong>训练快了6倍</strong></p><blockquote><p>由于sigmod激活 ，如果hidden layer越来越小，梯度弥散，</p><p>如果前面hidden layer 越来越大，则会导致梯度爆炸。</p></blockquote></li><li><p>使用LRN（local response normalization）局部响应归一化：<strong>有助于快速收敛，增加泛化能力</strong></p><blockquote><p><strong>侧抑制（lateral inhibitio），即指被激活的神经元抑制相邻的神经元。</strong>归一化（normaliazation）的目的就是<strong>“抑制”</strong>,LRN就是借鉴这种侧抑制来实现局部抑制，尤其是我们使用ReLU的时候，这种“侧抑制”很有效 ，由于ReLU的相应结果是无界的，所以需要归一化。</p></blockquote><p>  <del>LRN因为不提高准确率参数量还很多，被VGG抛弃</del></p></li><li><p>空间池化部分：采用重叠池化（overlap pooling）</p><blockquote><p> Overlap Pooling ：通过设置步长s小于池化的kernel size z，重复使用平均池化，更难过拟合。</p></blockquote></li><li><p>dropout：<strong>减少过拟合</strong></p><p>  ​    算是现在很常见的一个东西了，不过有normalization layer后就没怎么用了。</p></li></ul><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><ul><li><p>随机裁剪+镜像反射：提高准确率</p><p>  通过对图像（255，255，3）四个角为中心进行随机裁剪（224，224，3）的图像，然后再水平翻转得到10张图像，通过softmax层后求precision的平均。</p></li><li><p>主成分提取PCA：减少了top-1 error 1%</p><blockquote><p>在整个ImageNet训练集上对RGB像素值执行PCA。对于每幅图像加上多倍找到的主成分，大小成正比的对应特征值乘以一个随机变量，随机变量通过均值为0，标准差为0.1的高斯分布得到。</p></blockquote></li></ul></div></div><div class="timenode"><div class="meta"><p><p>2014.2.24 Overfeat Author: Pierre Sermanet</p></p></div><div class="body"><h1 id="Overfeat"><a href="#Overfeat" class="headerlink" title="Overfeat"></a>Overfeat</h1><p>这篇算法没有完整的流程图，没怎么看懂怎么实现的，无法细讲。</p><p>似乎是通过回归来预测bounding box的位置？</p><p>我主要问题是加滑动窗口pool是训练集就有吗？</p><p>分类和定位是同时的话是网络再并联一个1*1卷积提取bbox参数回归？如果是这样感觉类似后面的decouple head思想。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>网络功能分为三个部分：分类（特征提取）、定位、检测。</p><ul><li><p>滑动窗口提取特征：因为考虑后面的定位和检测，没有像AlexNet把输入图像分五份随机裁剪再水平翻转：</p><blockquote><p>因为这样会打乱图片的空间特征（和以前的全连接层一样，被改进为卷积也有部分原因是强调图片空间特征），所以使用’’暴力”裁剪，stride分别为0，1，2移动，裁剪图片作为输入。这个窗口类似kernel只不过相当于裁剪？</p></blockquote></li><li><p>根据前5层layer进行特征提取共享特征权重，后面接上进行分类和定位的区分全连接层。</p></li><li><p>定位：根据每个窗口裁剪出来的图片先分类，再回归bbox，预测的bbox iou&lt;50%为FP</p></li></ul><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>​    <del>好家伙，发现对比图里面居然有vgg，时间线被搞错乱了，难道vgg才是1*1卷积代替全连接的开山鼻祖？</del></p><p>​    注意这篇论文不是sota！这里我个人认为是由于AlexNet为网络架构（太浅了）更难提升准确率，所以文章说的时间限制应该是说没有时间尝试其他的模型。</p><p>​    这个类似遍历的方式裁剪图片|获取特征注定了复杂度会很高，将来会有更好的算法替代（如后篇的SS）</p></div></div><div class="timenode"><div class="meta"><p><p>2014.3.4 Network in Network Author: Min Lin</p></p></div><div class="body"><h1 id="NIN"><a href="#NIN" class="headerlink" title="NIN"></a>NIN</h1><ul><li>介绍了多层感知机(mutilayer perceptrons)和线性激活函数，全连接层的劣势：线性函数针对特定函数才能近似不具有通用性，全连接层太容易过拟合，可解释性低。</li><li>基于maxout net提出MLP conv：先在原始两个卷积层中多插入一个MLP层进行非线性提取特征，共享MLP层权重也使模型有更高的表达能力，然后在后面加个非线性函数relu。使凸函数近似变成通用函数近似。</li><li>提出全局平均池化GAP(global average pooling)：原来的fc层因为要训练超参数容易过拟合，替换为GAP后直接取特征图的平均，也将特征图和类别联系了起来，而且没有超参数的训练，减少了过拟合和增加了模型的可解释性，还不用dropout(然后被googlenet打脸了)</li></ul><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>这篇论文是解决了fc层解释性差和fc层的过拟合问题，把卷积替换全连接怕不是借鉴了别人（感觉这篇和overfeat很像但是侧重点不同，时间线仍然错乱）。</p><p>下面解释一下为什么能够替换，参考<a href="https://blog.csdn.net/nefetaria/article/details/107977597">这篇1*1 conv 介绍</a>，和<a href="https://blog.csdn.net/weixin_41137655/article/details/94138062">这篇mlp conv</a></p><p>先看如下两张图</p><div class="tabs" id="pic"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pic-1">图片1</button></li><li class="tab"><button type="button" data-href="#pic-2">图片2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pic-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210906152152.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pic-2"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210906193238.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>手动计算一下图二输入层数：</p><div class="table-container"><table><thead><tr><th>No.</th><th>Intput Size</th><th style="text-align:center">conv</th><th style="text-align:center">stride</th><th style="text-align:center">padding</th><th style="text-align:center">Output Size</th></tr></thead><tbody><tr><td>1</td><td>224*224*3</td><td style="text-align:center">11*11*96</td><td style="text-align:center">4</td><td style="text-align:center">3</td><td style="text-align:center">55*55*96</td></tr><tr><td>2</td><td>55*55*96</td><td style="text-align:center">1*1*96</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">55*55*96</td></tr><tr><td>3</td><td>55*55*96</td><td style="text-align:center">1*1*96</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">55*55*96</td></tr></tbody></table></div><p>由图1可见mlp conv就是加几个hidden layer 然后relu，输出和输入通道数不变，只增加了非线性性。同图2和上面推导，1<em>1卷积也可以实现上述功能，但是1\</em>1卷积也可不只实现上述功能。</p><ul><li>当1*1卷积通道数不变时+relu，则起到的是mlp conv作用。</li><li>当1*1卷积通道数不等于输入维度时，起到升维降维作用（降低参数量）。</li><li>当1*1卷积通道数等于分类数则是替代全连接层（前面一层会将输入变为1*1*channel，然后再是1*1*n_class的卷积）</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2014.10.22 R-CNN Author<strong>：</strong>Ross Girshick</p></p></div><div class="body"><h1 id="RCNN"><a href="#RCNN" class="headerlink" title="RCNN"></a>RCNN</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><p>提出迁移学习：在大数据集上进行有监督预训练，然后针对特定数据集进行微调（提升了8%！！！）</p></li><li><p>采样selective search算法搜索region proposal：region proposal算法包含很多种，SS算法是最受欢迎的一种之一。</p><blockquote><p>Selective Search 源码分析，<a href="https://github.com/AlpacaDB/selectivesearch">python源码github <del>非官方</del></a>:</p><ol><li>先通过图像分隔（skimage.segmentation.felzenszwalb）将图片每一个pixel分到一个label（label是唯一的），第一次先遍历这些pixel得到区域信息，区域是矩形划分的。</li><li>再求出每个区域之间的texure gradient，color histogarm，region size相似度，如果区域相邻且相似则合并（相似是通过判断区域矩形是否相交）。</li><li>重复上述步骤。</li></ol><p>可以看出SS是通过先分隔再不停遍历来求出BBox的，复杂度比然很高，而且图片越大越难搞</p></blockquote></li><li><p>借鉴了A Deep Convolutional Activation Feature for Generic Visual Recognition把Alexnet当backbone用来提取特征的思想。</p></li><li><p>只把卷积作为提取特征的工具，最后一层分类使用的是svm，每一类都用一个svm。</p></li><li><p>分类的时候不光分类了种类，还将背景单独分了一类。（如今的two filter的启发可能来于这）</p></li><li><p>困难负样本挖掘（hard negative mining）:因为detect会有很多负样本，正负样本不均衡。<del>这也是目标识别的一大通病</del>，所以要增加负样本的’’质量’’ 。</p><blockquote><p><strong>hard negative就是每次把那些顽固的棘手的错误,再送回去继续练,练到你的成绩不再提升为止.这一个过程就叫做’hard negative mining.</strong><a href="https://www.zhihu.com/question/46292829">具体可以参考知乎</a></p></blockquote></li><li><p>使用不同网络做backbone效果会有差别，把VGG和AlexNet对比：map增加了8%，训练时间长了7倍。</p></li></ul><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><ul><li><p>先固定图像尺寸为500pixels，然后再输入到ss算法中</p></li><li><p>由于backbone为AlexNet，ss的输出大小都是不同的要将图像变为224*224的大小输入，scale采用的方法如下：</p><blockquote><ol><li>tightest square with context：是指在原始图像上找到这样一个可以包含整个proposal 的最小的正方形，然后将这个正方形 <em>rescale</em> 为卷积网络可以接受的尺寸</li><li>tightest square without context</li><li>warp：直接rescale到输入尺寸</li></ol></blockquote></li></ul><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>​    提出预训练和backbone的思想，region proposal使用ss提取，算法复杂度注定了还有改进空间，svm分类后来也被换为了卷积。然后就是hard negative mining <del>不会过拟合吗</del>。</p><p>​    论文说和overfeat很相似，但是overfeat是rcnn的特例，只是RCNN是每一类用svm分离和每一类都有一个bbox的回归</p><p>​    这几篇代码都是matlab或C++写的，我刚好就是看不惯matlab。     <del>matlab果然是上个时代的产物</del></p></div></div><div class="timenode"><div class="meta"><p><p>2014.9.17 GoogleNet Author: Christian Szegedy</p></p></div><div class="body"><h1 id="Google-Net"><a href="#Google-Net" class="headerlink" title="Google Net"></a>Google Net</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><p>在1*1卷积降维基础上为了保留压缩信息提出了deep concat。</p></li><li><p>NIN 说GAP可以不用dropout，但是googlenet网络最后还是用了。</p></li><li><p>目标检测方面借鉴了RCNN的SS搜索：<del>突然看到RCNN猝不及防</del></p><blockquote><p>通过ensemble 6个ConvNets 对每个proposal region进行分类，提高了近4个百分点，但是由于时间原因使用Bounding box回归。</p></blockquote></li></ul><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>​    个人觉得提出了deep concat是一个很好的创新点，因为每一个新的网络模型都能带来不同的思想方向，比如说后面的dw卷积说没有受到这篇的启发是不可能的。</p><p><del>从这篇也看到了1*1卷积应用广泛，后面就不再单独提这个了</del></p></div></div><div class="timenode"><div class="meta"><p><p>2015.4.10 <strong>Fully Convolutional Network</strong> Author：Jonathan Long</p></p></div><div class="body"><h1 id="FCN"><a href="#FCN" class="headerlink" title="FCN"></a>FCN</h1><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>​    如果目前时间顺序是对的话，个人感觉这篇没什么，全连接用卷积替代早在前面几篇就有所端倪了，不过是整合并证明了一下。<del>也可能是我理论基础不太行，看不懂毕竟这篇几乎算图像分割的开山之作了</del></p><p>​    但是文章中出现了新词patch-wise（虽然文中说也可以不用patch-wise）：<a href="https://stackoverflow.com/questions/42636685/patch-wise-training-and-fully-convolutional-training-in-fcn">这篇stackoverflow</a>关于patch-wise回答的挺好，可以看看：</p><blockquote><p>术语“Patchwise ”旨在避免完整图像训练的冗余。在语义分割中，假设您对图像中的每个像素进行分类，通过使用整个图像，您在输入中添加了大量冗余。在训练分割网络期间避免这种情况的标准方法是从训练集中向网络提供批量随机补丁（感兴趣对象周围的小图像区域）而不是完整图像。这种“逐块采样”确保输入具有足够的方差并且是训练数据集的有效表示（小批量应该与训练集具有相同的分布）。这种技术还有助于更快地收敛并平衡类。在这篇论文中，他们声称没有必要使用 patch-wise 训练，如果你想平衡类，你可以对损失进行加权或采样。从另一个角度来看，逐像素分割中的全图像训练的问题在于输入图像具有很多空间相关性。要解决此问题，您可以从训练集中采样补丁（patchwise 训练）或从整个图像中采样损失。这就是为什么该小节被称为“Patchwise training is loss sampling”。因此，通过“将损失限制为其空间项的随机采样子集，可以从梯度计算中排除补丁。”他们通过随机忽略最后一层的单元来尝试这种“损失采样”，因此不会在整个图像上计算损失。</p></blockquote></div></div><div class="timenode"><div class="meta"><p><p>2015.4.10 VGG <strong>Author</strong>：<strong>Karen Simonyan </strong></p></p></div><div class="body"><h1 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><p>吸收Alexnet经验，激活层全部换成relu。</p></li><li><p>大部分没有使用LRN（只用了一层）：在imagenet 准确率没有提高，还带有很高的参数。</p></li><li><p>更多的使用更小的卷积（3*3）：减少参数量的同时使网络更深，表达能力更强。</p><blockquote><p>两个3*3卷积感受野与一个5*5 卷积相同，三个3*3卷积感受野与7*7相同，但是相比之下用更小的卷积核参数量更少。而且两个3*3卷积强迫7*7卷积分开，中间的非线性激活相当于之前的正则化层。</p></blockquote></li><li><p>使用1*1卷积：与线性层本质和效果相同，起到代替全连接层，更快的运算的效果。</p></li><li><p>空间池化部分：没有使用平均池化，全部使用最大池化层。</p></li></ul><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><ul><li>随机采样+镜像翻转</li><li>没有像AlexNet用PCA，而是图像减去rgb平均值来消除光照影响。</li></ul><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>单从论文写作的角度来说VGG与AlexNet没有说每一步trick增加的准确率，所以个人认为VGG更多的是网络架构优势：小卷积多卷。<del>而不是池化等trick</del>。ILSVRC以top-5 error <strong>6.8%</strong>排第二也是惨，被谷歌截胡了。</p><p>感受野确实很难理解，下面简单介绍一下，具体意义可以<a href="https://blog.csdn.net/u013000248/article/details/91493032">参考这篇</a></p><p>感受野计算公式：</p><script type="math/tex; mode=display">RF_i=(RF_{i-1}-1)*\Pi_{k=1}^{k=i-1}stride_k+kernel\_size</script><p><strong>第一层感受野为kernel size，即$RF_0$=1</strong> ，由上可见该层感受野与该层stride无关</p><p>输出层size计算公式：</p><script type="math/tex; mode=display">n_{out}=\lfloor{\frac{(n_{in}+2*padding-kernel)}{stride}}\rfloor+1</script><p>其实这两个公式是卷积和反卷积的过程，本质是相同的。</p><p>感受野是从最后一层向上逆推，输出size则是从输入向下正推。</p><div class="table-container"><table><thead><tr><th style="text-align:center">No.</th><th style="text-align:center">Layer</th><th style="text-align:center">input size</th><th style="text-align:center">kernel size</th><th style="text-align:center">stride</th><th style="text-align:center">padding</th><th style="text-align:center">output size</th><th style="text-align:center">Receptive Field(感受野)</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">conv</td><td style="text-align:center">28*28</td><td style="text-align:center">3*3</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">26</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">conv</td><td style="text-align:center">24*24</td><td style="text-align:center">3*3</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">24</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">conv</td><td style="text-align:center">22*22</td><td style="text-align:center">3*3</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">22</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">conv</td><td style="text-align:center">20*20</td><td style="text-align:center">3*3</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">20</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">conv</td><td style="text-align:center">18*18</td><td style="text-align:center">3*3</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">18</td><td style="text-align:center">11</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">conv</td><td style="text-align:center">28*28</td><td style="text-align:center">5*5</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">24</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">conv</td><td style="text-align:center">28*28</td><td style="text-align:center">7*7</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">22</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">conv</td><td style="text-align:center">28*28</td><td style="text-align:center">11*11</td><td style="text-align:center">4</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div></div></div><div class="timenode"><div class="meta"><p><p>2015.5 Unet <strong>Author:Olaf Ronneberger</strong></p></p></div><div class="body"><h1 id="Unet"><a href="#Unet" class="headerlink" title="Unet"></a>Unet</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220111155605.png" style="height:50vh;"/></div></div><p>这个网络很简单，无非就是卷卷卷，然后concat。论文中有几点不是很方便：</p><ul><li><p>每次下采样的时候长宽维度会减小，concat的时候就会需要中心裁剪(示意图片中的虚线部分)然后再concat</p></li><li><p>最后生成的图片维度可以发现与原图片维度不同，这就代表输入图片不能简单的按patch输入还需额外处理，原文中是使用镜像来解决的。这里解释一下patch：</p><blockquote><p>通常一张超大图片都是分割成一张张小图片输入的（显存不够输入一张大图片），并且每张图片直接会有重叠(overlap)，以防边缘信息不被利用。</p></blockquote></li></ul><p>需要注意的是论文他没有使用padding，并且后面大火的batch normalization才刚出，论文中也没有使用。上采样采用的是转置卷积而不是现在常用的双线性插值。</p><p>现在大家通常修改了卷积层下采样的部分：增加padding使卷积后尺寸不变，也不用crop了。然后在卷积和relu直接加上BN层。并且用双线性插值<del>代码更好写且效果还变强了，当然自己魔改也可</del></p><p> 修改后的网络维度如下图(输入维度随便写的)： </p><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20220113160502.png" style="height:50vh;"/></div></div><h2 id="dice-loss"><a href="#dice-loss" class="headerlink" title="dice loss"></a>dice loss</h2><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><p>​    “当只有很少的训练样本可用时，数据增强是网络所需的不变性和鲁棒性的关键。我们需要的是旋转不变性，以及对变形和灰色值变化的鲁棒性。特别是训练样本的随机弹性变形似乎是训练分段的关键概念”<del>然而只是简单的使用随机位移向量处理了一下。</del></p><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>看到这个网络肯定有人会比较和FCN的区别，但是FCN相当于分割的开山鼻祖相似也没办法<del>我也觉得没什么大区别</del>。细节还是有的：</p><ul><li>fcn没有解决大图片的问题（我感觉这只是需求不同导致的，毕竟医学图像都很大）</li><li>fcn尺度不够多，只是一个尺度卷卷卷，没有使用FPN的想法。</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2015.12.10 ResNet Author:Kaiming He</p></p></div><div class="body"><h1 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><p>完全去掉了LRN、dropout，并采用BN（batch normalization）层替代：标准化，可以增强表达能力，防止过拟合。</p><blockquote><p>想象一个sigmod激活，当数据范围分布差异很大时，sigmod激活不能很好的表现出数据的差异，就像轻轻打你一拳和重重打你一拳感觉差不多，这是很糟糕的情况。batch normalization通过均值方差标准化能够很好的处理这种情况，并且最后还会scale shift 还原。BN层具体作用看<a href="https://zhuanlan.zhihu.com/p/93643523">这篇</a></p></blockquote></li><li><p><strong>增加残差结构</strong>：修正了深网络的梯度的问题。</p><blockquote><p>残差结构的好处就是，实现了一个恒等变换$h(x)=x$，这个恒等变换实际上是一个网络的目标函数，但是由于网络越深，虽然表达能力越强，但是梯度弥散和爆炸问题明显。所以本质上是解决梯度弥散和爆炸问题。可以理解为之前论文的加强正则化效果。</p></blockquote></li></ul><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><p>直接就把AlexNet和VGG结合了</p><ul><li><p>采用和AlexNet相同的数据增强方法：随机在图片里选取224*224大小图片，再镜像翻转。</p></li><li><p>采用和VGG相同的光照影响方法：减去rgb平均值</p><blockquote><p>The image is resized with its shorter side randomly sampled in [256, 480] for scale augmentation. A (224, 224) crop is randomly sampled from an image or its horizontal flip, with the per-pixel mean subtracted. </p><p>先依照短边随机缩放，然后再224*224采样，随机镜像翻转，最后减去rgb均值。</p><p>pytorch实现与原文有点不一样，注意一下。具体pytorch实现细节可以参考<a href="https://blog.csdn.net/FortiLZ/article/details/80851251">这篇</a></p></blockquote></li><li><p>使用10-crop test，提高准确率</p></li></ul><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>2015 ILSVRC top-5 error <strong>3.57%</strong>，直接拿第一。说明了残差网络确实nb，也算是解决了深度层网络的根本问题（梯度问题|恒等变换）。</p></div></div><div class="timenode"><div class="meta"><p><p>2017.6 <strong>Attention Is All You Need</strong> Author:Ashish Vaswani</p></p></div><div class="body"><h1 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h1><h2 id="论文解读"><a href="#论文解读" class="headerlink" title="论文解读"></a>论文解读</h2><p><del>原论文讲解的还是比较粗略，还是得看别人的讲解和图片，</del><a href="https://blog.csdn.net/qq_37541097/article/details/117691873">强烈推荐这篇</a>，我个人觉得我对attention还是理解不够，还不能写自己的理解。</p><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><h4 id="为什么使用muti-head"><a href="#为什么使用muti-head" class="headerlink" title="为什么使用muti head"></a>为什么使用muti head</h4><blockquote><p>关于different representation subspaces，举一个<em>不一定妥帖</em>的例子：当你浏览网页的时候，你可能在<strong>颜色</strong>方面更加关注深色的文字，而在<strong>字体</strong>方面会去注意大的、粗体的文字。这里的颜色和字体就是两个不同的表示子空间。同时关注颜色和字体，可以有效定位到网页中强调的内容。<strong>使用多头注意力，也就是综合利用各方面的信息/特征</strong>。</p></blockquote><h4 id="pos-embed是怎么实现的"><a href="#pos-embed是怎么实现的" class="headerlink" title="pos embed是怎么实现的"></a>pos embed是怎么实现的</h4><h4 id="attention为什么要加scaled"><a href="#attention为什么要加scaled" class="headerlink" title="attention为什么要加scaled"></a>attention为什么要加scaled</h4><blockquote><p>  参考这个回答 <a href="https://www.zhihu.com/question/339723385">https://www.zhihu.com/question/339723385</a></p></blockquote><p>数量级对softmax得到的分布影响非常大。<strong>在数量级较大时，softmax将几乎全部的概率分布都分配给了最大值对应的标签</strong></p><script type="math/tex; mode=display">设y=g(x)=softmax(x)\\\frac{dg(x)}{x}=\left[\begin{matrix}y1 ~ \dots ~ 0 \\\vdots ~ \ddots  ~ \vdots \\0 ~ \dots ~ y_n \\\end{matrix}\right ]-\left[\begin{matrix}y1^2 ~ y_1y_2 ~ \dots ~ y_1y_n \\\vdots ~ \ddots  ~ \vdots \\y_ny_1 ~ \dots ~ y_n^2 \\\end{matrix}\right ]</script><p>某个值很大时，其余都会很接近0(onehot 向量)，上式也就会很趋近于0。</p><p>所以对于如果多层堆叠</p><script type="math/tex; mode=display">假设\begin{cases}E(q)=E(k)=0 \\D(q)=D(k)=1 \\\end{cases}\rightarrow \begin{cases}E(qk)=E(q)*E(k)=0 \\D(qk)=D(q)*D(k)-[E(q)*E(k)]^2=1\end{cases} \\</script><p>令z=qk则有：</p><script type="math/tex; mode=display">\begin{cases}E(\sum z)=\sum E(z)=0 \\D(\sum z)=\sum D(z)=d  & d=embeding\_dim//head\_num=head\_dim\end{cases}</script><p>可知，当head_dim越大时方差越大，则最大值与最小值差距越大，就导致了上述的softmax梯度消失问题。</p><p>为将方差变为1，故self-attention公式如下</p><script type="math/tex; mode=display">attention=softmax(q@k*\sqrt{dim}^{-1})@v</script><p>此时</p><script type="math/tex; mode=display">D(qk)'=\frac{D(qk)}{\sqrt{dim}}=1</script><ul><li><p>为什么平常softmax并没有这一步呢？</p><blockquote><p>平常都是最后一层增加softmax，这时输出信号与我们需要的信号相差无几不用scale</p></blockquote></li><li><p>attention有add和muti，add需要scale吗？</p><blockquote><p>根据论文Massive Exploration of Neural Machine Translation Architectures，由于add是由tanh激活映射到[-1,1]，方差一般会在1之内，但是维度过大时（1000以上时）也需要scale。</p></blockquote></li></ul><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>​    我之前一直以为attention 和transformer是一个东西两个名字，好长一段后才知道这两个东西不一样…就和resnet与shortcut关系相似。attention只是transformer架构里的一个小模块。<del>并且这个小模块还包含很多不同名的attention</del></p><p>​    在此之前nlp迫于时间序列都是基于lstm，rnn在研究，attention机制出来之后，不仅解决了lstm，rnn并行计算的缺陷，还提出了一种全新的思想架构transformer，使不需要cnn，rnn也能有很好的效果。之后的vit，swin transformer甚至将nlp领域转移到图像分类领域，也体现了attention机制的泛用性，也算是机器学习的一个大变革了。<del>谷歌还是nb</del></p><p>​    但是随之影响到的肯定是我们这批穷鬼，attention的矩阵计算机制是通过全连接实现的（还记得线性回归吗，全连接就是矩阵相乘），参数量爆炸，没及几张好卡根本跑不动。<del>比谁卡多的时代终究来临</del></p><p>​    代码实现的时候发现要加载预训练权重必须按照官网的名称写，还要手写attention…，麻烦但很有收获。要注意一点，dropout rate全部都是0，如果不小心传入了默认参数验证集准确率可能会降低（很玄学,不过我也就在小数据集上训练了一个epoch，不代表广泛性仅个人记录)</p></div></div><div class="timenode"><div class="meta"><p><p>2021.7 <strong>Exceeding YOLO Series in 2021</strong> Author:Zheng Ge</p></p></div><div class="body"><h1 id="YoloX"><a href="#YoloX" class="headerlink" title="YoloX"></a>YoloX</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>（目前这些我没具体学，就不介绍了）</p><p>大致讲解见知乎<a href="https://zhuanlan.zhihu.com/p/397993315">这篇</a></p><ul><li>Anchor free：<del>可以参考<a href="https://www.cnblogs.com/xuanyuyt/p/13858661.html">这篇</a></del></li><li>SimOTA：</li><li>Muti positive</li><li>End-to-end Yolo</li></ul><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><p>可以参考<a href="https://dummerfu.top/p/27272.html">这篇</a></p><ul><li>Mosaic</li><li>Mix up</li></ul><p>加了这两个trick可以多2.9%AP就恐怖，赶快学着用起来。</p><h2 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h2><p>​    <del>感觉是钻Yolo的空子</del>，全篇都是各种trick，最后还说由于时间原因没有加最近transformer的成果trick，真是争分夺秒。个人觉得这篇文章基本上可以算是一篇综述了，因为我从这参考文献递归知道了许多论文，是不是和综述paper效果一样。<del>那我这篇不就是综述的综述了，害怕</del></p><p>​    不过能把别人的网络改成暂时的sota也是一种本事。<del>代码能力极强，像我这水平现在写个网络都不知道能不能写对</del></p></div></div></div><div class="tip info"><p>To be Continued</p></div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数模】2020B 穿越沙漠</title>
      <link href="/p/54346.html"/>
      <url>/p/54346.html</url>
      
        <content type="html"><![CDATA[<p>许久不见动态规划，没想到数模碰到了，就想水篇久违的题解。</p><p>至于为什么不放完整论文？<del>肯定是做的不是很好啦，话说原来数模出题人也会是ACMer吗</del></p><h1 id="穿越沙漠"><a href="#穿越沙漠" class="headerlink" title="穿越沙漠"></a>穿越沙漠</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>​    考虑如下的小游戏：玩家凭借一张地图，利用初始资金购买一定数量的水和食物（包括食品和其他日常用品），从起点出发，在沙漠中行走。途中会遇到不同的天气，也可在矿山、村庄补充资金或资源，目标是在规定时间内到达终点，并保留尽可能多的资金。</p><p>游戏的基本规则如下：</p><p>（1）以天为基本时间单位，游戏的开始时间为第0天，玩家位于起点。玩家必须在截止日期或之前到达终点，到达终点后该玩家的游戏结束。</p><p>（2）穿越沙漠需水和食物两种资源，它们的最小计量单位均为箱。每天玩家拥有的水和食物质量之和不能超过负重上限。若未到达终点而水或食物已耗尽，视为游戏失败。</p><p>（3）每天的天气为“晴朗”、“高温”、“沙暴”三种状况之一，沙漠中所有区域的天气相同。</p><p>（4）每天玩家可从地图中的某个区域到达与之相邻的另一个区域，也可在原地停留。<strong>沙暴日必须在原地停留</strong>。</p><p>（5）玩家在原地停留一天消耗的资源数量称为基础消耗量，<strong>行走一天消耗的资源数量为基础消耗量的2倍</strong>。</p><p>（6）<strong>玩家第0天可在起点处用初始资金以基准价格购买水和食物</strong>。玩家可在起点停留或回到起点，但不能多次在起点购买资源。玩家到达终点后可退回剩余的水和食物，<strong>每箱退回价格为基准价格的一半</strong>。</p><p>（7）玩家在矿山停留时，可通过挖矿获得资金，挖矿一天获得的资金量称为基础收益。<strong>如果挖矿，消耗的资源数量为基础消耗量的3倍</strong>；如果不挖矿，消耗的资源数量为基础消耗量。到达矿山当天不能挖矿。沙暴日也可挖矿。</p><p>（8）玩家用剩余的初始资金或挖矿获得的资金在村庄去其他地方是可以购买水和食物，<strong>每箱价格为基准价格的2倍</strong>。</p><p>请根据游戏的设定，假设只有一名玩家，在整个游戏时段内每天天气状况事先全部已知，试给出一般情况下玩家的最优路径。</p><div class="tabs" id="关卡"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#关卡-1">关卡 1</button></li><li class="tab"><button type="button" data-href="#关卡-2">关卡 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="关卡-1"><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210818172839.png" class="" title=", height&#x3D;50vh"></p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210818172646.png" class="" title=", height&#x3D;50vh"></p><div class="tip success"><p>最优解为到终点还有10470金钱，用时24天</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="关卡-2"><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210818172756.png" class="" title=", height&#x3D;50vh"></p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210818174449.png" class="" title=", height&#x3D;50vh"></p><div class="tip success"><p>最优解为到终点时还有12730金钱，用时30天</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><del>很明显的一个动态规划</del></p><p>设状态dp[k][j][w][f]代表第k天时在第j个点剩余水为w箱剩余食物为f箱的最大资金，则：</p><script type="math/tex; mode=display">ans=max_{w,f,i} \quad dp[k][zd][w][f]</script><p>就是遍历第每天在终点的所有水、食物的状态求最大值。</p><h3 id="初始值设定"><a href="#初始值设定" class="headerlink" title="初始值设定"></a>初始值设定</h3><p>由于起始点可以在起点购买物资，则有初始状态：</p><script type="math/tex; mode=display">dp[0][qd][w][f]=10000-cost\_water*w-cost\_food*f \quad w \in [0,400] f\in [0,600]</script><p> 其中$cost_water$​​，$cost_food$​​​​ 为购买水和食物消耗的钱。</p><p>这里假设起始为第0天，则第一天天气影响的是从第0天到第1天。</p><h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><h4 id="当第k天人在村庄j时："><a href="#当第k天人在村庄j时：" class="headerlink" title="当第k天人在村庄j时："></a>当第k天人在村庄j时：</h4><ul><li><p>第k天为沙暴天气：</p><blockquote><p>dp[k+1][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]}=max(dp[k][j][w][f]-2*ww*cost_water-2*ff*cost_food</p></blockquote></li><li><p>非沙暴天气：</p><p>  ​    从j点走到jj点</p><blockquote><p>dp[k+1][jj][w+ww-xh_water[tq]][f+ff-xh_food[tq]]}=max(dp[k][j][w][f]-2*ww*cost_water-2*ff*cost_food</p></blockquote></li></ul><h4 id="当第k天人在矿山j时："><a href="#当第k天人在矿山j时：" class="headerlink" title="当第k天人在矿山j时："></a>当第k天人在矿山j时：</h4><ul><li><p>挖矿：</p><blockquote><p>dp[k+1][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]=max(dp[k][j][w][f]+1000)</p></blockquote></li><li><p>第k天为沙暴天气：</p><blockquote><p>dp[k+1][j][w-xh_water[tq]][f-xh_food[tq]]=max(dp[k][j][w][f])</p></blockquote></li><li><p>第k天为非沙暴天气：</p><blockquote><p>dp[k+1][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=max(dp[k][jj][w][f])</p></blockquote></li></ul><h4 id="当第k天人在其他地区时"><a href="#当第k天人在其他地区时" class="headerlink" title="当第k天人在其他地区时"></a>当第k天人在其他地区时</h4><ul><li><p>第k天为沙暴天气：</p><blockquote><p>dp[k+1][j][w-xh_water[tq]][f-xh_food[tq]]=max(dp[k][j][w][f]) </p></blockquote></li><li><p>第k天为非沙暴天气：</p><p>  ​    从j点走到jj点</p><blockquote><p>dp[k+1][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=max(dp[k][j][w][f]) </p></blockquote></li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>​    虽然没有评测姬，但是作为曾经的Acmer不能容忍运行样例大于1s，所以只会转移方程还是过不了这题。</p><p>显然由样例可知，点 太 多 了！！！，我们考虑删点。</p><p>稍微思考一下就知道这题有几个隐含条件：</p><ul><li>除了回村庄补充物资，不会走回头路。</li><li>除了挖矿和沙尘暴不会在原地停留。</li><li><strong>只会走关键点之间的最短路径</strong></li></ul><p>故我们只需要将关键点之间的最短路求出，最短路经过的点才被认为是有效点，最短路经过的边才被认为是有效边，这样就可以化简图了。</p><p>化简之后的路径图如下：</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210818175743.png" alt="image-20210818175743599"></p><p>​    可见有效点只有10个大大减少了时间复杂度，但是点数超过13仍会爆空间和时间，空间可以试试滚动数组优化，时间我是没什么好办法了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">11</span>,M=<span class="number">28</span>,inf=<span class="number">0x3f3f3f</span>,Day=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">32</span>][N+<span class="number">1</span>][<span class="number">405</span>][<span class="number">605</span>],zd,qd,FZ;</span><br><span class="line"><span class="keyword">int</span> cost_water,cost_food,walk,dig,buy;</span><br><span class="line"><span class="keyword">int</span> xh_water[<span class="number">3</span>]=&#123;<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>&#125;,xh_food[<span class="number">3</span>]=&#123;<span class="number">7</span>,<span class="number">6</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> cz[N+<span class="number">1</span>],ks[N+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">short</span> day; <span class="comment">// i </span></span><br><span class="line">    <span class="keyword">short</span> from; <span class="comment">// jj j</span></span><br><span class="line">    <span class="keyword">int</span> water,food;</span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> node &amp;x)&#123;</span><br><span class="line">        <span class="keyword">return</span> x.day!=day || x.from!=from || x.water!=water || x.food!=food ;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;path[<span class="number">31</span>][N+<span class="number">1</span>][<span class="number">405</span>][<span class="number">605</span>],lastpath;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; weather;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line">map &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">    g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_map</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">4</span>,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">push_back</span>(<span class="number">10</span>,<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">    mp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    mp[<span class="number">2</span>]=<span class="number">25</span>;</span><br><span class="line">    mp[<span class="number">3</span>]=<span class="number">26</span>;</span><br><span class="line">    mp[<span class="number">4</span>]=<span class="number">27</span>;</span><br><span class="line">    mp[<span class="number">5</span>]=<span class="number">24</span>;</span><br><span class="line">    mp[<span class="number">6</span>]=<span class="number">23</span>;</span><br><span class="line">    mp[<span class="number">7</span>]=<span class="number">21</span>;</span><br><span class="line">    mp[<span class="number">8</span>]=<span class="number">9</span>;</span><br><span class="line">    mp[<span class="number">9</span>]=<span class="number">15</span>;</span><br><span class="line">    mp[<span class="number">10</span>]=<span class="number">14</span>;</span><br><span class="line">    mp[<span class="number">11</span>]=<span class="number">12</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cz[i]=<span class="number">0</span>;</span><br><span class="line">        ks[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cz[<span class="number">9</span>]=<span class="number">1</span>;</span><br><span class="line">    ks[<span class="number">11</span>]=<span class="number">1</span>;</span><br><span class="line">zd=<span class="number">4</span>;</span><br><span class="line">    qd=<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,-inf,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">    FZ=<span class="number">1200</span>;</span><br><span class="line">    cost_water=<span class="number">5</span>;</span><br><span class="line">    cost_food=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    walk=<span class="number">2</span>;</span><br><span class="line">    buy=<span class="number">2</span>;</span><br><span class="line">    dig=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">405</span>;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">601</span>;l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k*<span class="number">3</span>+l*<span class="number">2</span>&lt;=FZ)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[<span class="number">0</span>][qd][k][l]=<span class="number">10000</span>-k*cost_water-l*cost_food;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;init %d\n&quot;</span>,dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">178</span>][<span class="number">333</span>]);</span><br><span class="line">    path[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    weather=&#123;</span><br><span class="line">        <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">build_map</span>();</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Day;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d天\n&quot;</span>,i);</span><br><span class="line">        <span class="keyword">int</span> tq=weather[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cz[j])<span class="comment">// 村庄</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;=<span class="number">405</span>;w++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> f=<span class="number">0</span>;w*<span class="number">3</span>+f*<span class="number">2</span>&lt;=<span class="number">1200</span>;f++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//购买或不够买物资(ww=0,ff=0就是不购买) </span></span><br><span class="line">                        <span class="keyword">if</span>(tq==<span class="number">2</span>) <span class="comment">//停留</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="keyword">int</span> money=dp[i][j][w][f];</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> ww=<span class="number">0</span>;ww&lt;=money/cost_water;ww++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> ff=<span class="number">0</span>;ff&lt;=(FZ-(w+ww)*<span class="number">3</span>)/<span class="number">2</span>-f;ff++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                </span><br><span class="line">                                    <span class="keyword">if</span>(w+ww-xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f+ff-xh_food[tq]&gt;=<span class="number">0</span>&amp;&amp;dp[i][j][w][f]<span class="number">-2</span>*ww*cost_water<span class="number">-2</span>*ff*cost_food&gt;=<span class="number">0</span>)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]&lt;dp[i][j][w][f]<span class="number">-2</span>*ww*cost_water<span class="number">-2</span>*ff*cost_food)</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            dp[i+<span class="number">1</span>][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]=dp[i][j][w][f]<span class="number">-2</span>*ww*cost_water<span class="number">-2</span>*ff*cost_food;</span><br><span class="line">                                            path[i+<span class="number">1</span>][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]<span class="number">-2</span>*ww*cost_water<span class="number">-2</span>*ff*cost_food&#125;;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="comment">//从j走到jj</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">auto</span> jj:g[j])</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="keyword">int</span> money=dp[i][j][w][f];</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> ww=<span class="number">0</span>;ww&lt;=money/cost_water;ww++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">int</span> ff=<span class="number">0</span>;ff&lt;=(FZ-(w+ww)*<span class="number">3</span>)/<span class="number">2</span>-f;ff++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span>(w+ww-walk*xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f+ff-walk*xh_food[tq]&gt;=<span class="number">0</span>&amp;&amp;dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food&gt;=<span class="number">0</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(dp[i+<span class="number">1</span>][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]&lt;dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        dp[i+<span class="number">1</span>][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]=dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food;</span><br><span class="line">                                        path[i+<span class="number">1</span>][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food&#125;;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ks[j])<span class="comment">// 矿山</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;=<span class="number">405</span>;w++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> f=<span class="number">0</span>;w*<span class="number">3</span>+f*<span class="number">2</span>&lt;=<span class="number">1200</span>;f++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 已经停留一天了，可以挖矿</span></span><br><span class="line">                        <span class="keyword">if</span>(w-dig*xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-dig*xh_food[tq]&gt;=<span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]&lt;dp[i][j][w][f]+<span class="number">1000</span>&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                dp[i+<span class="number">1</span>][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]=dp[i][j][w][f]+<span class="number">1000</span>;</span><br><span class="line">                                path[i+<span class="number">1</span>][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]+<span class="number">1000</span>&#125;;</span><br><span class="line">                            &#125;</span><br><span class="line">                        </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 在矿山不挖矿或 不允许挖矿</span></span><br><span class="line">                        <span class="keyword">if</span>(tq==<span class="number">2</span>) <span class="comment">//停留但不挖矿</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(w-xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-xh_food[tq]&gt;=<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]&lt;dp[i][j][w][f]&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                                &#123;</span><br><span class="line"></span><br><span class="line">                                    dp[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=dp[i][j][w][f];</span><br><span class="line">                                    path[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]&#125;;</span><br><span class="line">                                &#125;</span><br><span class="line">                        </span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(w-walk*xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-walk*xh_food[tq]&gt;=<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">auto</span> jj:g[j])</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(dp[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]&lt;dp[i][j][w][f]&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        dp[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=dp[i][j][w][f];</span><br><span class="line">                                        path[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]&#125;;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//普通区</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;=<span class="number">405</span>;w++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> f=<span class="number">0</span>;w*<span class="number">3</span>+f*<span class="number">2</span>&lt;=<span class="number">1200</span>;f++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(tq==<span class="number">2</span>) <span class="comment">//在j点停留</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(w-xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-xh_food[tq]&gt;=<span class="number">0</span>&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]&lt;dp[i][j][w][f])</span><br><span class="line">                                &#123;</span><br><span class="line">                                    dp[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=dp[i][j][w][f];</span><br><span class="line">                                    path[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]&#125;;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span><span class="comment">// 走到jj点</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">auto</span> jj:g[j])</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span>(w-walk*xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-walk*xh_food[tq]&gt;=<span class="number">0</span>&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">if</span>(dp[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]&lt;dp[i][j][w][f])</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        </span><br><span class="line">                                        dp[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=dp[i][j][w][f];</span><br><span class="line">                                        path[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]&#125;;</span><br><span class="line"></span><br><span class="line">                                    &#125;</span><br><span class="line">                                </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=-inf;</span><br><span class="line">    node lastpath;</span><br><span class="line">    <span class="keyword">int</span> last_water=<span class="number">0</span>,last_food=<span class="number">0</span>,last_day=Day;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=Day;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">0</span>;w&lt;=<span class="number">405</span>;w++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> f=<span class="number">0</span>;w*<span class="number">3</span>+<span class="number">2</span>*f&lt;=<span class="number">1200</span>;f++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i][zd][w][f]&gt;ans)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans=dp[i][zd][w][f];</span><br><span class="line">                    lastpath=path[i][zd][w][f];</span><br><span class="line">                last_water=w;</span><br><span class="line">                last_food=f;</span><br><span class="line">                last_day=i;</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stack&lt;node&gt; s;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; my;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;??day:%d weather:%d %d water:%d food:%d money:%d\n&quot;</span>,last_day,weather[Day],zd,last_water,last_food,ans);</span><br><span class="line">    s.<span class="built_in">push</span>((node)&#123;last_day,zd,last_water,last_food,ans&#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span>(lastpath!=path[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        s.<span class="built_in">push</span>(lastpath);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;??day:%d weather:%d %d water:%d food:%d money:%d\n&quot;</span>,lastpath.day,weather[lastpath.day],mp[lastpath.from],lastpath.water,lastpath.food,lastpath.money);</span><br><span class="line">my.<span class="built_in">push</span>(lastpath.money);</span><br><span class="line">        lastpath=path[lastpath.day][lastpath.from][lastpath.water][lastpath.food];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    my.<span class="built_in">push</span>(my.<span class="built_in">top</span>());</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node t=s.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">int</span> money=my.<span class="built_in">top</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Day:%d weather:%d point:%d water:%d food:%d money:%d\n&quot;</span>,t.day,weather[t.day],mp[t.from],t.water,t.food,money);</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        my.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><div class="table-container"><table><thead><tr><th>日期</th><th style="text-align:center">所在区域</th><th style="text-align:center">剩余资金数</th><th style="text-align:center">剩余水量</th><th style="text-align:center">剩余食物量</th></tr></thead><tbody><tr><td>0</td><td style="text-align:center">1</td><td style="text-align:center">5780</td><td style="text-align:center">178</td><td style="text-align:center">333</td></tr><tr><td>1</td><td style="text-align:center">25</td><td style="text-align:center">5780</td><td style="text-align:center">162</td><td style="text-align:center">321</td></tr><tr><td>2</td><td style="text-align:center">26</td><td style="text-align:center">5780</td><td style="text-align:center">146</td><td style="text-align:center">309</td></tr><tr><td>3</td><td style="text-align:center">27</td><td style="text-align:center">5780</td><td style="text-align:center">136</td><td style="text-align:center">295</td></tr><tr><td>4</td><td style="text-align:center">27</td><td style="text-align:center">5780</td><td style="text-align:center">126</td><td style="text-align:center">285</td></tr><tr><td>5</td><td style="text-align:center">21</td><td style="text-align:center">5780</td><td style="text-align:center">116</td><td style="text-align:center">271</td></tr><tr><td>6</td><td style="text-align:center">9</td><td style="text-align:center">5780</td><td style="text-align:center">100</td><td style="text-align:center">259</td></tr><tr><td>7</td><td style="text-align:center">9</td><td style="text-align:center">5780</td><td style="text-align:center">90</td><td style="text-align:center">249</td></tr><tr><td>8</td><td style="text-align:center">15</td><td style="text-align:center">5780</td><td style="text-align:center">80</td><td style="text-align:center">235</td></tr><tr><td>9</td><td style="text-align:center">14</td><td style="text-align:center">4150</td><td style="text-align:center">227</td><td style="text-align:center">223</td></tr><tr><td>10</td><td style="text-align:center">12</td><td style="text-align:center">4150</td><td style="text-align:center">211</td><td style="text-align:center">211</td></tr><tr><td>11</td><td style="text-align:center">12</td><td style="text-align:center">5150</td><td style="text-align:center">181</td><td style="text-align:center">181</td></tr><tr><td>12</td><td style="text-align:center">12</td><td style="text-align:center">6150</td><td style="text-align:center">157</td><td style="text-align:center">163</td></tr><tr><td>13</td><td style="text-align:center">12</td><td style="text-align:center">7150</td><td style="text-align:center">142</td><td style="text-align:center">142</td></tr><tr><td>14</td><td style="text-align:center">12</td><td style="text-align:center">8150</td><td style="text-align:center">118</td><td style="text-align:center">124</td></tr><tr><td>15</td><td style="text-align:center">12</td><td style="text-align:center">9150</td><td style="text-align:center">94</td><td style="text-align:center">1106</td></tr><tr><td>16</td><td style="text-align:center">12</td><td style="text-align:center">10150</td><td style="text-align:center">70</td><td style="text-align:center">88</td></tr><tr><td>17</td><td style="text-align:center">12</td><td style="text-align:center">10150</td><td style="text-align:center">60</td><td style="text-align:center">78</td></tr><tr><td>18</td><td style="text-align:center">12</td><td style="text-align:center">10150</td><td style="text-align:center">50</td><td style="text-align:center">68</td></tr><tr><td>19</td><td style="text-align:center">12</td><td style="text-align:center">11150</td><td style="text-align:center">26</td><td style="text-align:center">50</td></tr><tr><td>20</td><td style="text-align:center">14</td><td style="text-align:center">11150</td><td style="text-align:center">10</td><td style="text-align:center">38</td></tr><tr><td>21</td><td style="text-align:center">15</td><td style="text-align:center">11150</td><td style="text-align:center">0</td><td style="text-align:center">24</td></tr><tr><td>22</td><td style="text-align:center">9</td><td style="text-align:center">10470</td><td style="text-align:center">26</td><td style="text-align:center">26</td></tr><tr><td>23</td><td style="text-align:center">21</td><td style="text-align:center">10470</td><td style="text-align:center">10</td><td style="text-align:center">14</td></tr><tr><td>24</td><td style="text-align:center">27</td><td style="text-align:center">10470</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table></div><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>​    与第一关不同的是点的数量变多了，空间复杂度过不去。我只好把path删了一个变量money才勉强过去。就是后面要手算money很麻烦</p><p>​    后来想应该可以滚动数组的，但是不想写了。<del>毕竟已经退役了</del></p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const short <span class="symbol">N</span>=<span class="number">27</span>,inf=<span class="number">20000</span>,<span class="symbol">Day</span>=<span class="number">30</span>;</span><br><span class="line">short dp[<span class="number">31</span>][<span class="symbol">N</span>+<span class="number">1</span>][<span class="number">401</span>][<span class="number">601</span>],zd,qd,<span class="symbol">FZ</span>;</span><br><span class="line">short cost_water,cost_food,walk,dig,buy;</span><br><span class="line">short xh_water[<span class="number">3</span>]=&#123;<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>&#125;,xh_food[<span class="number">3</span>]=&#123;<span class="number">7</span>,<span class="number">6</span>,<span class="number">10</span>&#125;;</span><br><span class="line">bool cz[<span class="symbol">N</span>+<span class="number">1</span>],ks[<span class="symbol">N</span>+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    char day; // i </span><br><span class="line">    char from; // jj j</span><br><span class="line">    short water,food;</span><br><span class="line">    bool operator!=(const node &amp;x)&#123;</span><br><span class="line">        return (x.day-<span class="string">&#x27;0&#x27;</span>)!=(day-<span class="string">&#x27;0&#x27;</span>) || (x.from-<span class="string">&#x27;0&#x27;</span>!=from-<span class="string">&#x27;0&#x27;</span>) || (x.water-<span class="string">&#x27;0&#x27;</span>)!=(water-<span class="string">&#x27;0&#x27;</span>) || (x.food-<span class="string">&#x27;0&#x27;</span>!=food-<span class="string">&#x27;0&#x27;</span>) ;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;path[<span class="number">31</span>][<span class="symbol">N</span>+<span class="number">1</span>][<span class="number">401</span>][<span class="number">601</span>],lastpath;</span><br><span class="line">vector &lt;short&gt; weather;</span><br><span class="line">vector &lt;short&gt; g[<span class="symbol">N</span>+<span class="number">1</span>];</span><br><span class="line">map &lt;short,short&gt; mp;</span><br><span class="line">void push_back(short x,short y)</span><br><span class="line">&#123;</span><br><span class="line">    g[x].push_back(y);</span><br><span class="line">    g[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void build_map(short flag)</span><br><span class="line">&#123;</span><br><span class="line">    if(flag==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    push_back(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        push_back(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        push_back(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        push_back(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">        push_back(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">        push_back(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">        push_back(<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line">        push_back(<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        push_back(<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">        push_back(<span class="number">10</span>,<span class="number">11</span>);</span><br><span class="line">        push_back(<span class="number">11</span>,<span class="number">12</span>);</span><br><span class="line">        push_back(<span class="number">7</span>,<span class="number">13</span>);</span><br><span class="line">        push_back(<span class="number">13</span>,<span class="number">14</span>);</span><br><span class="line">        push_back(<span class="number">14</span>,<span class="number">15</span>);</span><br><span class="line">        push_back(<span class="number">15</span>,<span class="number">16</span>);</span><br><span class="line">        push_back(<span class="number">15</span>,<span class="number">10</span>);</span><br><span class="line">        push_back(<span class="number">15</span>,<span class="number">11</span>);</span><br><span class="line">        push_back(<span class="number">16</span>,<span class="number">12</span>);</span><br><span class="line">        push_back(<span class="number">3</span>,<span class="number">17</span>);</span><br><span class="line">        push_back(<span class="number">17</span>,<span class="number">18</span>);</span><br><span class="line">        push_back(<span class="number">18</span>,<span class="number">19</span>);</span><br><span class="line">        push_back(<span class="number">19</span>,<span class="number">20</span>);</span><br><span class="line">        push_back(<span class="number">20</span>,<span class="number">21</span>);</span><br><span class="line">        push_back(<span class="number">21</span>,<span class="number">22</span>);</span><br><span class="line">        push_back(<span class="number">22</span>,<span class="number">23</span>);</span><br><span class="line">        push_back(<span class="number">15</span>,<span class="number">23</span>);</span><br><span class="line">        push_back(<span class="number">23</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        mp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        mp[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">        mp[<span class="number">3</span>]=<span class="number">3</span>;</span><br><span class="line">        mp[<span class="number">4</span>]=<span class="number">4</span>;</span><br><span class="line">        mp[<span class="number">5</span>]=<span class="number">12</span>;</span><br><span class="line">        mp[<span class="number">6</span>]=<span class="number">21</span>;</span><br><span class="line">        mp[<span class="number">7</span>]=<span class="number">29</span>;</span><br><span class="line">        mp[<span class="number">8</span>]=<span class="number">30</span>;</span><br><span class="line">        mp[<span class="number">9</span>]=<span class="number">39</span>;</span><br><span class="line">        mp[<span class="number">10</span>]=<span class="number">47</span>;</span><br><span class="line">        mp[<span class="number">11</span>]=<span class="number">56</span>;</span><br><span class="line">        mp[<span class="number">12</span>]=<span class="number">64</span>;</span><br><span class="line">        mp[<span class="number">13</span>]=<span class="number">38</span>;</span><br><span class="line">        mp[<span class="number">14</span>]=<span class="number">46</span>;</span><br><span class="line">        mp[<span class="number">15</span>]=<span class="number">55</span>;</span><br><span class="line">        mp[<span class="number">16</span>]=<span class="number">63</span>;</span><br><span class="line">        mp[<span class="number">17</span>]=<span class="number">11</span>;</span><br><span class="line">        mp[<span class="number">18</span>]=<span class="number">20</span>;</span><br><span class="line">        mp[<span class="number">19</span>]=<span class="number">28</span>;</span><br><span class="line">        mp[<span class="number">20</span>]=<span class="number">37</span>;</span><br><span class="line">        mp[<span class="number">21</span>]=<span class="number">45</span>;</span><br><span class="line">        mp[<span class="number">22</span>]=<span class="number">54</span>;</span><br><span class="line">        mp[<span class="number">23</span>]=<span class="number">62</span>;</span><br><span class="line">        for(short i=<span class="number">1</span>;i&lt;=<span class="symbol">N</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cz[i]=<span class="number">0</span>;</span><br><span class="line">            ks[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cz[<span class="number">9</span>]=cz[<span class="number">23</span>]=<span class="number">1</span>;</span><br><span class="line">        ks[<span class="number">8</span>]=ks[<span class="number">15</span>]=<span class="number">1</span>;</span><br><span class="line">        qd=<span class="number">1</span>;</span><br><span class="line">        zd=<span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="symbol">FZ</span>=<span class="number">1200</span>;</span><br><span class="line">    cost_water=<span class="number">5</span>;</span><br><span class="line">    cost_food=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    walk=<span class="number">2</span>;</span><br><span class="line">    buy=<span class="number">2</span>;</span><br><span class="line">    dig=<span class="number">3</span>;</span><br><span class="line">for(short i=<span class="number">0</span>;i&lt;=<span class="symbol">Day</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(short j=<span class="number">1</span>;j&lt;=<span class="symbol">N</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">for(short w=<span class="number">0</span>;w&lt;=<span class="number">400</span>;w++)</span><br><span class="line">&#123;</span><br><span class="line">for(short f=<span class="number">0</span>;f&lt;=<span class="number">600</span>;f++)</span><br><span class="line">&#123;</span><br><span class="line">if(w*<span class="number">3</span>+f*<span class="number">2</span>&lt;=<span class="symbol">FZ</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j][w][f]=-inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    for(short k=<span class="number">10</span>;k&lt;=<span class="number">405</span>;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(short l=<span class="number">0</span>;k*<span class="number">3</span>+l*<span class="number">2</span>&lt;=<span class="symbol">FZ</span>;l++)</span><br><span class="line">        &#123;</span><br><span class="line">    dp[<span class="number">0</span>][qd][k][l]=<span class="number">10000</span>-k*cost_water-l*cost_food;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    path[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    weather=&#123;</span><br><span class="line">        <span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    build_map(<span class="number">2</span>);</span><br><span class="line">    init();</span><br><span class="line">    // dp [i][j][w][f]</span><br><span class="line">    // 第i天 在j个点 w 箱水 f 箱食物 时最大利润，</span><br><span class="line">    // max_k_l (dp[<span class="number">30</span>][<span class="number">27</span>][k][l])</span><br><span class="line">    // 第i天的天气决定 i+<span class="number">1</span>天能否移动</span><br><span class="line">    // 如：第<span class="number">0</span>天天气决定第<span class="number">1</span>天能否移动</span><br><span class="line"></span><br><span class="line">    // 先不考虑非矿山停留自愿停留情况</span><br><span class="line">    // for(short i=<span class="number">1</span>;i&lt;<span class="symbol">N</span>;i++)</span><br><span class="line">    // &#123;</span><br><span class="line">    //     printf(<span class="string">&quot;第%d个点&quot;</span>,i);</span><br><span class="line">    //     for(auto j:mp[i]) </span><br><span class="line">    //     &#123;</span><br><span class="line">    //         printf(<span class="string">&quot;%d &quot;</span>,j);</span><br><span class="line">    //     &#125;</span><br><span class="line">    //     printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    // &#125;</span><br><span class="line">    // printf(<span class="string">&quot;???%d %d %d %d\n&quot;</span>,xh_food[<span class="number">0</span>],xh_food[<span class="number">2</span>],xh_water[<span class="number">0</span>],xh_water[<span class="number">1</span>]);</span><br><span class="line">    for(short i=<span class="number">0</span>;i&lt;<span class="symbol">Day</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;第%d天\n&quot;</span>,i);</span><br><span class="line">        short tq=weather[i];</span><br><span class="line">        for(short j=<span class="number">1</span>;j&lt;=<span class="symbol">N</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(cz[j])// 村庄</span><br><span class="line">            &#123;</span><br><span class="line">                for(short w=<span class="number">0</span>;w&lt;=<span class="number">405</span>;w++)</span><br><span class="line">                &#123;</span><br><span class="line">                    for(short f=<span class="number">0</span>;w*<span class="number">3</span>+f*<span class="number">2</span>&lt;=<span class="number">1200</span>;f++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        //购买或不够买物资(ww=<span class="number">0</span>,ff=<span class="number">0</span>就是不购买) </span><br><span class="line">                        if(tq==<span class="number">2</span>) //停留</span><br><span class="line">                        &#123;</span><br><span class="line">                        short money=dp[i][j][w][f];</span><br><span class="line">                        for(short ww=<span class="number">0</span>;ww&lt;=money/cost_water;ww++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            for(short ff=<span class="number">0</span>;ff&lt;=(<span class="symbol">FZ</span>-(w+ww)*<span class="number">3</span>)/<span class="number">2</span>-f;ff++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                </span><br><span class="line">                                    if(w+ww-xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f+ff-xh_food[tq]&gt;=<span class="number">0</span>&amp;&amp;dp[i][j][w][f]<span class="number">-2</span>*ww*cost_water<span class="number">-2</span>*ff*cost_food&gt;=<span class="number">0</span>)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        if(dp[i+<span class="number">1</span>][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]&lt;dp[i][j][w][f]<span class="number">-2</span>*ww*cost_water<span class="number">-2</span>*ff*cost_food)</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            dp[i+<span class="number">1</span>][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]=dp[i][j][w][f]<span class="number">-2</span>*ww*cost_water<span class="number">-2</span>*ff*cost_food;</span><br><span class="line">                                            // path[i+<span class="number">1</span>][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]<span class="number">-2</span>*ww*cost_water<span class="number">-2</span>*ff*cost_food&#125;;</span><br><span class="line">                                            path[i+<span class="number">1</span>][j][w+ww-xh_water[tq]][f+ff-xh_food[tq]]=&#123;i,j,w,f&#125;;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else //从j走到jj</span><br><span class="line">                        &#123;</span><br><span class="line">                            for(auto jj:g[j])</span><br><span class="line">                            &#123;</span><br><span class="line">                            short money=dp[i][j][w][f];</span><br><span class="line">                        for(short ww=<span class="number">0</span>;ww&lt;=money/cost_water;ww++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            for(short ff=<span class="number">0</span>;ff&lt;=(<span class="symbol">FZ</span>-(w+ww)*<span class="number">3</span>)/<span class="number">2</span>-f;ff++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                if(w+ww-walk*xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f+ff-walk*xh_food[tq]&gt;=<span class="number">0</span>&amp;&amp;dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food&gt;=<span class="number">0</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    if(dp[i+<span class="number">1</span>][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]&lt;dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        dp[i+<span class="number">1</span>][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]=dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food;</span><br><span class="line">                                        // path[i+<span class="number">1</span>][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]=&#123;i,j,w,f,(short)dp[i][j][w][f]-buy*ww*cost_water-buy*ff*cost_food&#125;;</span><br><span class="line">                                        path[i+<span class="number">1</span>][jj][w+ww-walk*xh_water[tq]][f+ff-walk*xh_food[tq]]=&#123;i,j,w,f&#125;;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (ks[j])// 矿山</span><br><span class="line">            &#123;</span><br><span class="line">                for(short w=<span class="number">0</span>;w&lt;=<span class="number">405</span>;w++)</span><br><span class="line">                &#123;</span><br><span class="line">                    for(short f=<span class="number">0</span>;w*<span class="number">3</span>+f*<span class="number">2</span>&lt;=<span class="number">1200</span>;f++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        // 已经停留一天了，可以挖矿</span><br><span class="line">                        if(w-dig*xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-dig*xh_food[tq]&gt;=<span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            if(dp[i+<span class="number">1</span>][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]&lt;dp[i][j][w][f]+<span class="number">1000</span>&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                dp[i+<span class="number">1</span>][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]=dp[i][j][w][f]+<span class="number">1000</span>;</span><br><span class="line">//                                path[i+<span class="number">1</span>][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]=&#123;i,j,w,f,(short)dp[i][j][w][f]+<span class="number">1000</span>&#125;;</span><br><span class="line">                                path[i+<span class="number">1</span>][j][w-dig*xh_water[tq]][f-dig*xh_food[tq]]=&#123;i,j,w,f&#125;;</span><br><span class="line">                            &#125;</span><br><span class="line">                        </span><br><span class="line">                        &#125;</span><br><span class="line">                        // 在矿山不挖矿或 不允许挖矿</span><br><span class="line">                        if(tq==<span class="number">2</span>) //停留但不挖矿</span><br><span class="line">                        &#123;</span><br><span class="line">                            if(w-xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-xh_food[tq]&gt;=<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                if(dp[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]&lt;dp[i][j][w][f]&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                                &#123;</span><br><span class="line"></span><br><span class="line">                                    dp[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=dp[i][j][w][f];</span><br><span class="line">                                    // path[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]&#125;;</span><br><span class="line">                                    path[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=&#123;i,j,w,f&#125;;</span><br><span class="line">                                &#125;</span><br><span class="line">                        </span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else</span><br><span class="line">                        &#123;</span><br><span class="line">                            if(w-walk*xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-walk*xh_food[tq]&gt;=<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                for(auto jj:g[j])</span><br><span class="line">                                &#123;</span><br><span class="line">                                    if(dp[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]&lt;dp[i][j][w][f]&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        dp[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=dp[i][j][w][f];</span><br><span class="line">                                        // path[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]&#125;;</span><br><span class="line">                                        path[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=&#123;i,j,w,f&#125;;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else //普通区</span><br><span class="line">            &#123;</span><br><span class="line">                for(short w=<span class="number">0</span>;w&lt;=<span class="number">405</span>;w++)</span><br><span class="line">                &#123;</span><br><span class="line">                    for(short f=<span class="number">0</span>;w*<span class="number">3</span>+f*<span class="number">2</span>&lt;=<span class="number">1200</span>;f++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        if(tq==<span class="number">2</span>) //在j点停留</span><br><span class="line">                        &#123;</span><br><span class="line">                            if(w-xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-xh_food[tq]&gt;=<span class="number">0</span>&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                if(dp[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]&lt;dp[i][j][w][f])</span><br><span class="line">                                &#123;</span><br><span class="line">                                    dp[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=dp[i][j][w][f];</span><br><span class="line">                                    // path[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]&#125;;</span><br><span class="line">                                    path[i+<span class="number">1</span>][j][w-xh_water[tq]][f-xh_food[tq]]=&#123;i,j,w,f&#125;;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else// 走到jj点</span><br><span class="line">                        &#123;</span><br><span class="line">                            for(auto jj:g[j])</span><br><span class="line">                            &#123;</span><br><span class="line">                                if(w-walk*xh_water[tq]&gt;=<span class="number">0</span>&amp;&amp;f-walk*xh_food[tq]&gt;=<span class="number">0</span>&amp;&amp;dp[i][j][w][f]&gt;=<span class="number">0</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    if(dp[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]&lt;dp[i][j][w][f])</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        </span><br><span class="line">                                        dp[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=dp[i][j][w][f];</span><br><span class="line">                                        // path[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=&#123;i,j,w,f,dp[i][j][w][f]&#125;;</span><br><span class="line">                                        path[i+<span class="number">1</span>][jj][w-walk*xh_water[tq]][f-walk*xh_food[tq]]=&#123;i,j,w,f&#125;;</span><br><span class="line"></span><br><span class="line">                                    &#125;</span><br><span class="line">                                </span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    short ans=-inf;</span><br><span class="line">    node lastpath;</span><br><span class="line">    short last_water=<span class="number">0</span>,last_food=<span class="number">0</span>,last_day=<span class="symbol">Day</span>;</span><br><span class="line">    for(short i=<span class="number">0</span>;i&lt;=<span class="symbol">Day</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(short w=<span class="number">0</span>;w&lt;=<span class="number">405</span>;w++)</span><br><span class="line">            for(short f=<span class="number">0</span>;w*<span class="number">3</span>+<span class="number">2</span>*f&lt;=<span class="number">1200</span>;f++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(dp[i][zd][w][f]&gt;ans)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans=dp[i][zd][w][f];</span><br><span class="line">                    lastpath=path[i][zd][w][f];</span><br><span class="line">                last_water=w;</span><br><span class="line">                last_food=f;</span><br><span class="line">                last_day=char(i);</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stack&lt;node&gt; s;</span><br><span class="line">//    freopen(<span class="string">&quot;outputQ2.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    printf(<span class="string">&quot;ans:%d\n&quot;</span>,ans);</span><br><span class="line">    printf(<span class="string">&quot;day:%d weather:%d point:%d water:%d food:%d\n&quot;</span>,last_day,weather[<span class="symbol">Day</span>],zd,last_water,last_food);</span><br><span class="line">    </span><br><span class="line">    node temppath=(node)&#123;last_day,zd,last_water,last_food&#125;;</span><br><span class="line">    s.push(temppath);</span><br><span class="line">    </span><br><span class="line">while(lastpath!=path[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        s.push(lastpath);</span><br><span class="line">        printf(<span class="string">&quot;day:%d weather:%d point %d water:%d food:%d\n&quot;</span>,lastpath.day,(int)weather[lastpath.day],(int)mp[lastpath.from],lastpath.water,lastpath.food);</span><br><span class="line">        temppath=lastpath;</span><br><span class="line">        lastpath=path[lastpath.day][lastpath.from][lastpath.water][lastpath.food];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><div class="table-container"><table><thead><tr><th>日期</th><th style="text-align:center">所在区域</th><th style="text-align:center">剩余资金数</th><th style="text-align:center">剩余水量</th><th style="text-align:center">剩余食物量</th></tr></thead><tbody><tr><td>0</td><td style="text-align:center">1</td><td style="text-align:center">5300</td><td style="text-align:center">130</td><td style="text-align:center">405</td></tr><tr><td>1</td><td style="text-align:center">2</td><td style="text-align:center">5300</td><td style="text-align:center">114</td><td style="text-align:center">393</td></tr><tr><td>2</td><td style="text-align:center">3</td><td style="text-align:center">5300</td><td style="text-align:center">98</td><td style="text-align:center">381</td></tr><tr><td>3</td><td style="text-align:center">4</td><td style="text-align:center">5300</td><td style="text-align:center">88</td><td style="text-align:center">367</td></tr><tr><td>4</td><td style="text-align:center">4</td><td style="text-align:center">5300</td><td style="text-align:center">78</td><td style="text-align:center">357</td></tr><tr><td>5</td><td style="text-align:center">12</td><td style="text-align:center">5300</td><td style="text-align:center">68</td><td style="text-align:center">343</td></tr><tr><td>6</td><td style="text-align:center">21</td><td style="text-align:center">5300</td><td style="text-align:center">52</td><td style="text-align:center">331</td></tr><tr><td>7</td><td style="text-align:center">21</td><td style="text-align:center">5300</td><td style="text-align:center">42</td><td style="text-align:center">321</td></tr><tr><td>8</td><td style="text-align:center">29</td><td style="text-align:center">5300</td><td style="text-align:center">32</td><td style="text-align:center">307</td></tr><tr><td>9</td><td style="text-align:center">30</td><td style="text-align:center">5300</td><td style="text-align:center">16</td><td style="text-align:center">295</td></tr><tr><td>10</td><td style="text-align:center">39</td><td style="text-align:center">5300</td><td style="text-align:center">0</td><td style="text-align:center">283</td></tr><tr><td>11</td><td style="text-align:center">39</td><td style="text-align:center">5200</td><td style="text-align:center">0</td><td style="text-align:center">273</td></tr><tr><td>12</td><td style="text-align:center">30</td><td style="text-align:center">3410</td><td style="text-align:center">163</td><td style="text-align:center">261</td></tr><tr><td>13</td><td style="text-align:center">30</td><td style="text-align:center">4410</td><td style="text-align:center">148</td><td style="text-align:center">240</td></tr><tr><td>14</td><td style="text-align:center">30</td><td style="text-align:center">5410</td><td style="text-align:center">124</td><td style="text-align:center">222</td></tr><tr><td>15</td><td style="text-align:center">30</td><td style="text-align:center">6410</td><td style="text-align:center">100</td><td style="text-align:center">204</td></tr><tr><td>16</td><td style="text-align:center">30</td><td style="text-align:center">7410</td><td style="text-align:center">76</td><td style="text-align:center">186</td></tr><tr><td>17</td><td style="text-align:center">30</td><td style="text-align:center">8410</td><td style="text-align:center">46</td><td style="text-align:center">156</td></tr><tr><td>18</td><td style="text-align:center">30</td><td style="text-align:center">9410</td><td style="text-align:center">16</td><td style="text-align:center">126</td></tr><tr><td>19</td><td style="text-align:center">39</td><td style="text-align:center">9410</td><td style="text-align:center">0</td><td style="text-align:center">114</td></tr><tr><td>20</td><td style="text-align:center">47</td><td style="text-align:center">5730</td><td style="text-align:center">180</td><td style="text-align:center">188</td></tr><tr><td>21</td><td style="text-align:center">55</td><td style="text-align:center">5730</td><td style="text-align:center">170</td><td style="text-align:center">174</td></tr><tr><td>22</td><td style="text-align:center">55</td><td style="text-align:center">6730</td><td style="text-align:center">155</td><td style="text-align:center">153</td></tr><tr><td>23</td><td style="text-align:center">55</td><td style="text-align:center">7730</td><td style="text-align:center">131</td><td style="text-align:center">135</td></tr><tr><td>24</td><td style="text-align:center">55</td><td style="text-align:center">8730</td><td style="text-align:center">116</td><td style="text-align:center">114</td></tr><tr><td>25</td><td style="text-align:center">55</td><td style="text-align:center">9730</td><td style="text-align:center">86</td><td style="text-align:center">84</td></tr><tr><td>26</td><td style="text-align:center">55</td><td style="text-align:center">10730</td><td style="text-align:center">62</td><td style="text-align:center">66</td></tr><tr><td>27</td><td style="text-align:center">55</td><td style="text-align:center">11730</td><td style="text-align:center">47</td><td style="text-align:center">45</td></tr><tr><td>28</td><td style="text-align:center">55</td><td style="text-align:center">12730</td><td style="text-align:center">32</td><td style="text-align:center">24</td></tr><tr><td>29</td><td style="text-align:center">56</td><td style="text-align:center">12730</td><td style="text-align:center">16</td><td style="text-align:center">12</td></tr><tr><td>30</td><td style="text-align:center">12</td><td style="text-align:center">12730</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table></div><h2 id="末尾的哔哔"><a href="#末尾的哔哔" class="headerlink" title="末尾的哔哔"></a>末尾的哔哔</h2><h3 id="再优化"><a href="#再优化" class="headerlink" title="再优化"></a>再优化</h3><p>​    后来和lms交流后发现自己村庄搜索代码写挫了，因为是递推的所以不用枚举购买的水和食物量，而是分别购买1箱水和1箱食物的状态转移。这样就能控制程序1s了。</p><h3 id="难度"><a href="#难度" class="headerlink" title="难度"></a>难度</h3><p>从oi来看的话我个人认为单纯dp应该有提高+难度？但是考虑到优化复杂度应该有黑题左右的难度了。<del>我是有什么资格评价的哇</del></p><p>从ACM来看的话如果有时间限制的话应该是个银牌题吧，没有时间限制就是个铜牌题。<del>本菜鸡做了大半天…</del></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logistic回归</title>
      <link href="/p/40721.html"/>
      <url>/p/40721.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    为什么又要写这个呢？😔弄个论文模板以防万一<del>不让省心的论文队友啊</del></p><h2 id="Logistic-介绍及应用领域"><a href="#Logistic-介绍及应用领域" class="headerlink" title="Logistic 介绍及应用领域"></a>Logistic 介绍及应用领域</h2><p>​    逻辑回归是一个比较经典的分类算法，可以说也是机器学习的入门必需课。虽然现在有许多分类的方法比如决策树、svm、神经网路等，但是逻辑回归仍应用领域广泛。</p><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>贷款违约情况（是否违约</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>广告点击情况（是否会点击</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>商品推荐（是否会购买</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>情感分析（正面情感or负面情感</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>疾病诊断（阴性还是阳性</p>            </div><h2 id="逻辑回归的性质"><a href="#逻辑回归的性质" class="headerlink" title="逻辑回归的性质"></a>逻辑回归的性质</h2><p>​        逻辑回归本质是一个条件概率$P(Y|X)$即在X条件下情况为Y的概率是多少，X可以理解为特征。</p><p>既然是条件概率，那一定满足概率的定义：</p><ul><li>$0\leq P(Y|X)\leq 1$</li><li>$\sum_y P(Y|X)=1$</li></ul><p>由此显而易见，线性回归$P(Y|X)=w^Tx+b$ 不能是逻辑回归。但是通过任意函数将P(Y|X)映射到[0,1]都可称为逻辑回归，最常用的就是逻辑函数。</p><h4 id="逻辑函数"><a href="#逻辑函数" class="headerlink" title="逻辑函数"></a>逻辑函数</h4><script type="math/tex; mode=display">y=\frac{1}{1+e^{-x}}</script><p>这个简单又明了的就是大名鼎鼎的逻辑函数，在神经网络里也叫sigmod函数。他将$x\in (-\infty,\infty)$映射到(0,1)</p><p>这就满足了概率的条件。即$P(Y|X)=\frac{1}{1+e^{-{w^Tx+b}}}$</p><h4 id="逻辑回归是线性的"><a href="#逻辑回归是线性的" class="headerlink" title="逻辑回归是线性的"></a>逻辑回归是线性的</h4><p>​    逻辑回归是否线性应该从其决策边界来判断：</p><script type="math/tex; mode=display">p(1|x)=p(0|x) \rightarrow -w^tx+b=0</script><p>可见其决策边界是线性的。</p><h2 id="Pytorch-实现"><a href="#Pytorch-实现" class="headerlink" title="Pytorch 实现"></a>Pytorch 实现</h2><h3 id="loss函数-目标函数"><a href="#loss函数-目标函数" class="headerlink" title="loss函数|目标函数"></a>loss函数|目标函数</h3><p>由于:</p><script type="math/tex; mode=display">p(y=1|x,w,b)=\frac{1}{1+e^{-{w^Tx+b}}} \\p(y=0|x,w,b)=\frac{e^{-{w^Tx+b}}}{1+e^{-{w^Tx+b}}}</script><p>可以统一写成：</p><script type="math/tex; mode=display">p(y|x,w,b)=p(y=0|x)^{(1-y)}+p(y=1|x)^{y}\\\rightarrow \ log \ p(y|x)=(1-true_y)log\ p(y=0|x)+true_ylog \ p(y=1|x)</script><p>从而我们只需要求解:</p><script type="math/tex; mode=display">w_{MLE},b_{MLE}=argmax_{w,b}( \sum_{i=1}^{n} log\ p(y_i|x_i))</script><p>上式也叫目标函数</p><h3 id="预测评估方法"><a href="#预测评估方法" class="headerlink" title="预测评估方法"></a>预测评估方法</h3><div class="tip warning"><p>当样本种类不均衡时，准确率可能就没有那么客观，所以需要其他评价标准</p></div><p>对于一个分类模型，假设二分类，则一定有如下表格（1）：</p><p>Correct 纵列之和为真实label=1的总量。</p><p>Not Correct 纵列之和为真实label=0的总量</p><div class="table-container"><table><thead><tr><th></th><th>Correct</th><th>Not Correct</th></tr></thead><tbody><tr><td>Selected</td><td>True Positive</td><td>False Positive</td></tr><tr><td>Not Selected</td><td>False Negative</td><td>True Negative</td></tr></tbody></table></div><h4 id="精确率-precision"><a href="#精确率-precision" class="headerlink" title="精确率(precision)"></a>精确率(precision)</h4><p>预测正样本中 ground truth 的比例：</p><script type="math/tex; mode=display">P(selected)=\frac{TP}{TP+FP}\\P(not selected)=\frac{FN}{FN+TN}</script><h4 id="召回率-recall"><a href="#召回率-recall" class="headerlink" title="召回率 (recall)"></a>召回率 (recall)</h4><p>ground truth中预测正确的比例：</p><script type="math/tex; mode=display">P(selected)=\frac{TP}{TP+FN} \\P(not selected)=\frac{FN}{TP+FN}</script><h4 id="F1-score"><a href="#F1-score" class="headerlink" title="F1-score"></a>F1-score</h4><p>通过召回率和精确率综合评判模型的指标：</p><script type="math/tex; mode=display">P=\frac{2*precision*recall}{precision+recall}</script><h4 id="mAP-mean-Average-Precision"><a href="#mAP-mean-Average-Precision" class="headerlink" title="mAP(mean Average Precision)"></a>mAP(mean Average Precision)</h4><p><a href="https://www.zhihu.com/question/53405779/answer/993913699">数据参考：目标检测中的mAP是什么含义- 资质平平的AI的回答 - 知乎</a></p><p>​    对于目标检测类问题，总是会在评估里面看到mAP。从字面上来看就是precision的平均，但是怎么样平均呢？</p><p>​    首先还是介绍一下目标检测里的正样本：对于一个Bounding Box，IOU&gt;0.5则认为是一个正样本GT=1,否则为负样本。</p><p>​    按照confident 从大到小（数值相同序号小的在前<del>没影响</del>）然后就可以列出类似下表：</p><p>假设表为全部的Bounding Box，且GroundTruth总和为3</p><div class="tip warning"><p>实际上GroundTruth总和是IOU&gt;thresh的样本总和</p></div><div class="table-container"><table><thead><tr><th style="text-align:center">Rank</th><th style="text-align:center">Image id</th><th style="text-align:center">BoundBox预测概率 (confident)</th><th style="text-align:center">GroundTruth</th><th style="text-align:center">Sum of TP</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">5</td><td style="text-align:center">0.95</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">7</td><td style="text-align:center">0.95</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">0.91</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">0.88</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">0.84</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">1</td><td style="text-align:center">0.80</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">4</td><td style="text-align:center">0.78</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">2</td><td style="text-align:center">0.74</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">2</td><td style="text-align:center">0.71</td><td style="text-align:center">0</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">1</td><td style="text-align:center">0.70</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr></tbody></table></div><p>根据confident的离散排列，可绘制多个上表 （1），下举几个例子方便理解。</p><div class="tabs" id="例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例-1">Rank3</button></li><li class="tab"><button type="button" data-href="#例-2">Rank5</button></li><li class="tab"><button type="button" data-href="#例-3">规律</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例-1"><p>confident_rank3 <del>第三行之前包括第三行</del> 预测为selected，否则为not selected。</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Correct</th><th style="text-align:center">Not Correct</th></tr></thead><tbody><tr><td style="text-align:center">Selected</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">Not Selected</td><td style="text-align:center">1</td><td style="text-align:center">6</td></tr></tbody></table></div><p>此时 precision=0.66，recall=2/3=0.66</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例-2"><p>confident_rank5  <del>第五行包括第五行</del> 同上规律列出下表</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Correct</th><th style="text-align:center">Not Correct</th></tr></thead><tbody><tr><td style="text-align:center">Selected</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">Not Selected</td><td style="text-align:center">1</td><td style="text-align:center">4</td></tr></tbody></table></div><p>precision=0.4，recall=2/3=0.66</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例-3"><p>由前面两个例子和表，可得如下规律：</p><script type="math/tex; mode=display">\begin{cases}Precision=\frac{sum\ of\ TP}{Rank} \\Recall=\frac{sum\ of\ TP}{sum\ of\ GT}\end{cases}</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>通过上式可得到各个rank的精确率和召回率</p><div class="table-container"><table><thead><tr><th style="text-align:center">Rank</th><th style="text-align:center">Precision</th><th style="text-align:center">Recall</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1/1=1</td><td style="text-align:center">1/3=0.33</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1/2=0.5</td><td style="text-align:center">1/3=0.33</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2/3=0.66</td><td style="text-align:center">2/3=0.66</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">2/4=0.50</td><td style="text-align:center">2/3=0.66</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">2/5=0.40</td><td style="text-align:center">2/3=0.66</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">2/6=0.33</td><td style="text-align:center">2/3=0.66</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">2/7=0.2857</td><td style="text-align:center">2/3=0.66</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">2/8=0.25</td><td style="text-align:center">2/3=0.66</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">2/9=0.222</td><td style="text-align:center">2/3=0.66</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">3/10=0.33</td><td style="text-align:center">3/3=1</td></tr></tbody></table></div><div class="tabs" id="介绍"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#介绍-1">VOC2010以前</button></li><li class="tab"><button type="button" data-href="#介绍-2">VOC2010以后</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="介绍-1"><p>分别以$recall \geq [0,0.1 \ldots ,0.9,1] $​​​ 为横坐标，满足recall范围的最大Precision为纵坐标画图。</p><script type="math/tex; mode=display">mAP=\frac{\sum_{i=0}^{10}Precision(recall[i])}{11}\\</script><div class="tip info"><p>Precision(recall[i])是通过插值法求出的近似值</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="介绍-2"><p>分别以$recall\in[0.33,0.66.1] $​​​​​​​ 为横坐标，对于每个recall[i]，纵坐标为满足大于recall[i]范围的最大Precision，mAP即为直线下的’面积’：</p><script type="math/tex; mode=display">mAP=(0.33-0)*1 + (0.66-0.33)*0.66 + (1-0.66)*0.33</script><p>横坐标选取根据计算出的recall去重得到。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="MAP-Maximum-A-Posteriori"><a href="#MAP-Maximum-A-Posteriori" class="headerlink" title="MAP(Maximum A Posteriori)"></a>MAP(Maximum A Posteriori)</h4><p>这个与前面完全不同<del>可能也有点关系</del>，注意m的大小写代表完全不同的含义！！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><del>就随便一写，数据自己看着造吧，precision好低</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2021/7/26 15:31</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_score,recall_score</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logistic</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,inputs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Logistic, self).__init__()</span><br><span class="line">        self.fc1=nn.Linear(inputs,<span class="number">1</span>)</span><br><span class="line">        self.activation2=nn.Sigmoid()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,<span class="built_in">input</span></span>):</span></span><br><span class="line"></span><br><span class="line">        x=self.fc1(<span class="built_in">input</span>)</span><br><span class="line">        x=self.activation2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Dataset</span>(<span class="params">Dataset</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,data,transforms=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.data=data</span><br><span class="line">        self.transforms=transforms</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        x=self.data[item,:-<span class="number">1</span>]</span><br><span class="line">        label=self.data[item,-<span class="number">1</span>:]</span><br><span class="line">        x=torch.tensor(x,dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">        label=torch.tensor(label,dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">        <span class="comment"># if self.transforms!=None:</span></span><br><span class="line">        <span class="comment">#     x=self.transforms(x)</span></span><br><span class="line">        <span class="keyword">return</span> x,label</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">Batchsize=<span class="number">1</span></span>):</span></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;use &#x27;</span>, device)</span><br><span class="line"></span><br><span class="line">    fea = pd.read_excel(<span class="string">&#x27;./fea1.xlsx&#x27;</span>)</span><br><span class="line">    <span class="comment"># with open(&#x27;./data.txt&#x27;,&#x27;r&#x27;) as f:</span></span><br><span class="line">    <span class="comment">#     data=f.readlines()</span></span><br><span class="line">    data = fea.to_numpy()</span><br><span class="line">    tot,dim=data.shape</span><br><span class="line">    train_size=<span class="built_in">int</span>(tot*<span class="number">0.7</span>)</span><br><span class="line">    val_size=tot-train_size</span><br><span class="line">    data = My_Dataset(data=data)</span><br><span class="line">    train_data, val_data = torch.utils.data.random_split(data, [train_size, val_size])</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_data, batch_size=Batchsize, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">    val_loader = torch.utils.data.DataLoader(val_data, batch_size=Batchsize, num_workers=<span class="number">0</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    model = Logistic(dim-<span class="number">1</span>)</span><br><span class="line">    params = [i <span class="keyword">for</span> i <span class="keyword">in</span> model.parameters()]</span><br><span class="line">    <span class="comment"># optimizer = torch.optim.SGD(params=params, lr=0.03,momentum=0.9, weight_decay=0.0005)</span></span><br><span class="line">    optimizer=torch.optim.Adam(params=params,lr=<span class="number">0.003</span>)</span><br><span class="line">    <span class="comment"># loss_func=Loss_func()</span></span><br><span class="line">    loss_func=torch.nn.BCELoss()</span><br><span class="line">    Epoch = <span class="built_in">int</span>(<span class="number">1e5</span>+<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(Epoch):</span><br><span class="line">        model.train()</span><br><span class="line">        running_loss = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> train_loader:</span><br><span class="line">            x, label = data</span><br><span class="line">            pre_logits_list = model(x)</span><br><span class="line">            loss = loss_func(pre_logits_list,label)</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            running_loss = loss.item() + running_loss</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> epoch%<span class="number">100</span>==<span class="number">0</span>:</span><br><span class="line">            model.<span class="built_in">eval</span>()</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line"></span><br><span class="line">                acc=<span class="number">0</span></span><br><span class="line">                true_label=[]</span><br><span class="line">                pre_label=[]</span><br><span class="line">                <span class="keyword">for</span> data <span class="keyword">in</span> val_loader:</span><br><span class="line">                    x,label=data</span><br><span class="line">                    pre_logits_list=model(x)</span><br><span class="line">                    predict_y =pre_logits_list.ge(<span class="number">0.5</span>).<span class="built_in">float</span>()</span><br><span class="line">                    <span class="comment"># precisious F1_score</span></span><br><span class="line">                    acc += torch.eq(predict_y,label).<span class="built_in">sum</span>().item()</span><br><span class="line">                    pre_label+=predict_y</span><br><span class="line">                    true_label+=label</span><br><span class="line">                <span class="comment"># w0, w1 = model.fc1.weight[0]</span></span><br><span class="line">                <span class="comment"># w0 = float(w0.item())</span></span><br><span class="line">                <span class="comment"># w1 = float(w1.item())</span></span><br><span class="line">                <span class="comment"># b = float(model.fc1.bias.item())</span></span><br><span class="line">                <span class="comment"># plot_x = np.arange(-7, 7, 0.1)</span></span><br><span class="line">                <span class="comment"># plot_y = (-w0 * plot_x - b) / w1</span></span><br><span class="line">                <span class="comment"># num = fea.to_numpy()</span></span><br><span class="line">                <span class="comment"># plt.scatter(num[:, 0], num[:, 1], c=num[:, 2])</span></span><br><span class="line">                <span class="comment"># plt.plot(plot_x, plot_y)</span></span><br><span class="line">                <span class="comment"># plt.show()</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;loss:&#x27;</span>, running_loss)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;epoch:&#x27;</span>,epoch,<span class="string">&#x27;acc:&#x27;</span>,acc/val_size)</span><br><span class="line">            pre_score=precision_score(y_pred=pre_label,y_true=true_label,average=<span class="string">&#x27;binary&#x27;</span>)</span><br><span class="line">            re_score=recall_score(y_true=true_label,y_pred=pre_label,average=<span class="string">&#x27;binary&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                F1_score=<span class="number">2</span>*pre_score*re_score/(pre_score+re_score)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;精确率:&#x27;</span>, pre_score, <span class="string">&#x27;召回率:&#x27;</span>, re_score, <span class="string">&#x27;F1score:&#x27;</span>, F1_score)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(Batchsize=<span class="number">32</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown公式记录</title>
      <link href="/p/21773.html"/>
      <url>/p/21773.html</url>
      
        <content type="html"><![CDATA[<div class="tip success"><p>每次打公式都要参考百度各种，遂记录</p></div><div class="tip "><p>主要参考于<a href="http://mohu.org/info/symbols/symbols.htm">mohu.org</a></p></div><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><div class="tabs" id="特殊符号"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#特殊符号-1">样式预览</button></li><li class="tab"><button type="button" data-href="#特殊符号-2">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="特殊符号-1"><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>普通省略号: $\ldots$</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>斜省略号: $\ddots$</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>波浪: $\sim$</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>度: $C^{\circ}$</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>下画线: $\underline{saftext}$</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>下取整: $\lfloor ftext\rfloor$</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>撇: $^\prime$​</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="特殊符号-2"><p>$$</p><p>\ldots \\\</p><p>\ddots \\\</p><p>\sim \\\</p><p>\circ \\\</p><p>\underline{text}</p><p>\lfloor ftext \rfloor</p><p>\prime</p><p>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="常用数学符号表"><a href="#常用数学符号表" class="headerlink" title="常用数学符号表"></a>常用数学符号表</h2><div class="tabs" id="常用数学符号"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#常用数学符号-1">数学字符</button></li><li class="tab"><button type="button" data-href="#常用数学符号-2">二元关系符 1</button></li><li class="tab"><button type="button" data-href="#常用数学符号-3">二元关系符 2</button></li><li class="tab"><button type="button" data-href="#常用数学符号-4">箭头和大尺寸运算符</button></li><li class="tab"><button type="button" data-href="#常用数学符号-5">花体</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="常用数学符号-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716111256.png" style="height:70vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="常用数学符号-2"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716115841.png" style="height:70vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="常用数学符号-3"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716120007.png" style="height:70vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="常用数学符号-4"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716120345.png" style="height:70vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="常用数学符号-5"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716120537.png" alt="typora里面可以直接使用只有两个" style="height:70vh;"/></div><span class="image-caption">typora里面可以直接使用只有两个</span></div><p>$\mathbb{AF}和\mathcal{AF}$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">样式预览</button></li><li class="tab"><button type="button" data-href="#-2">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>这是一句话<sup><a href="#fn_1" id="reffn_1">1</a></sup></p><blockquote id="fn_1"><sup>1</sup>. 脚注1，本博客渲染这个不是很美观，什么时候修改一下<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>这是一句话[^1]</p><p>[^1]:脚注1</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><div class="tabs" id="其他"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#其他-1">其他符号</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="其他-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716121023.png" style="height:70vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="括号"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#括号-1">杂项</button></li><li class="tab"><button type="button" data-href="#括号-2">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="括号-1"><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>大括号: $\begin{cases} xxx \end{cases}$</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>矩阵括号 <script type="math/tex">P=\left\{ \begin{matrix} 0 & 0 & 0 & 0 & 1 \\ 0 & 0.3& 0 & 0 &0.7 \\ 0 & 0.4& 0.3&0 &0.3 \\ 0 & 0.2& 0.4&0.3&0.1\\ 0 & 0.1& 0.2&0.4&0.3\\ \end{matrix}\right\}</script>​</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>等号对齐 $ \begin{aligned}p&amp;=sadaf \ q&amp;=sdfff \ \end{aligned} $</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="括号-2"><p>$$</p><p>\begin{cases}</p><p>xxx \\</p><p>\end{cases}</p><p>P=\left{ \\begin{matrix}<br>0  &amp; 0 &amp; 0 &amp; 0 &amp; 1   \\<br>0  &amp; 0.3&amp; 0 &amp; 0 &amp;0.7 \\<br>0  &amp; 0.4&amp; 0.3&amp;0 &amp;0.3 \\<br>0  &amp; 0.2&amp; 0.4&amp;0.3&amp;0.1\\<br>0  &amp; 0.1&amp; 0.2&amp;0.4&amp;0.3 \\<br>\\end{matrix}\right}</p><p>\begin{aligned}</p><p>p&amp;=sadaf \\</p><p>q&amp;=sdfff  \\</p><p>\end{aligned}</p><p>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载,文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本无约束最优化实现代码</title>
      <link href="/p/51816.html"/>
      <url>/p/51816.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>数模总结写着写着发现最优化上机代码似乎还没留存😀<del>发现有篇博客没水很不是滋味</del></p><p>遂附上啦，都封装好了<del>自认为函数还行吧</del>只需要自行修改输入x0就可以自用了：</p><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>最速下降法</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>牛顿法</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>拟牛顿法</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>修正牛顿法</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>单纯性法</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>坐标轮换法</p>            </div><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_grad</span>(<span class="params">x, h</span>):</span>  <span class="comment"># 求梯度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># df=np.array()</span></span><br><span class="line">    df = np.zeros(x.size)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x.size):</span><br><span class="line">        x1, x2 = x.copy(), x.copy()  <span class="comment"># 这里需要用到复制，而不能用赋值号（=），原因是Python里面=号只是取别名，不是复制（c/c++里面是）</span></span><br><span class="line">        x1[i] = x[i] - h</span><br><span class="line">        x2[i] = x[i] + h</span><br><span class="line">        y1, y2 = f(x1), f(x2)</span><br><span class="line">        df[i] = (y2 - y1) / (<span class="number">2</span> * h)</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_hess</span>(<span class="params">x, h</span>):</span>  <span class="comment"># 求hess矩阵</span></span><br><span class="line">    hess = np.zeros((x.size, x.size))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x.size):</span><br><span class="line">        x1 = x.copy()</span><br><span class="line">        x1[i] = x[i] - h</span><br><span class="line">        df1 = num_grad(x1, h)</span><br><span class="line">        x2 = x.copy()</span><br><span class="line">        x2[i] = x[i] + h</span><br><span class="line">        df2 = num_grad(x2, h)</span><br><span class="line">        d2f = (df2 - df1) / (<span class="number">2</span> * h)</span><br><span class="line">        hess[i] = d2f</span><br><span class="line">    <span class="keyword">return</span> hess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linesearch</span>(<span class="params">x, pk:<span class="built_in">float</span>,f</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        黄金分割法</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    eps = <span class="number">0.001</span></span><br><span class="line">    r = <span class="number">500</span></span><br><span class="line">    l = -<span class="number">500</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> r - l &gt; eps:</span><br><span class="line">        t1 = l + <span class="number">0.382</span> * (r - l)</span><br><span class="line">        t2 = l + <span class="number">0.618</span> * (r - l)</span><br><span class="line"></span><br><span class="line">        x_1 = x+ t1 * pk</span><br><span class="line">        x_2 = x + t2 * pk</span><br><span class="line">        f1 = f(x_1)</span><br><span class="line">        f2 = f(x_2)</span><br><span class="line">        <span class="keyword">if</span> f1 &lt; f2:</span><br><span class="line">            r = t2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = t1</span><br><span class="line">        <span class="keyword">if</span> t2 - t1 &lt; eps:</span><br><span class="line">            <span class="keyword">return</span> t2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">steepest</span>(<span class="params">x,f,epsilon=<span class="number">0.01</span>,h=<span class="number">10</span>**-<span class="number">5</span>,maxiter=<span class="number">10</span>**<span class="number">4</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    最速下降法</span></span><br><span class="line"><span class="string">    :param x: 初始值</span></span><br><span class="line"><span class="string">    :param f: 函数</span></span><br><span class="line"><span class="string">    :param epsilon: eps</span></span><br><span class="line"><span class="string">    :param h: 求导的delta x</span></span><br><span class="line"><span class="string">    :param maxiter: 最大迭代次数</span></span><br><span class="line"><span class="string">    :return: 答案的list用于画图</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    x_list=[]</span><br><span class="line">    ans_list=[]</span><br><span class="line">    x_list.append(x)</span><br><span class="line">    ans_list.append(f(x))</span><br><span class="line">    <span class="keyword">for</span> iter1 <span class="keyword">in</span> <span class="built_in">range</span>(maxiter):</span><br><span class="line">        grad = num_grad(x, h)</span><br><span class="line"></span><br><span class="line">        pk = -grad</span><br><span class="line">        ak = linesearch(x, pk,f)</span><br><span class="line">        x = x + ak * pk</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;grad:&#x27;</span>, grad, <span class="string">&#x27;x_&#123;i+1&#125;:&#x27;</span>, x, <span class="string">&#x27;t:&#x27;</span>, ak,<span class="string">&#x27;ans:&#x27;</span>,f(x))</span><br><span class="line">        x_list.append(x)</span><br><span class="line">        ans_list.append(f(x))</span><br><span class="line">        <span class="keyword">if</span> np.linalg.norm(grad) &lt; epsilon:</span><br><span class="line">            <span class="keyword">return</span> x_list,ans_list</span><br><span class="line">    <span class="keyword">return</span> x_list,ans_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newTonFuction</span>(<span class="params">x,f,epsilon=<span class="number">0.01</span>,h1=<span class="number">10</span>**-<span class="number">5</span>,h2=<span class="number">10</span>**-<span class="number">5</span>,maxiter=<span class="number">10</span>**<span class="number">4</span></span>):</span>  <span class="comment"># 牛顿法</span></span><br><span class="line"></span><br><span class="line">    x_list=[]</span><br><span class="line">    ans_list=[]</span><br><span class="line">    x_list.append(x)</span><br><span class="line">    ans_list.append(f(x))</span><br><span class="line">    <span class="keyword">for</span> iter1 <span class="keyword">in</span> <span class="built_in">range</span>(maxiter):</span><br><span class="line">        grad = num_grad(x, h1)</span><br><span class="line"></span><br><span class="line">        hess = num_hess(x, h2)</span><br><span class="line">        pk = -np.dot((np.linalg.inv(hess)), grad)</span><br><span class="line">        x = x + pk</span><br><span class="line">        x_list.append(x)</span><br><span class="line">        ans_list.append(f(x))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;grad:&#x27;</span>, grad, <span class="string">&#x27;x_&#123;i+1&#125;:&#x27;</span>, x, <span class="string">&#x27;ans:&#x27;</span>, f(x))</span><br><span class="line">        <span class="keyword">if</span> np.linalg.norm(grad) &lt; epsilon:</span><br><span class="line">            <span class="keyword">return</span> x_list,ans_list</span><br><span class="line">    <span class="keyword">return</span> x_list,ans_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFGS</span>(<span class="params">x,f,epsilon=<span class="number">0.01</span>,h=<span class="number">10</span>**-<span class="number">5</span>,maxiter=<span class="number">10</span>**<span class="number">4</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    拟牛顿法</span></span><br><span class="line"><span class="string">    :param x: 初始点</span></span><br><span class="line"><span class="string">    :param f: 求解函数</span></span><br><span class="line"><span class="string">    :param epsilon: eps</span></span><br><span class="line"><span class="string">    :param h: 求导的delta x</span></span><br><span class="line"><span class="string">    :param maxiter: 最大迭代数</span></span><br><span class="line"><span class="string">    :return: 答案的list便于画图</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    Bk = np.eye(x.size)</span><br><span class="line">    x_list=[]</span><br><span class="line">    ans_list=[]</span><br><span class="line">    x_list.append(x)</span><br><span class="line">    ans_list.append(f(x))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxiter):</span><br><span class="line">        grad = num_grad(x, h)</span><br><span class="line"></span><br><span class="line">        pk = -np.dot((np.linalg.inv(Bk)), grad)</span><br><span class="line">        ak = linesearch(x, pk,f)</span><br><span class="line">        x = x + pk * ak</span><br><span class="line">        yk = num_grad(x, h) - grad</span><br><span class="line">        sk = ak * pk</span><br><span class="line">        <span class="keyword">if</span> np.dot(yk.reshape(<span class="number">1</span>, grad.shape[<span class="number">0</span>]), sk) &gt; <span class="number">0</span>:</span><br><span class="line">            Bk = Bk - np.dot(np.dot(np.dot(Bk, sk).reshape(sk.shape[<span class="number">0</span>], <span class="number">1</span>), sk.reshape(<span class="number">1</span>, sk.shape[<span class="number">0</span>])), Bk)\</span><br><span class="line">                 / np.dot(np.dot(sk.reshape(<span class="number">1</span>, sk.shape[<span class="number">0</span>]), Bk), sk) + \</span><br><span class="line">                 np.dot(yk.reshape(yk.shape[<span class="number">0</span>], <span class="number">1</span>),yk.reshape(<span class="number">1</span>, yk.shape[<span class="number">0</span>])) / \</span><br><span class="line">                 np.dot(yk.reshape(<span class="number">1</span>, yk.shape[<span class="number">0</span>]), sk)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;grad&#123;%d&#125;:&#x27;</span> % (i + <span class="number">1</span>), np.<span class="built_in">round</span>(num_grad(x, h), <span class="number">3</span>),</span><br><span class="line">              <span class="string">&#x27;p&#123;%d&#125;:&#x27;</span> % (i + <span class="number">1</span>), np.<span class="built_in">round</span>(pk, <span class="number">3</span>),</span><br><span class="line">              <span class="string">&#x27;x_&#123;%d&#125;:&#x27;</span> % (i + <span class="number">1</span>), np.<span class="built_in">round</span>(x, <span class="number">3</span>), f(x))</span><br><span class="line">        x_list.append(x)</span><br><span class="line">        ans_list.append(f(x))</span><br><span class="line">        <span class="keyword">if</span> np.linalg.norm(grad) &lt; epsilon:</span><br><span class="line">            <span class="keyword">return</span> x_list,ans_list</span><br><span class="line">    <span class="keyword">return</span> x_list,ans_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_newton</span>(<span class="params">x,f,epsilon=<span class="number">0.01</span>,h1=<span class="number">10</span>**-<span class="number">5</span>,h2=<span class="number">10</span>**-<span class="number">5</span>,maxiter=<span class="number">10</span>**<span class="number">4</span></span>):</span></span><br><span class="line">    ans_list=[]</span><br><span class="line">    x_list=[]</span><br><span class="line">    x_list.append(x)</span><br><span class="line">    ans_list.append(f(x))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxiter):</span><br><span class="line">        grad=num_grad(x,h1)</span><br><span class="line">        hess = num_hess(x, h2)</span><br><span class="line">        pk = -np.dot((np.linalg.inv(hess)), grad)</span><br><span class="line">        t=linesearch(x,pk,f)</span><br><span class="line">        x = x + pk*t</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;grad:&#x27;</span>,np.<span class="built_in">round</span>(grad,<span class="number">3</span>),<span class="string">&#x27;pk:&#x27;</span>,np.<span class="built_in">round</span>(pk,<span class="number">3</span>),<span class="string">&#x27;t:&#x27;</span>,np.<span class="built_in">round</span>(t,<span class="number">3</span>),<span class="string">&#x27;x_&#123;%d&#125;:&#x27;</span>%i,np.<span class="built_in">round</span>(x,<span class="number">3</span>),f(x))</span><br><span class="line">        x_list.append(x)</span><br><span class="line">        ans_list.append(f(x))</span><br><span class="line">        <span class="keyword">if</span> np.linalg.norm(grad)&lt;epsilon:</span><br><span class="line">            <span class="keyword">return</span> x_list,ans_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_list,ans_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conjugate_gradient</span>(<span class="params">x,f,epsilon=<span class="number">0.01</span>,h1=<span class="number">10</span>**-<span class="number">5</span>,h2=<span class="number">10</span>**-<span class="number">5</span>,maxiter=<span class="number">10</span>**<span class="number">4</span></span>):</span></span><br><span class="line">    ans_list = []</span><br><span class="line">    x_list = []</span><br><span class="line">    x_list.append(x)</span><br><span class="line">    ans_list.append(f(x))</span><br><span class="line">    pk=-num_grad(x,h1)</span><br><span class="line">    <span class="keyword">if</span> np.linalg.norm(pk)&lt;epsilon:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxiter):</span><br><span class="line"></span><br><span class="line">        grad=num_grad(x,h1)</span><br><span class="line">        t=np.<span class="built_in">round</span>(linesearch(x,pk,f),<span class="number">2</span>)</span><br><span class="line">        used_x=x.copy()</span><br><span class="line">        x = x + pk*t</span><br><span class="line"></span><br><span class="line">        pk=-num_grad(x,h1)+(np.linalg.norm(num_grad(x,h1))**<span class="number">2</span>/np.linalg.norm(num_grad(used_x,h1))**<span class="number">2</span>)*pk</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;grad&#123;%d&#125;:&#x27;</span>%(i+<span class="number">1</span>),np.<span class="built_in">round</span>(num_grad(x,h1),<span class="number">3</span>),<span class="string">&#x27;p&#123;%d&#125;:&#x27;</span>%(i+<span class="number">1</span>),np.<span class="built_in">round</span>(pk,<span class="number">3</span>),<span class="string">&#x27;t_&#123;%d&#125;:&#x27;</span>%(i+<span class="number">1</span>),np.<span class="built_in">round</span>(t,<span class="number">3</span>),<span class="string">&#x27;x_&#123;%d&#125;:&#x27;</span>%(i+<span class="number">1</span>),np.<span class="built_in">round</span>(x,<span class="number">3</span>),f(x))</span><br><span class="line">        x_list.append(x)</span><br><span class="line">        ans_list.append(f(x))</span><br><span class="line">        <span class="keyword">if</span> np.linalg.norm(grad)&lt;epsilon:</span><br><span class="line">            <span class="keyword">return</span> x_list,ans_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_list,ans_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplex_method</span>(<span class="params">x:<span class="built_in">list</span>,f,maxiter:<span class="built_in">int</span>=<span class="number">100</span>,alpha:<span class="built_in">float</span>=<span class="number">1.</span>,beta:<span class="built_in">float</span>=<span class="number">1.</span>,epsilon:<span class="built_in">float</span>=<span class="number">0.01</span></span>):</span></span><br><span class="line"></span><br><span class="line">    temp_x_list=x</span><br><span class="line">    x_list=[]</span><br><span class="line">    ans_list=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxiter):</span><br><span class="line">        l=[]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> temp_x_list:</span><br><span class="line">            l.append(f(j))</span><br><span class="line">        l=np.array(l)</span><br><span class="line">        x_min = temp_x_list[l.argsort()[<span class="number">0</span>]]</span><br><span class="line">        x_mid = temp_x_list[l.argsort()[<span class="number">1</span>]]</span><br><span class="line">        x_max = temp_x_list[l.argsort()[<span class="number">2</span>]]</span><br><span class="line">        loss=<span class="built_in">sum</span>([(f(j)-f(x_min))**<span class="number">2</span> <span class="keyword">for</span> j <span class="keyword">in</span> x])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        tempx=(np.<span class="built_in">sum</span>(x,axis=<span class="number">0</span>)-x_max)/ (<span class="built_in">len</span>(x)-<span class="number">1</span>)</span><br><span class="line">        reflect_x=<span class="number">2</span>*tempx-x_max</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;reflect_x:&#x27;</span>,reflect_x)</span><br><span class="line">        <span class="keyword">if</span> f(x_min)&gt;f(reflect_x):</span><br><span class="line">            inflation_x=tempx+alpha*(reflect_x-tempx)</span><br><span class="line">            <span class="keyword">if</span> f(inflation_x)&lt;f(reflect_x):</span><br><span class="line">                temp_x_list[l.argsort()[<span class="number">2</span>]]=inflation_x</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp_x_list[l.argsort()[<span class="number">2</span>]]=reflect_x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;f(x_min):%.3f&gt;f(reflect):%.3f&#x27;</span>%(f(x_min),f(reflect_x)))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;inflation_x:&#x27;</span>,inflation_x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> f(x_min)&lt;=f(reflect_x) <span class="keyword">and</span> f(reflect_x)&lt;f(x_mid):</span><br><span class="line">            temp_x_list[l.argsort()[<span class="number">2</span>]]=reflect_x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;f(x_min):%.3f&lt;=f(reflect):%.3f&lt;=f(x_mid):%.3f&#x27;</span> % (f(x_min), f(reflect_x),f(x_mid)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> f(x_mid)&lt;=f(reflect_x) <span class="keyword">and</span> f(reflect_x)&lt;f(x_max):</span><br><span class="line">            shrink_x=tempx+beta*(reflect_x-tempx)</span><br><span class="line">            temp_x_list[l.argsort()[<span class="number">2</span>]]=shrink_x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;f(x_mid):%.3f&lt;=f (reflect):%.3f &lt;f(x_max):%.3f&#x27;</span> % (f(x_mid),f(reflect_x), f(x_max)))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;shrink_x:&#x27;</span>,shrink_x)</span><br><span class="line">        <span class="keyword">if</span> f(reflect_x)&gt;=f(x_max):</span><br><span class="line">            <span class="comment"># 是xmax ！</span></span><br><span class="line">            shrink_x=tempx+beta*(x_max-tempx)</span><br><span class="line">            <span class="keyword">if</span> f(shrink_x)&gt;f(x_max):</span><br><span class="line">                <span class="comment"># shrink too less</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> x:</span><br><span class="line">                    j=(x_min+j)/<span class="number">2</span></span><br><span class="line">                temp_x_list=x</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp_x_list[l.argsort()[<span class="number">2</span>]]=shrink_x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;f(reflect):%.3f&gt;f(x_max):%.3f&#x27;</span> % (f(reflect_x),f(reflect_x)))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;shrink_x:&#x27;</span>,shrink_x)</span><br><span class="line">        <span class="comment"># print(&quot;xmin:&quot;,x_min,&#x27;xmid:&#x27;,x_mid,&#x27;xmax:&#x27;,x_max)</span></span><br><span class="line">        <span class="comment"># print(&#x27;min:&#x27;,f(x_min),&#x27;fmid&#x27;,f(x_mid),&#x27;fmax&#x27;,f(x_max))</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;temp_x_list:&#x27;</span>,temp_x_list)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;loss:%.3f&#x27;</span> % loss)</span><br><span class="line">        <span class="keyword">if</span> loss &lt; epsilon:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        x_list.append(x_min)</span><br><span class="line">        ans_list.append(f(x_min))</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">return</span> x_list,ans_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cyclic_coordinate_method</span>(<span class="params">x:<span class="built_in">list</span>,f,epsilon:<span class="built_in">float</span>=<span class="number">0.01</span>,h1:<span class="built_in">float</span>=<span class="number">1e-5</span>,maxiter:<span class="built_in">int</span>=<span class="number">100</span></span>):</span></span><br><span class="line">    ans_list = []</span><br><span class="line">    x_list = []</span><br><span class="line">    x_list.append(x)</span><br><span class="line">    ans_list.append(f(x))</span><br><span class="line"></span><br><span class="line">    I=np.eye(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(maxiter):</span><br><span class="line">        used_x=x.copy()</span><br><span class="line">        <span class="keyword">for</span> pk <span class="keyword">in</span> I:</span><br><span class="line">            t = np.<span class="built_in">round</span>(linesearch(x, pk,f),<span class="number">2</span>)</span><br><span class="line">            x = x + pk * t</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;p&#123;%d&#125;:&#x27;</span> % (i + <span class="number">1</span>), np.<span class="built_in">round</span>(pk, <span class="number">3</span>),</span><br><span class="line">              <span class="string">&#x27;t_&#123;%d&#125;:&#x27;</span> % (i + <span class="number">1</span>), np.<span class="built_in">round</span>(t, <span class="number">2</span>), <span class="string">&#x27;x_&#123;%d&#125;:&#x27;</span> % (i + <span class="number">1</span>), np.<span class="built_in">round</span>(x, <span class="number">3</span>), f(x),<span class="string">&#x27;eps:&#x27;</span>,np.linalg.norm(used_x-x))</span><br><span class="line">        x_list.append(x)</span><br><span class="line">        ans_list.append(f(x))</span><br><span class="line">        <span class="keyword">if</span>  np.linalg.norm(used_x-x)&lt; epsilon:</span><br><span class="line">            <span class="keyword">return</span> x_list,ans_list</span><br><span class="line">    <span class="keyword">return</span> x_list,ans_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>(<span class="params">x:<span class="built_in">list</span>=<span class="literal">None</span>,y:<span class="built_in">list</span>=<span class="literal">None</span>,ans:<span class="built_in">list</span>=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line">    fig=plt.figure()</span><br><span class="line">    ax = fig.gca(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    x1 = np.linspace(<span class="built_in">min</span>(x),<span class="built_in">max</span>(x), <span class="number">100</span>)</span><br><span class="line">    x2 = np.linspace(<span class="built_in">min</span>(x), <span class="built_in">max</span>(x), <span class="number">100</span>)</span><br><span class="line">    <span class="comment"># print(f(x1,x2))</span></span><br><span class="line"></span><br><span class="line">    tempx, tempy = np.meshgrid(x1, x2)</span><br><span class="line">    surf = ax.plot_surface(tempx, tempy, f([tempx,tempy]), cmap=cm.jet, zorder=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    scat=ax.scatter(x,y,ans,zorder=<span class="number">1000</span>,marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    line=ax.plot(x,y,ans,zorder=<span class="number">100</span>,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">    contour=ax.contour(tempx,tempy,f([tempx,tempy]),<span class="number">50</span>,zorder=<span class="number">100000</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span>  <span class="comment"># 目标函数</span></span><br><span class="line">    x1 = x[<span class="number">0</span>]</span><br><span class="line">    x2 = x[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># test</span></span><br><span class="line">    y=x1**<span class="number">2</span>+x2**<span class="number">2</span>+(x2-<span class="number">1</span>)**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y=(x1-2)**4+(x1-2*x2)**2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修正牛顿法函数</span></span><br><span class="line">    <span class="comment"># y = 4*(x1+1)**2 +2*(x2-1)**2+x1+x2+10</span></span><br><span class="line">    <span class="comment"># 最速下降法函数</span></span><br><span class="line">    <span class="comment"># y=x1**2+25*x2**2</span></span><br><span class="line">    <span class="comment"># 牛顿法函数</span></span><br><span class="line">    <span class="comment"># y=60-10*x1-4*x2+x1**2+x2**2-x1*x2</span></span><br><span class="line">    <span class="comment"># 共轭梯度法函数</span></span><br><span class="line">    <span class="comment"># y=x1**2+4*x2**2</span></span><br><span class="line">    <span class="comment"># DFP函数</span></span><br><span class="line">    <span class="comment"># y=4*(x1-5)**2+(x2-6)**2</span></span><br><span class="line">    <span class="comment"># 坐标轮换法</span></span><br><span class="line">    <span class="comment"># y=x1**2+2*x2**2-x1*x2-10*x1-4*x2+60</span></span><br><span class="line">    <span class="comment"># 单纯形法</span></span><br><span class="line">    <span class="comment"># y=x1**2+2*x2**2-4*x1-8*x2+5</span></span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 后面不附重复代码和函数</span></span><br><span class="line">    x0 = np.array([<span class="number">1.</span>, <span class="number">1.</span>])  <span class="comment"># 初始解</span></span><br><span class="line">    <span class="comment"># x1= np.array([0.965,0.259])</span></span><br><span class="line">    <span class="comment"># x2=np.array([0.259,0.965])</span></span><br><span class="line">    <span class="comment"># x_list,ans_list=simplex_method([x0,x1,x2],f,epsilon=0.1,alpha=1.1,beta=0.5)</span></span><br><span class="line">    x_list,ans_list=BFGS(x0,f,maxiter=<span class="number">100</span>)</span><br><span class="line">    draw([i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> x_list],[i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> x_list],ans_list)</span><br><span class="line">    <span class="comment"># 修正牛顿法</span></span><br><span class="line">    <span class="comment"># x_list,ans_list=modify_newton(x0)</span></span><br><span class="line">    <span class="comment"># 共轭梯度</span></span><br><span class="line">    <span class="comment"># x_list,ans_list=conjugate_gradient(x0)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最速下降法</span></span><br><span class="line">    <span class="comment"># x_list,ans_list = steepest(x0)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用牛顿法</span></span><br><span class="line">    <span class="comment"># x_list,ans_list = newTonFuction(x0)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用拟牛顿法</span></span><br><span class="line">    <span class="comment"># x_list,ans_list = BFGS(x0)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有bug可以自行修改一下linersearch范围试试，这种bug懂的都懂。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Tag Plugins Plus</title>
      <link href="/p/41070.html"/>
      <url>/p/41070.html</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>本文档为<a href="https://jq.qq.com/?_wv=1027&amp;k=EF1Elvqp">🧊Akilarの糖果屋🍭</a>出品，已经过作者同意转载。</p><p>若您在使用本帖教程后，发现样式无法完全还原，请重点排查您的其余第三方魔改css样式，例如css中是否存在<code>.circle</code>、<code>.square</code>等易重class名。</p></div><details red><summary> 点开查看开发记录 </summary>              <div class='content'>              <div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>本文所涉及的样式，主要参考的是各类已有主题，并对相应styl文件进行样式修改以及添加夜间模式适配。已尽可能追根溯源找到了各部分魔改内容最初的作者，如有错误和遗漏还请联系我修改。</p></div><div class="timeline"><p class='p h2'>开发记录</p><div class="timenode"><div class="meta"><p><p>2020-11-14:内测版v0.05</p></p></div><div class="body"><ol><li>主要使用了<a href="https://github.com/volantis-x/hexo-theme-volantis">Volantis</a>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。</li><li>主要参考内容<ul><li><a href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></li><li><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins）</a></li><li><a href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></li><li><a href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></li><li><a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></li></ul></li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-11-15:正式版v1.0</p></p></div><div class="body"><ol><li>基本完成Volantis外挂标签移植。</li><li>移除了btn标签，因为存在冲突。而且不如butterfly自带的button样式好看。</li><li>适配了folding标签的夜间模式。</li><li>打包了静态资源文件，上传蓝奏云。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-11-16:正式版v1.1</p></p></div><div class="body"><ol><li>新增tip.js，将小康大佬的渐变色上标标签写法从HTML的方式改成用标签语法编写。</li><li>新增动态标签样式anima，使用了fontawesome-animation项目。</li><li>新增标签内容夜间模式适配。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-03:正式版v1.2</p></p></div><div class="body"><ol><li>新增当初弃用的issues.js标签，以配合友链魔改教程中的issues自动更新功能。</li><li>更新了静态资源文件，请之前的读者重新覆盖安装。</li><li>修改了<code>fontawesome-animation.min.css</code>的引入方式，改成使用<code>@import</code>注入<code>index.css</code>。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-07:正式版v1.21</p></p></div><div class="body"><ol><li>资源文件无任何改动。</li><li>更新了动态标签的使用说明。补全参数配置，更换示例。使得教程更加通俗易懂。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-13:正式版v1.3</p></p></div><div class="body"><ol><li>新增Butterfly_v3.4.0的配置文件。</li><li>请读者根据自己的主题版本选择替换。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-17:正式版v1.4</p></p></div><div class="body"><ol><li>新增两个样式标签poem和icon</li><li>修复了folding标签嵌套字体逐级放大的bug。</li><li>不再更新v3.4.0以下版本的适配内容。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-31:正式版v1.5</p></p></div><div class="body"><ol><li>新增两个样式标签，github徽标ghbdage和特效标签wow</li><li>移除静态资源中的<code>fontawesome-animation.min.css</code>以及<code>issues.js</code>，改为CDN引用。</li><li>本帖不专门提供特效标签wow的配置方案，若有需要，请查看相关教程<a href="https://akilar.top/posts/abab51cf/">使用wowjs给博客添加动画效果</a></li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-02-24:正式版v1.6</p></p></div><div class="body"><ol><li>新增一个样式标签，进度条progress</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-03-19:正式版v1.61</p></p></div><div class="body"><ol><li>修复行内图片换行错误。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-07-07:发布插件版v1.0.0</p></p></div><div class="body"><ol><li>使用npm插件安装。</li><li>测试版本为butterfly_v3.1.0、3.3.0、3.7.8、3.8.0</li><li>插件写法调整为高内聚，理论上不受butterfly主题版本影响。</li><li>为了获得完整效果，建议打开主题的beautify配置项和theme_color配置项。</li></ol></div></div></div>              </div>            </details><div class="tabs" id="配置方案"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#配置方案-1">npm插件安装方案（推荐）</button></li><li class="tab"><button type="button" data-href="#配置方案-2">源码修改配置方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="配置方案-1"><ol><li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li>添加配置信息，以下为写法示例<br> 在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br></pre></td></tr></table></figure></li><li>参数释义</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">issues</td><td style="text-align:left">true/false</td><td style="text-align:left">【可选】issues标签控制开关，默认为false</td></tr><tr><td style="text-align:left">CDN.anima</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】动画标签anima的依赖</td></tr><tr><td style="text-align:left">CDN.jquery</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.issues</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.iconfont</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】iconfont标签symbol样式引入</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="配置方案-2"><ol><li>下载资源文件<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Akilarlxh/Tag_Plugins"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=Akilarlxh&repo=Tag_Plugins&theme=vue&show_owner=true"/></a></li><li>将下载的<code>Tag_Plugins.zip</code>解压得到<code>butterfly</code>文件夹。</li><li>将<code>butterfly</code>文件夹复制到<code>[Blogroot]\themes\</code>目录下，覆盖当前的<code>butterfly</code>主题文件夹，提示重复则选择替换。(如果担心覆盖自己的其他魔改内容，可以根据静态文件内容自主比对修改)</li><li>修改<code>[Blogroot]\_config.butterfly.yml</code>的<code>inject</code>配置项，添加<code>CDN</code>依赖项。由于<code>issues</code>写入<code>timeline</code>和<code>site-card</code>标签要用到<code>jquery</code>，请务必根据注释指示的版本决定是否添加。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css&quot;</span>  <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span>  <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># 自butterfly_v3.4.0+开始，主题基本实现去jquery化，需要自己添加引用，请读者根据版本自行决定是否添加这行引用。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment">#数据集合标签issues的依赖</span></span><br></pre></td></tr></table></figure></li><li>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li>外挂标签使用方案请参阅下文。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h1><div class="tabs" id="text"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#text-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#text-2">样式预览</button></li><li class="tab"><button type="button" data-href="#text-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="text-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="text-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="text-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h1><div class="tabs" id="span"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#span-1">标签语法</button></li><li class="tab"><button type="button" data-href="#span-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#span-3">样式预览</button></li><li class="tab"><button type="button" data-href="#span-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="span-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="span-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h1><div class="tabs" id="p"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#p-1">标签语法</button></li><li class="tab"><button type="button" data-href="#p-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#p-3">样式预览</button></li><li class="tab"><button type="button" data-href="#p-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="p-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="p-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h1><div class="note warning flat"><p>最新版<code>butterfly</code>标签支持引用<code>fontawesome V5</code>图标，效果上已经优于<code>volantis</code>的note标签。故不再额外引入<code>volantis的note样式</code>。<del>做样式适配好麻烦的啊，能偷懒就偷懒吧</del></p></div><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>以下是<code>butterfly</code>主题的note写法。</p></div><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#note-1">通用配置</button></li><li class="tab"><button type="button" data-href="#note-2">语法格式</button></li><li class="tab"><button type="button" data-href="#note-3">配置参数</button></li><li class="tab active"><button type="button" data-href="#note-4">样式预览</button></li><li class="tab"><button type="button" data-href="#note-5">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="note-1"><p>修改主题配置文件<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><br><code>Note</code>标签外挂有两种用法。<code>icons</code>和<code>light_bg_offset</code>只对方法一生效。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><details cyan><summary> 方法一 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><details cyan><summary> 方法一 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">【可选】标识，不同的标识有不同的配色<br>（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:left">no-icon</td><td style="text-align:left">【可选】不显示 icon</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table></div>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">【可选】标识，不同的标识有不同的配色<br>（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:left">no-icon</td><td style="text-align:left">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="note-4"><details cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div></li><li><p><code>modern</code>样式</p><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div></li><li><p><code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div></li><li><p><code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div></li><li><p><code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div></li></ol>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><p>simple样式</p><div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>modern样式</p><div class="note icon modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>flat样式</p><div class="note icon flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li></ol><ol><li><p>disabled样式</p><div class="note icon disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>no-icon样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><details cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h1><div class="tip cogs"><p>主要样式参考自<a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly渐变背景标签</a>,自己写了个<code>tip.js</code>来渲染标签，精简了一下代码。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><ol><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><div class="tip "><p>默认情况</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip %&#125;默认情况&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="动态标签-anima"><a href="#动态标签-anima" class="headerlink" title="动态标签 anima"></a>动态标签 anima</h1><div class="tip faa-horizontal animated"><p>动态标签的实质是引用了<a href="https://github.com/l-lin/font-awesome-animation">font-awesome-animation</a>的css样式，不一定局限于tip标签，也可以是其他标签。<br>只不过这里<code>tip.js</code>是我自己写的，所以我清楚它会怎么被渲染成html，才用的这个写法。<br>可以熟读文档，使用html语言来编写其他标签类型。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>更多详情请参看<a href="http://l-lin.github.io/font-awesome-animation/">font-awesome-animation文档</a></p><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><div class="table-container"><table><thead><tr><th style="text-align:left">On DOM load<br>当页面加载时<br>显示动画</th><th style="text-align:left">On hover<br>当鼠标悬停时<br>显示动画</th><th style="text-align:left">On parent hover<br>当鼠标悬停<br>在父级元素时<br>显示动画</th></tr></thead><tbody><tr><td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated"></i>&nbsp;faa-wrench animated</span></td><td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated-hover"></i>&nbsp;faa-wrench animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-wrench faa-wrench"></i>&nbsp;faa-wrench</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-bell faa-ring animated"></i>&nbsp;faa-ring animated</span></td><td style="text-align:left"><span><i class="fas fa-bell faa-ring animated-hover"></i>&nbsp;faa-ring animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-bell faa-ring"></i>&nbsp;faa-ring</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated"></i>&nbsp;faa-horizontal animated</span></td><td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated-hover"></i>&nbsp;faa-horizontal animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-horizontal"></i>&nbsp;faa-horizontal</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated"></i>&nbsp;faa-vertical animated</span></td><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated-hover"></i>&nbsp;faa-vertical animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-vertical"></i>&nbsp;faa-vertical</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated"></i>&nbsp;faa-flash animated</span></td><td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated-hover"></i>&nbsp;faa-flash animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-exclamation-triangle faa-flash"></i>&nbsp;faa-flash</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated"></i>&nbsp;faa-bounce animated</span></td><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated-hover"></i>&nbsp;faa-bounce animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-bounce"></i>&nbsp;faa-bounce</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated"></i>&nbsp;faa-spin animated</span></td><td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated-hover"></i>&nbsp;faa-spin animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-spinner faa-spin"></i>&nbsp;faa-spin</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-plane faa-tada animated"></i>&nbsp;faa-tada animated</span></td><td style="text-align:left"><span><i class="fas fa-plane faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-plane faa-tada"></i>&nbsp;faa-tada</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated"></i>&nbsp;faa-pulse animated</span></td><td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated-hover"></i>&nbsp;faa-pulse animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-heart faa-pulse"></i>&nbsp;faa-pulse</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated"></i>&nbsp;faa-shake animated</span></td><td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated-hover"></i>&nbsp;faa-shake animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-shake"></i>&nbsp;faa-shake</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated"></i>&nbsp;faa-tada animated</span></td><td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-trophy faa-tada"></i>&nbsp;faa-tada</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated"></i>&nbsp;faa-passing animated</span></td><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated-hover"></i>&nbsp;faa-passing animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing"></i>&nbsp;faa-passing</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated"></i>&nbsp;faa-passing-reverse animated</span></td><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated-hover"></i>&nbsp;faa-passing-reverse animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing-reverse"></i>&nbsp;faa-passing-reverse</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-circle faa-burst animated"></i>&nbsp;faa-burst animated</span></td><td style="text-align:left"><span><i class="fas fa-circle faa-burst animated-hover"></i>&nbsp;faa-burst animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-circle faa-burst"></i>&nbsp;faa-burst</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-star faa-falling animated"></i>&nbsp;faa-falling animated</span></td><td style="text-align:left"><span><i class="fas fa-star faa-falling animated-hover"></i>&nbsp;faa-falling animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-star faa-falling"></i>&nbsp;faa-falling</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated"></i>&nbsp;faa-rising animated</span></td><td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated-hover"></i>&nbsp;faa-rising animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-rocket faa-rising"></i>&nbsp;faa-rising</span></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><ol><li><p>On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div></li><li><p>调整动画速度。</p><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div></li><li><p>On hover（当鼠标悬停时显示动画）</p><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div></li><li><p>On parent hover（当鼠标悬停在父级元素时显示动画）</p><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><ol><li><p>On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li><li><p>调整动画速度</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li><li><p>On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li><li><p>On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h1><div class="tabs" id="checkbox"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#checkbox-1">标签语法</button></li><li class="tab"><button type="button" data-href="#checkbox-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#checkbox-3">样式预览</button></li><li class="tab"><button type="button" data-href="#checkbox-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="checkbox-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-2"><ol><li>样式: plus, minus, times</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="checkbox-3"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h1><div class="tabs" id="radio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#radio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#radio-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#radio-3">样式预览</button></li><li class="tab"><button type="button" data-href="#radio-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="radio-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-2"><ol><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="radio-3"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="时间轴-timeline"><a href="#时间轴-timeline" class="headerlink" title="时间轴 timeline"></a>时间轴 timeline</h1><div class="tabs" id="timeline"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#timeline-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#timeline-2">样式预览</button></li><li class="tab"><button type="button" data-href="#timeline-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="timeline-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选） %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="timeline-2"><div class="timeline"><div class="timenode"><div class="meta"><p><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></p></div><div class="body"><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></p></div><div class="body"><p>不需要额外处理。</p></div></div><div class="timenode"><div class="meta"><p><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></p></div><div class="body"><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% timeline %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) %&#125;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h1><div class="tabs" id="link"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#link-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#link-2">样式预览</button></li><li class="tab"><button type="button" data-href="#link-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="link-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="link-2"><p><a href="https://akilar.top/posts/615e2dec/," title="https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Akilarlxh&#x2F;akilarlxh.github.io&#x2F;img&#x2F;siteicon&#x2F;favicon.ico" target="">糖果屋教程贴,</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="按钮-btns"><a href="#按钮-btns" class="headerlink" title="按钮 btns"></a>按钮 btns</h1><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p><code>Volantis</code>的按钮使用的是<code>btn</code>和<code>btns</code>标签。<code>btns</code>和<code>butterfly</code>的<code>button</code>不冲突，但是<code>btn</code>会被强制渲染，导致部分参数失效,而且<code>btn</code>的效果还是<code>butterfly</code>的<code>button</code>更好看些。所以就只适配了<code>btns</code>。</p></div><div class="tabs" id="btn"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#btn-1">标签语法</button></li><li class="tab"><button type="button" data-href="#btn-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#btn-3">样式预览</button></li><li class="tab"><button type="button" data-href="#btn-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt;</code>和<code>&lt;p&gt;描述文字&lt;/p&gt;</code></li><li>布局方式：<br> 默认为自动宽度，适合视野内只有一两个的情况。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">wide</td><td style="text-align:left">宽一点的按钮</td></tr><tr><td style="text-align:left">fill</td><td style="text-align:left">填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td style="text-align:left">center</td><td style="text-align:left">居中，按钮之间是固定间距</td></tr><tr><td style="text-align:left">around</td><td style="text-align:left">居中分散</td></tr><tr><td style="text-align:left">grid2</td><td style="text-align:left">等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid3</td><td style="text-align:left">等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid4</td><td style="text-align:left">等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid5</td><td style="text-align:left">等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="btn-3"><ol><li><p>如果需要显示类似「团队成员」之类的一组含有头像的链接：</p><div class="btns circle grid5">         <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>       </div></li><li><p>或者含有图标的按钮：</p><div class="btns rounded grid5">         <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>       </div></li><li><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><div class="btns circle center grid5">         <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p red'>专业版</p><img src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p green'>免费版</p><img src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>       </div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-4"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li><li>或者含有图标的按钮：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li><li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="github卡片-ghcard"><a href="#github卡片-ghcard" class="headerlink" title="github卡片 ghcard"></a>github卡片 ghcard</h1><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>ghcard使用了<code>github-readme-stats</code>的API，支持直接使用markdown语法来写。</p></div><div class="tabs" id="ghcard"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghcard-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghcard-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghcard-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghcard-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghcard-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-2"><p>更多参数可以参考：<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/anuraghazra/github-readme-stats"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=anuraghazra&repo=github-readme-stats&show_owner=true"/></a><br>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><div class="table-container"><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">取值</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">hide</td><td style="text-align:left">stars,commits,prs,issues,contribs</td><td style="text-align:left">隐藏指定统计</td></tr><tr><td style="text-align:left">count_private</td><td style="text-align:left">true</td><td style="text-align:left">将私人项目贡献添加到总提交计数中</td></tr><tr><td style="text-align:left">show_icons</td><td style="text-align:left">true</td><td style="text-align:left">显示图标</td></tr><tr><td style="text-align:left">theme</td><td style="text-align:left">请查阅<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td style="text-align:left">主题</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghcard-3"><ol><li>用户信息卡片</li></ol><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><ol><li>仓库信息卡片</li></ol><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src= "/img/lazyload.svg" data-src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-4"><ol><li><p>用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=buefy %&#125; | &#123;% ghcard xaoxuu, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=onedark %&#125; | &#123;% ghcard xaoxuu, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=algolia %&#125; | &#123;% ghcard xaoxuu, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></li><li><p>仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="github徽标-ghbdage"><a href="#github徽标-ghbdage" class="headerlink" title="github徽标 ghbdage"></a>github徽标 ghbdage</h1><div class="tip cogs"><p>关于ghbdage参数的更多具体用法可以参看相关教程：<a href="https://akilar.top/posts/e87ad7f8">添加github徽标</a></p></div><div class="tabs" id="ghbdage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghbdage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghbdage-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghbdage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghbdage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghbdage-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghbdage-3"><p><div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p></div></p><ol><li>基本参数<br><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></li><li>信息参数<br><br><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></li><li>拓展参数<br><br><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=40"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=40&logoColor=violet"></object></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-4"><p><div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p></div></p><ol><li>基本参数,定义徽标左右文字和图标<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure></li><li>信息参数，定义徽标右侧内容背景色，指向链接<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure></li><li>拓展参数，支持shields的API的全部参数内容<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h1><div class="tabs" id="site"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#site-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#site-2">样式预览</button></li><li class="tab"><button type="button" data-href="#site-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="site-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="site-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="site-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="行内图片-inlineimage"><a href="#行内图片-inlineimage" class="headerlink" title="行内图片 inlineimage"></a>行内图片 inlineimage</h1><div class="tabs" id="inlineimage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#inlineimage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#inlineimage-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#inlineimage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#inlineimage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimage-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-2"><ol><li>高度：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="inlineimage-3"><p>这是 <img no-lazy class="inline" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h1><div class="tabs" id="image"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#image-1">标签语法</button></li><li class="tab"><button type="button" data-href="#image-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#image-3">样式预览</button></li><li class="tab"><button type="button" data-href="#image-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="image-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="image-3"><ol><li><p>添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div></li><li><p>指定宽度：</p><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div></li><li><p>指定宽度并添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div></li><li><p>设置占位背景色：</p><div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-4"><ol><li><p>添加描述：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li><li>指定宽度：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure></li><li>指定宽度并添加描述：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li><li>设置占位背景色：<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h1><div class="tabs" id="audio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#audio-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#audio-2">样式预览</button></li><li class="tab"><button type="button" data-href="#audio-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="audio-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="audio-2"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="audio-3"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h1><div class="tabs" id="video"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#video-1">标签语法</button></li><li class="tab"><button type="button" data-href="#video-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#video-3">样式预览</button></li><li class="tab"><button type="button" data-href="#video-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="video-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-2"><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="video-3"><ol><li><p>100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></li><li><p>50%宽度</p> <div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li><li><p>25%宽度</p><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-4"><ol><li><p>100%宽度</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>50%宽度</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li><li><p>25%宽度</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="相册-gallery"><a href="#相册-gallery" class="headerlink" title="相册 gallery"></a>相册 gallery</h1><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>自带<code>gallery</code>相册，而且会根据图片大小自动调整排版，效果比<code>Volantis</code>的<code>gallery</code>更好，故不再收录<code>Volantis</code>的<code>gallery</code>标签。</p></div><div class="note flat"><p>以下为<code>Butterfly</code>自带的<code>gallery</code>标签写法。相册图库和相册配合使用。</p></div><div class="tabs" id="gallery"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#gallery-1">标签语法</button></li><li class="tab"><button type="button" data-href="#gallery-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#gallery-3">样式预览</button></li><li class="tab"><button type="button" data-href="#gallery-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="gallery-1"><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-2"><ul><li>gallerygroup 相册图库</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">name</td><td style="text-align:left">图库名字</td></tr><tr><td style="text-align:left">description</td><td style="text-align:left">图库描述</td></tr><tr><td style="text-align:left">link</td><td style="text-align:left">链接到对应相册的地址</td></tr><tr><td style="text-align:left">img-url</td><td style="text-align:left">图库封面</td></tr></tbody></table></div><div class="note info flat"><p>思维拓展一下，相册图库的实质其实就是个快捷方式，可以自定义添加描述、封面、链接。那么我们未必要把它当做一个相册，完全可以作为一个链接卡片，链接到视频、QQ、友链都是不错的选择。</p></div><ul><li>gallery 相册<br>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="gallery-3"><ul><li>gallerygroup 相册图库</li></ul><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/npm/akilar-candyassets/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img" src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div><ul><li>gallery 相册</li></ul><div class="justified-gallery"><p><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src= "/img/lazyload.svg" data-src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-4"><div class="note info flat"><p>对于很多同学提问的<code>gallerygroup</code>和<code>gallery</code>相册页的链接问题。这里说下我个人的使用习惯。<br>一般使用相册图库的话，可以在导航栏加一个gallery的page(<strong>使用指令<code>hexo new page gallery</code>添加</strong>)，里面放相册图库作为封面。然后在<code>[Blogroot]/source/gallery/</code>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<code>/gallery/MC/</code>路径访问MC相册，则需要新建<code>[Blogroot]/source/gallery/MC/index.md</code>，并在里面填入<code>gallery</code>相册内容。</p></div><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.jsdelivr.net/npm/akilar-candyassets/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h1><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>虽然也有内置折叠框<code>hideToggle</code>标签，但是<code>Volantis</code>的<code>folding</code>折叠框更好看一些。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>颜色：blue, cyan, green, yellow, red</li><li>状态：状态填写 open 代表默认打开。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><details ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details green><summary> 查看代码测试 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src= "/img/lazyload.svg" data-src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h1><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>的<code>tab</code>标签和<code>Volantis</code>的<code>tab</code>标签都是移值自<code>NexT</code>主题，所以写法和效果一模一样。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>Unique name :<ul><li>选项卡块标签的唯一名称，不带逗号。</li><li>将在#id中用作每个标签及其索引号的前缀。</li><li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li><li>仅当前帖子/页面的URL必须是唯一的！</li></ul></li><li>[index]:<ul><li>活动选项卡的索引号。</li><li>如果未指定，将选择第一个标签（1）。</li><li>如果index为-1，则不会选择任何选项卡。</li><li>可选参数。</li></ul></li><li>[Tab caption]:<ul><li>当前选项卡的标题。</li><li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li><li>如果未指定标题，但指定了图标，则标题将为空。</li><li>可选参数。</li></ul></li><li>[@icon]:<ul><li>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</li><li>可以指定带空格或不带空格；</li><li>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</li><li>可选参数。</li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary flat"><p>Demo 2 - 预设选择tabs</p></div><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary flat"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><p><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><p><div class="note primary flat"><p>Demo 2 - 预设选择tabs</p></div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><p><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><p><div class="note primary flat"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数据集合-issues"><a href="#数据集合-issues" class="headerlink" title="数据集合 issues"></a>数据集合 issues</h1><script defer src="https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js"></script><script defer src="https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js"></script><div class="tabs" id="issues"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#issues-1">标签语法</button></li><li class="tab"><button type="button" data-href="#issues-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#issues-3">样式预览</button></li><li class="tab"><button type="button" data-href="#issues-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="issues-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues type | api=url | group=key:value1,value2（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-2"><p><span class='p center logo large'>type(类型)：</span><br>根据需求不同，会将 issues 内容解析成不同的 HTML 标签，目前支持的类型有：</p><ol><li>时间轴<code>timeline</code>: 解析成<code>timeline</code>标签，<code>issue</code>的标题对应<code>timeline</code>的时间，<code>issue</code>的内容对应<code>timeline</code>的内容。</li><li><p>网站卡片<code>sites</code>: 解析成<code>sites</code>标签，需要有<code>JSON</code>代码块,各参数对应<code>sites</code>标签参数:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;screenshot&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;「keywords」&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">网站名称</td></tr><tr><td style="text-align:left">screenshot</td><td style="text-align:left">网站预览图</td></tr><tr><td style="text-align:left">url</td><td style="text-align:left">网站链接，需要添加<br><code>https://</code>协议组成完整域名。<br>否则可能被识别成站点相对路径。</td></tr><tr><td style="text-align:left">avatar</td><td style="text-align:left">站长头像</td></tr><tr><td style="text-align:left">「keywords」</td><td style="text-align:left">分组依据，<br>未必要叫「keywords」，<br>详见下文group(分组)</td></tr></tbody></table></div><p><span class='p center logo large'>api(接口)：</span><br>url为可以调的通的API，例如：<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">api=https:<span class="regexp">//gi</span>tee.com<span class="regexp">/api/</span>v5<span class="regexp">/repos/</span>xaoxuu<span class="regexp">/friends/i</span>ssues?sort=updated&amp;state=open&amp;page=<span class="number">1</span>&amp;per_page=<span class="number">100</span>&amp;labels=active</span><br><span class="line">api=https:<span class="regexp">//</span>api.github.com<span class="regexp">/repos/</span>xaoxuu<span class="regexp">/friends/i</span>ssues?sort=updated&amp;state=open&amp;page=<span class="number">1</span>&amp;per_page=<span class="number">100</span>&amp;labels=active</span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://gitee.com/api/v5/">https://gitee.com/api/v5/</a></td><td style="text-align:left">gitee仓库的api</td></tr><tr><td style="text-align:left"><a href="https://api.github.com/">https://api.github.com/</a></td><td style="text-align:left">github仓库的api</td></tr><tr><td style="text-align:left">repos/xaoxuu/friends/issues</td><td style="text-align:left">repos/用户名/仓库名/issues</td></tr><tr><td style="text-align:left">sort=updated&amp;state=open</td><td style="text-align:left">界定哪些类型的<code>issues</code>会<br>被读取过来渲染成相应的标签</td></tr><tr><td style="text-align:left">page=1&amp;per_page=100</td><td style="text-align:left">读取前100条issues</td></tr><tr><td style="text-align:left">labels=active</td><td style="text-align:left">控制默认的issue不显示，<br>只有自己审核通过<br>添加了active标签之后才会显示</td></tr></tbody></table></div><p><span class='p center logo large'>group(分组)：</span><br><code>sites</code>类型的<code>issues</code>默认不分组，如果需要分组，可指定分组依据<code>「keywords」</code>，和分组白名单<code>「value1」</code>、<code>「value2」</code>等，例如：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">group=version:v4,v3,v2</span></span><br><span class="line"><span class="comment"># 此处的version就是上文中的「keywords」</span></span><br></pre></td></tr></table></figure><p>这个参数的作用就是，筛选出<code>JSON</code>中包含<code>&quot;version&quot;: &quot;v4&quot;</code>或者<code>&quot;version&quot;:&quot;v3&quot;</code>或者<code>&quot;version&quot;: &quot;v2&quot;</code>的数据，并分组显示。</p><p><span class='p center logo large'>仓库ISSUES模板配置</span></p><details green><summary> Github仓库配置方案 </summary>              <div class='content'>              <ol><li><p>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br> 新建文件<code>friend_link\.github\ISSUE_TEMPLATE.md</code>,<br> 并在其中输入以下内容作为<code>issues</code>模板。</p><div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line"><span class="section">about: 请根据指示规范填写友链格式。</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://akilar.top/img/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>新建active label</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/d63b5c0c.png" alt="新建label用于控制审核结果"></p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/6311f960.png" alt="配置名称描述颜色"></p></li><li><p>提交示例</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/f87ebfd3.png" alt="填写规范"><br><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/efdfc67d.png" alt="审核通过"></p></li><li><p>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</p></li></ol>              </div>            </details><details yellow><summary> Gitee仓库配置方案 </summary>              <div class='content'>              <ol><li><p>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br> 新建文件<code>friend_link\.gitee\ISSUE_TEMPLATE.md</code>,<br> 并在其中输入以下内容作为<code>issues</code>模板。</p><div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line"><span class="section">about: 请根据指示规范填写友链格式。</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://akilar.top/img/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>新建active标签</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/7522911b.png" alt="新建标签用于控制审核结果"></p></li></ol><ol><li><p>提交示例</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/dd334eea.png" alt="填写规范"><br><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/72d06ae1.png" alt="审核通过"></p></li><li><p>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</p></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="issues-3"><ol><li><p>时间轴标签<code>timeline</code>渲染<br> 对应的仓库<code>issues</code>链接:<br> <a href="https://gitee.com/xaoxuu/timeline/issues," title="https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets@master&#x2F;logo&#x2F;256&#x2F;safari.png" target="">xaoxuu&#x2F;timeline,</a></p><div class="issues-api timeline"api="https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&creator=xaoxuu&sort=created&direction=desc&page=1&per_page=100"></div></li><li><p>网站卡片标签<code>sites</code>渲染</p><ul><li><p>gitee仓库示例</p><p>对应的仓库<code>issues</code>链接:</p><p><a href="https://gitee.com/xaoxuu/friends/issues," title="https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets@master&#x2F;logo&#x2F;256&#x2F;safari.png" target="">xaoxuu&#x2F;friends,</a></p><p>渲染后的标签：</p><div class="issues-api sites"api="https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li><li><p>github仓库示例</p><p>对应的仓库<code>issues</code>链接:</p><p><a href="https://github.com/xaoxuu/friends/issues," title="https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets@master&#x2F;logo&#x2F;256&#x2F;safari.png" target="">xaoxuu&#x2F;friends,</a></p><p>渲染后的标签：</p><div class="issues-api sites"api="https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li></ul></li><li><p>网站卡片标签<code>sites</code>分组渲染<br> 这是<code>Volantis</code>主题官网的「示例博客」页面的数据：<br> 对应的仓库<code>issues</code>链接:</p><p><a href="https://github.com/volantis-x/examples/issues," title="https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets@master&#x2F;logo&#x2F;256&#x2F;safari.png" target="">如何参与项目,</a></p><p>渲染后的标签：</p><div class="issues-api sites"api="https://api.github.com/repos/volantis-x/examples/issues?sort=updated&state=open&page=1&per_page=100"group="version:版本：^4.0,版本：^3.0,版本：^2.0"></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-4"><ol><li><p>时间轴标签<code>timeline</code>渲染</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues timeline | api=https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&amp;creator=xaoxuu&amp;sort=created&amp;direction=desc&amp;page=1&amp;per<span class="emphasis">_page=100 %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>网站卡片标签<code>sites</code>渲染</p><ul><li><p>gitee仓库示例</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>github仓库示例</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>网站卡片标签<code>sites</code>分组渲染<br> 这是<code>Volantis</code>主题官网的「示例博客」页面的数据：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/volantis-x/examples/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100 | group=version:版本：^4.0,版本：^3.0,版本：^2.0 %&#125;</span></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="诗词标签-poem"><a href="#诗词标签-poem" class="headerlink" title="诗词标签 poem"></a>诗词标签 poem</h1><div class="tabs" id="poem"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#poem-1">标签语法</button></li><li class="tab"><button type="button" data-href="#poem-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#poem-3">样式预览</button></li><li class="tab"><button type="button" data-href="#poem-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="poem-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% poem [title],[author] %&#125;</span><br><span class="line">诗词内容</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-2"><ol><li>title：诗词标题</li><li>author：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="poem-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？<br>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="阿里图标-icon"><a href="#阿里图标-icon" class="headerlink" title="阿里图标 icon"></a>阿里图标 icon</h1><div class="tip cogs"><p>本标签的图标需要自己额外引入阿里矢量图标库的样式，具体引入方案请移步：<a href="https://akilar.top/posts/d2ebecef/">Hexo引入阿里矢量图标库</a></p></div><div class="tabs" id="icon示例"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#icon示例-1">标签语法</button></li><li class="tab"><button type="button" data-href="#icon示例-2">参数释义</button></li><li class="tab active"><button type="button" data-href="#icon示例-3">样式预览</button></li><li class="tab"><button type="button" data-href="#icon示例-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="icon示例-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="icon示例-3"><div class="table-container"><table><thead><tr><th style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></th></tr></thead><tbody><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></td></tr><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></td></tr><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="特效标签wow"><a href="#特效标签wow" class="headerlink" title="特效标签wow"></a>特效标签wow</h1><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>特效标签的静态资源未添加在本帖的配置内容中（因为多为cdn配置），请移步相关教程完成相关配置：<br><a href="https://akilar.top/posts/abab51cf/," title="https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Akilarlxh&#x2F;Akilarlxh.github.io&#x2F;img&#x2F;siteicon&#x2F;favicon.ico" target="">使用wowjs给博客添加动画效果,</a></p></div><div class="tabs" id="animate"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#animate-1">标签语法</button></li><li class="tab"><button type="button" data-href="#animate-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#animate-3">样式预览</button></li><li class="tab"><button type="button" data-href="#animate-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="animate-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><div class="note warning flat"><p>注意，后面四个虽然是选填项，但是当有跨位选填时，次序不能乱。详见示例。<br>支持嵌套其他外挂标签。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="animate-3"><ol><li><code>flip</code>动画效果。 <div class='wow animate__flip' data-wow-duration='' data-wow-delay='' data-wow-offset=''  data-wow-iteration='' ><pre><code>&lt;div class=&quot;note green icon modern&quot;&gt;&lt;i class=&quot;note-icon fas fa-fan&quot;&gt;&lt;/i&gt;&lt;p&gt;&lt;code&gt;flip&lt;/code&gt;动画效果。&lt;/p&gt;</code></pre><p>&lt;/div&gt;</p></div></li><li><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次。 <div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><pre><code>&lt;div class=&quot;note blue icon modern&quot;&gt;&lt;i class=&quot;note-icon fas fa-bullhorn&quot;&gt;&lt;/i&gt;&lt;p&gt;&lt;code&gt;zoomIn&lt;/code&gt;动画效果，持续&lt;code&gt;5s&lt;/code&gt;，延时&lt;code&gt;5s&lt;/code&gt;，离底部&lt;code&gt;100&lt;/code&gt;距离时启动，重复&lt;code&gt;10&lt;/code&gt;次&lt;/p&gt;</code></pre><p>&lt;/div&gt;</p></div></li><li><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。 <div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><pre><code>&lt;div class=&quot;note orange icon modern&quot;&gt;&lt;i class=&quot;note-icon fas fa-car&quot;&gt;&lt;/i&gt;&lt;p&gt;&lt;code&gt;slideInRight&lt;/code&gt;动画效果，持续&lt;code&gt;5s&lt;/code&gt;，延时&lt;code&gt;5s&lt;/code&gt;。&lt;/p&gt;</code></pre><p>&lt;/div&gt;</p></div></li><li><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。 <div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><pre><code>&lt;div class=&quot;note red icon modern&quot;&gt;&lt;i class=&quot;note-icon fas fa-battery-half&quot;&gt;&lt;/i&gt;&lt;p&gt;&lt;code&gt;heartBeat&lt;/code&gt;动画效果，延时&lt;code&gt;5s&lt;/code&gt;，重复&lt;code&gt;10&lt;/code&gt;次。&lt;/p&gt;</code></pre><p>&lt;/div&gt;</p></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-4"><ol><li><code>flip</code>动画效果。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__flip %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note green &#x27;fas fa-fan&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`flip`动画效果。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li><li><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li><li><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li><li><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。此处注意不用的参数位置要留空，用逗号间隔。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="进度条-progress"><a href="#进度条-progress" class="headerlink" title="进度条 progress"></a>进度条 progress</h1><div class="note info morden flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="progress"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#progress-1">标签语法</button></li><li class="tab"><button type="button" data-href="#progress-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#progress-3">样式预览</button></li><li class="tab"><button type="button" data-href="#progress-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="progress-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-2"><p><code>width</code>: 0到100的阿拉伯数字<br><code>color</code>: 颜色，取值有<span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span><br><code>text</code>:进度条上的文字内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="progress-3"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="注释-notation"><a href="#注释-notation" class="headerlink" title="注释 notation"></a>注释 notation</h1><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>label</code>: 注释词汇<br><code>text</code>: 悬停显示的注解内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><p>本博客未适配~~</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数模】从入门到入土</title>
      <link href="/p/50102.html"/>
      <url>/p/50102.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一讲-模糊数学聚类基础"><a href="#第一讲-模糊数学聚类基础" class="headerlink" title="第一讲 模糊数学聚类基础"></a>第一讲 模糊数学聚类基础</h2><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习 1"></a>练习 1</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">思路</button></li><li class="tab"><button type="button" data-href="#练习-1-3">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210706152342.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><p>更普遍性的解肯定不能通过线性相关性来判定，思考模糊聚类。</p><p>​    通过题目数据可以得到一个矩阵方程组。常规<code>归一化</code>就有一个模糊矩阵，然后再通过<code>格贴近度</code>得到模糊相似矩阵，最后计算传递闭包求得<code>模糊等价矩阵</code>从而推出聚类关系。即可判断哪些气象站差别不大可删去。</p><p>PS: 模糊相似矩阵可以通过多种方法求得，不细讲了，通常有：</p><ul><li><p>指数相似度法</p></li><li><p>最大值最小法</p></li><li><p>几何平均法</p></li><li><p>绝对值倒数法</p></li><li><p>数量积法</p></li><li><p>夹角余弦法</p></li><li><p>相关系数法</p></li></ul><p><del>一般越复杂越nb</del></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_process</span>():</span></span><br><span class="line">    a = <span class="string">&#x27;276.2 324.5 158.6 412.5 292.8 258.4 334.1 303.2 292.9 243.2 159.7 331.2 \</span></span><br><span class="line"><span class="string">251.5 287.3 349.5 297.4 227.8 453.6 321.5 451.0 466.2 307.5 421.1 455.1 \</span></span><br><span class="line"><span class="string">192.7 433.2 289.9 366.3 466.2 239.1 357.4 219.7 245.7 411.1 357.0 353.2 \</span></span><br><span class="line"><span class="string">246.2 232.4 243.7 372.5 460.4 158.9 298.7 314.5 256.6 327.0 296.5 423.0 \</span></span><br><span class="line"><span class="string">291.7 311.0 502.4 254.0 245.6 324.8 401.0 266.5 251.3 289.9 255.4 362.1 \</span></span><br><span class="line"><span class="string">466.5 158.9 223.5 425.1 251.4 321.0 315.4 317.4 246.2 277.5 304.2 410.7 \</span></span><br><span class="line"><span class="string">258.6 327.4 432.1 403.9 256.6 282.9 389.7 413.2 466.5 199.3 282.1 387.6 \</span></span><br><span class="line"><span class="string">453.4 365.5 357.6 258.1 278.8 467.2 355.2 228.5 453.6 315.6 456.3 407.2 \</span></span><br><span class="line"><span class="string">158.2 271.0 410.2 344.2 250.0 360.7 376.4 179.4 159.2 342.4 331.2 377.7 \</span></span><br><span class="line"><span class="string">324.8 406.5 235.7 288.8 192.6 284.9 290.5 343.7 283.4 281.2 243.7 411.1&#x27;</span></span><br><span class="line">    temp = a.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    a = np.array(<span class="built_in">eval</span>(temp))</span><br><span class="line">    a = a.reshape((<span class="number">10</span>, <span class="number">12</span>))</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mean_var</span>(<span class="params">matrix</span>):</span></span><br><span class="line">    matrix_mean = np.mean(matrix, axis=<span class="number">0</span>)</span><br><span class="line">    matrix_b = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix_mean)):</span><br><span class="line">        temp = (matrix[:, i] - matrix_mean[i])</span><br><span class="line">        matrix_b.append(np.<span class="built_in">round</span>(np.sqrt(<span class="built_in">sum</span>(np.multiply(temp, temp))) / <span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> matrix_mean,matrix_b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">muti</span>(<span class="params">a:np.array</span>):</span></span><br><span class="line">    x,y=a.shape</span><br><span class="line">    R=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        temp=[]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">            m=np.fmin(a[i,:],a[:,j])</span><br><span class="line">            temp.append(np.<span class="built_in">max</span>(m))</span><br><span class="line">        R.append(temp)</span><br><span class="line">    <span class="keyword">return</span> np.array(R)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_R</span>(<span class="params">a:np.array,b:np.array</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param matrix:</span></span><br><span class="line"><span class="string">    :param a: mean</span></span><br><span class="line"><span class="string">    :param b: var</span></span><br><span class="line"><span class="string">    :return: R 模糊等价矩阵</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    x,y=<span class="built_in">len</span>(a),<span class="built_in">len</span>(b)</span><br><span class="line"></span><br><span class="line">    R=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        temp=[]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">            temp.append(np.<span class="built_in">round</span>(np.exp(-((a[j]-a[i])/(b[i]+b[j]))**<span class="number">2</span>),<span class="number">3</span>))</span><br><span class="line">        R.append(temp)</span><br><span class="line">    R=np.array(R)</span><br><span class="line">    <span class="comment"># print(R)</span></span><br><span class="line">    <span class="comment"># print(muti(R))</span></span><br><span class="line">    t_R=muti(muti(R))</span><br><span class="line">    <span class="built_in">print</span>(t_R)</span><br><span class="line">    <span class="comment"># 发现R^4 =R^8 R^4 是传递闭包,也可以写个循环判断</span></span><br><span class="line">    <span class="keyword">return</span> t_R</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># temp=np.load(&#x27;./bingcha.npy&#x27;,allow_pickle=True)</span></span><br><span class="line">    <span class="comment"># print(temp)</span></span><br><span class="line">    matrix=data_process()</span><br><span class="line">    matrix_mean,matrix_var=get_mean_var(matrix)</span><br><span class="line">    R=get_R(a=matrix_mean,b=matrix_var)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>并查集优化结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unit_find</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,matrix</span>):</span></span><br><span class="line">        self.matrix=copy.deepcopy(matrix)</span><br><span class="line">        self.x, self.y = matrix.shape</span><br><span class="line">        self.fa=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.x)]</span><br><span class="line">        self.f=[[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.x)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self,l</span>):</span></span><br><span class="line">        x,y=self.matrix.shape</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">                <span class="keyword">if</span> i&gt;j:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> self.matrix[i,j]&gt;l:</span><br><span class="line">                    self.matrix[i,j]=<span class="number">1</span></span><br><span class="line">                    self.f[i].append(j)</span><br><span class="line">                    self.f[j].append(i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.matrix[i,j]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.fa[x]==x:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        self.fa[x]=self.find(self.fa[x])</span><br><span class="line">        <span class="keyword">return</span> self.fa[x]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.x):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> self.f[i]:</span><br><span class="line">                r1=self.find(i)</span><br><span class="line">                r2=self.find(j)</span><br><span class="line">                <span class="keyword">if</span> r1!=r2:</span><br><span class="line">                    self.fa[r1]=r2</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"><span class="comment"># 配合上面的代码,输出每个点的father（0开始编号</span></span><br><span class="line">uf=Unit_find(R)</span><br><span class="line">prinf(uf.fa)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第二讲-排队论"><a href="#第二讲-排队论" class="headerlink" title="第二讲 排队论"></a>第二讲 排队论</h2><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><p>​    某店有一个修理工人，顾客到达过程为Poisson流，平均每小时3人，修理时间服从负指数分布，平均需10分钟，求：</p><ul><li><p>店内空闲的时间；</p></li><li><p>有4个顾客的概率；</p></li><li>至少有一个顾客的概率；</li><li>店内顾客的平均数；</li><li>等待服务的顾客数；</li><li>平均等待修理的时间；</li><li>一个顾客在店内逗留时间超过15分钟的概率</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><p><del>啥也不会，跟着zzy抄就完事了</del></p><p>此题满足排队论里的 $M|M|1|\infty|\infty$模型</p><script type="math/tex; mode=display">\lambda=3 ,\mu=60/10=6, \rho=\frac{\lambda}{\mu}=0.5</script><ul><li>店里空闲时间$P_0=0.05$</li><li>四个顾客概率$p_4=\rho^4(1-\rho)=0.5^5$</li><li>至少有一个顾客的概率$p_{n\geq1}=1-p_0=0.95$</li><li>店内顾客平均人数$L_s=\frac{\lambda}{\mu-\lambda}=1$</li><li>等候服务顾客人数$L_q=L_s-(1-p_0)=0.05$</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第三、四讲-简单图论"><a href="#第三、四讲-简单图论" class="headerlink" title="第三、四讲 简单图论"></a>第三、四讲 简单图论</h2><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><div class="tabs" id="练习"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-2">思路</button></li><li class="tab"><button type="button" data-href="#练习-3">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210707012044.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-2"><p>题意有点奇怪，理解有两种题意：</p><ul><li>疑问：因为有4-5年的维修费意思是买来就要付第一年的维修费？<del>黑心</del></li><li>题意1：维修费与机器使用时间有关，逐年递增比如维修三年需要（5+6+8）。</li><li>题意2：维修费用和机器使用时间无关，只与每年行情有关，第一年买的机器和第四年买的机器都只需要18的维修费。</li></ul><p>如果题意1：可以从当前点向前分别连接5条边，权值分别为 <code>[5,11,19,30,48]</code> ，然后逐年连 <code>[11,11,12,12,13]</code>的边权，建图跑1-5的最短路就行了。</p><p>如果题意2：感觉和最短路没什么关系了，直接贪心？</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-3"><p><del>因为要求是用最短路解决，所以我默认是题意1</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line">inf =<span class="number">0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,node,dis</span>):</span></span><br><span class="line">        self.node=node</span><br><span class="line">        self.dis=dis</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.dis&lt;other.dis</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dij</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,num</span>):</span></span><br><span class="line">        self.num=num</span><br><span class="line">        self.f=[[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num)]</span><br><span class="line">        self.dis=[inf <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num)]</span><br><span class="line">        self.use=[<span class="literal">False</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self,a,b</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.num):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">                <span class="keyword">if</span> i+j+<span class="number">1</span>&gt;<span class="number">5</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                self.f[i].append((i+j+<span class="number">1</span>,a[i]+b[j]))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self,qx,zx</span>):</span></span><br><span class="line">        q=PriorityQueue()</span><br><span class="line">        q.put(Pair(qx,<span class="number">0</span>))</span><br><span class="line">        self.dis[qx]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            <span class="comment"># get 会自动remove</span></span><br><span class="line">            temp=q.get()</span><br><span class="line">            <span class="keyword">if</span> self.use[temp.node]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.use[temp.node]=<span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.f[temp.node]:</span><br><span class="line">                <span class="keyword">if</span> self.dis[i[<span class="number">0</span>]]&gt;self.dis[temp.node]+i[<span class="number">1</span>]:</span><br><span class="line">                    self.dis[i[<span class="number">0</span>]]=self.dis[temp.node]+i[<span class="number">1</span>]</span><br><span class="line">                    q.put(Pair(i[<span class="number">0</span>],self.dis[i[<span class="number">0</span>]]))</span><br><span class="line"></span><br><span class="line">        ans=self.dis[zx]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">a=[<span class="number">11</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line">b=[<span class="number">5</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">30</span>,<span class="number">48</span>]</span><br><span class="line"></span><br><span class="line">dij=Dij(<span class="number">6</span>)</span><br><span class="line">dij.build(a,b)</span><br><span class="line"><span class="built_in">print</span>(dij.solve(<span class="number">0</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(dij.dis)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第五讲-方差分析"><a href="#第五讲-方差分析" class="headerlink" title="第五讲 方差分析"></a>第五讲 方差分析</h2><h3 id="练习-1-1"><a href="#练习-1-1" class="headerlink" title="练习 1"></a>练习 1</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">思路</button></li><li class="tab"><button type="button" data-href="#练习-1-3">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210710124232.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><p>就是一个显著性检验，SPSS分析就完事了。<del>概率论全忘光</del>，</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第六讲-机器学习"><a href="#第六讲-机器学习" class="headerlink" title="第六讲 机器学习"></a>第六讲 机器学习</h2><p>​    ppt乱死了，也没看到他有作业 😥。</p><h2 id="第七讲-整数规划"><a href="#第七讲-整数规划" class="headerlink" title="第七讲 整数规划"></a>第七讲 整数规划</h2><h3 id="练习-1-2"><a href="#练习-1-2" class="headerlink" title="练习 1"></a>练习 1</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">思路</button></li><li class="tab"><button type="button" data-href="#练习-1-3">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716160028.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716160052.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> geatpy <span class="keyword">as</span> ea</span><br><span class="line"><span class="keyword">from</span> geatpy <span class="keyword">import</span> Problem, crtfld, Population</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LX1</span>(<span class="params">Problem</span>):</span>  <span class="comment"># 继承Problem父类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        name = <span class="string">&#x27;练习&#x27;</span>  <span class="comment"># 初始化name（函数名称，可以随意设置）</span></span><br><span class="line">        M = <span class="number">1</span>  <span class="comment"># 初始化M（目标维数）</span></span><br><span class="line">        maxormins = [-<span class="number">1</span>]  <span class="comment"># 初始化maxormins（目标最小最大化标记列表，1：最小化该目标；-1：最大化该目标）</span></span><br><span class="line">        self.Dim = <span class="number">12</span>  <span class="comment"># 初始化Dim（决策变量维数）</span></span><br><span class="line">        varTypes = [<span class="number">1</span>] * self.Dim  <span class="comment"># 初始化varTypes（决策变量的类型，0：实数；1：整数）</span></span><br><span class="line">        lb = [<span class="number">0</span>]*self.Dim  <span class="comment"># 决策变量下界</span></span><br><span class="line">        ub = [<span class="number">120</span>]*<span class="number">3</span>+[<span class="number">1</span>]*<span class="number">9</span> <span class="comment"># 决策变量上界</span></span><br><span class="line">        lbin = [<span class="number">1</span>] * self.Dim  <span class="comment"># 决策变量下边界（0表示不包含该变量的下边界，1表示包含）</span></span><br><span class="line">        ubin = [<span class="number">1</span>] * self.Dim  <span class="comment"># 决策变量上边界（0表示不包含该变量的上边界，1表示包含）</span></span><br><span class="line">        <span class="comment"># 调用父类构造方法完成实例化</span></span><br><span class="line">        Problem.__init__(self, name, M, maxormins, self.Dim, varTypes, lb, ub, lbin, ubin)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aimFunc</span>(<span class="params">self, pop</span>):</span>  <span class="comment"># 目标函数</span></span><br><span class="line">        Vars = pop.Phen  <span class="comment"># 得到决策变量矩阵</span></span><br><span class="line">        <span class="comment"># 行向量</span></span><br><span class="line"></span><br><span class="line">        x=[Vars[:, [i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.Dim)]</span><br><span class="line"></span><br><span class="line">        f = (<span class="number">12</span>-<span class="number">10</span>*x[<span class="number">3</span>]-<span class="number">9</span>*x[<span class="number">4</span>]-<span class="number">8</span>*x[<span class="number">5</span>]-<span class="number">7</span>*x[<span class="number">6</span>])*x[<span class="number">0</span>]+(<span class="number">7</span>-<span class="number">6</span>*x[<span class="number">7</span>]-<span class="number">4</span>*x[<span class="number">8</span>]-<span class="number">3</span>*x[<span class="number">9</span>])*x[<span class="number">1</span>]+(<span class="number">6</span>-<span class="number">5</span>*x[<span class="number">10</span>]-<span class="number">4</span>*x[<span class="number">11</span>])*x[<span class="number">2</span>]</span><br><span class="line">        pop.ObjV = f  <span class="comment"># 把结果赋值给ObjV</span></span><br><span class="line">        <span class="comment"># 小于等于等式或不等式约束</span></span><br><span class="line">        M=<span class="number">0x3f3f3f3f</span></span><br><span class="line">        pop.CV = np.hstack([</span><br><span class="line">            x[<span class="number">0</span>] + <span class="number">2</span> * x[<span class="number">1</span>] + x[<span class="number">2</span>]-<span class="number">100</span>,</span><br><span class="line">            <span class="number">10</span> * x[<span class="number">0</span>] + <span class="number">4</span> * x[<span class="number">1</span>] + <span class="number">5</span> * x[<span class="number">2</span>]-<span class="number">700</span>,</span><br><span class="line">            <span class="number">3</span> * x[<span class="number">0</span>] + <span class="number">2</span> * x[<span class="number">1</span>] + x[<span class="number">2</span>]-<span class="number">400</span>,</span><br><span class="line">            x[<span class="number">3</span>] + x[<span class="number">4</span>] + x[<span class="number">5</span>] + x[<span class="number">6</span>]-<span class="number">1</span>,</span><br><span class="line">            x[<span class="number">7</span>] + x[<span class="number">8</span>] + x[<span class="number">9</span>]-<span class="number">1</span>,</span><br><span class="line">            x[<span class="number">10</span>] + x[<span class="number">11</span>]-<span class="number">1</span>,</span><br><span class="line">            -(<span class="number">40</span> + M * (<span class="number">1</span> - x[<span class="number">3</span>]) - x[<span class="number">0</span>]),</span><br><span class="line">            <span class="number">41</span> - M * (<span class="number">1</span> - x[<span class="number">4</span>])-x[<span class="number">0</span>],</span><br><span class="line">            -(<span class="number">100</span> + M * (<span class="number">1</span> - x[<span class="number">4</span>])-x[<span class="number">0</span>]),</span><br><span class="line">            x[<span class="number">1</span>]-<span class="number">50</span> -M * (<span class="number">1</span> - x[<span class="number">7</span>]),</span><br><span class="line">            x[<span class="number">2</span>]-<span class="number">100</span> -M * (<span class="number">1</span> - x[<span class="number">10</span>]),</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    problem = LX1()</span><br><span class="line">    NIND = <span class="number">40</span></span><br><span class="line">    Encoding = <span class="string">&#x27;RI&#x27;</span></span><br><span class="line">    Field = ea.crtfld(Encoding, problem.varTypes, problem.ranges, problem.borders)  <span class="comment"># 创建区域描述器</span></span><br><span class="line"></span><br><span class="line">    population = ea.Population(Encoding, Field, NIND)</span><br><span class="line">    myAlgorithm = ea.soea_DE_rand_1_L_templet(problem, population)  <span class="comment"># 实例化一个算法模板对象</span></span><br><span class="line">    myAlgorithm.MAXGEN = <span class="number">1e11</span>  <span class="comment"># 最大进化代数</span></span><br><span class="line">    myAlgorithm.mutOper.F = <span class="number">0.5</span>  <span class="comment"># 差分进化中的参数F</span></span><br><span class="line">    myAlgorithm.recOper.XOVR = <span class="number">0.2</span>  <span class="comment"># 重组概率</span></span><br><span class="line">    myAlgorithm.trappedValue = <span class="number">1e-6</span>  <span class="comment"># “进化停滞”判断阈值</span></span><br><span class="line">    myAlgorithm.maxTrappedCount = <span class="number">1000</span>  <span class="comment"># 进化停滞计数器最大上限值，如果连续maxTrappedCount代被判定进化陷入停滞，则终止进化</span></span><br><span class="line">    myAlgorithm.logTras = <span class="number">0</span>  <span class="comment"># 设置每隔多少代记录日志，若设置成0则表示不记录日志</span></span><br><span class="line">    myAlgorithm.verbose = <span class="literal">True</span>  <span class="comment"># 设置是否打印输出日志信息</span></span><br><span class="line">    myAlgorithm.drawing = <span class="number">1</span>  <span class="comment"># 设置绘图方式（0：不绘图；1：绘制结果图；2：绘制目标空间过程动画；3：绘制决策空间过程动画）</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;===========================调用算法模板进行种群进化=======================&quot;&quot;&quot;</span></span><br><span class="line">    [BestIndi, population] = myAlgorithm.run()  <span class="comment"># 执行算法模板，得到最优个体以及最后一代种群</span></span><br><span class="line">    BestIndi.save()  <span class="comment"># 把最优个体的信息保存到文件中</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;==================================输出结果==============================&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;用时：%f 秒&#x27;</span> % myAlgorithm.passTime)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;评价次数：%d 次&#x27;</span> % myAlgorithm.evalsNum)</span><br><span class="line">    <span class="keyword">if</span> BestIndi.sizes != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;最优的目标函数值为：%s&#x27;</span> % BestIndi.ObjV[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;最优的控制变量值为：&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(BestIndi.Phen.shape[<span class="number">1</span>]):</span><br><span class="line">            <span class="built_in">print</span>(BestIndi.Phen[<span class="number">0</span>, i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;没找到可行解。&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 877</span></span><br><span class="line"><span class="comment"># [62 19 0]</span></span><br><span class="line"><span class="comment"># [0 0 0 0 0 0 0 0 0]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习 2"></a>练习 2</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">思路</button></li><li class="tab"><button type="button" data-href="#练习-1-3">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716160141.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716160157.png" style="height:60vh;"/></div></div><p>方便起见都设为1好了，就是一个整数01线性规划。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pulp <span class="keyword">import</span> *</span><br><span class="line">x=[[LpVariable(<span class="string">&#x27;x&#x27;</span>+<span class="built_in">str</span>(i)+<span class="built_in">str</span>(j),cat=LpInteger,lowBound=<span class="number">0</span>,upBound=<span class="literal">None</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)]</span><br><span class="line">y=[LpVariable(<span class="string">&#x27;y&#x27;</span>+<span class="built_in">str</span>(i),cat=LpBinary) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)]</span><br><span class="line">c=[[<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>) ]</span><br><span class="line">d=[<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>)]</span><br><span class="line">k=p=A=[<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">pro=LpProblem(<span class="string">&#x27;练习 2&#x27;</span>,LpMinimize)</span><br><span class="line"></span><br><span class="line">sub1=sub2=sub3=<span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    sub1+=k[i]*y[i]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        sub2+=c[i][j]*x[i][j]</span><br><span class="line">        sub3+=p[i]*x[i][j]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pro+=<span class="number">0.1</span>*sub1+sub2+sub3</span><br><span class="line">pro+= x[<span class="number">0</span>][<span class="number">0</span>]+x[<span class="number">1</span>][<span class="number">0</span>]&gt;=d[<span class="number">0</span>]</span><br><span class="line">pro+= x[<span class="number">0</span>][<span class="number">1</span>]+x[<span class="number">1</span>][<span class="number">1</span>]+x[<span class="number">2</span>][<span class="number">1</span>]&gt;=d[<span class="number">1</span>]</span><br><span class="line">pro+= x[<span class="number">1</span>][<span class="number">1</span>]+x[<span class="number">2</span>][<span class="number">2</span>]&gt;=d[<span class="number">2</span>]</span><br><span class="line">pro+= x[<span class="number">0</span>][<span class="number">3</span>]+x[<span class="number">1</span>][<span class="number">3</span>]+x[<span class="number">2</span>][<span class="number">3</span>]&gt;=d[<span class="number">3</span>]</span><br><span class="line">pro+= x[<span class="number">0</span>][<span class="number">0</span>]+x[<span class="number">0</span>][<span class="number">1</span>]+x[<span class="number">0</span>][<span class="number">3</span>]&lt;=A[<span class="number">0</span>]*y[<span class="number">0</span>]</span><br><span class="line">pro+= x[<span class="number">1</span>][<span class="number">0</span>]+x[<span class="number">1</span>][<span class="number">1</span>]+x[<span class="number">1</span>][<span class="number">2</span>]+x[<span class="number">1</span>][<span class="number">3</span>]&lt;=A[<span class="number">1</span>]*y[<span class="number">1</span>]</span><br><span class="line">pro+= x[<span class="number">2</span>][<span class="number">1</span>]+x[<span class="number">2</span>][<span class="number">2</span>]+x[<span class="number">2</span>][<span class="number">3</span>]&lt;=A[<span class="number">2</span>]*y[<span class="number">2</span>]</span><br><span class="line">pro.solve()</span><br><span class="line">s=[]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;status&#x27;</span>,LpStatus[pro.status])</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> pro.variables():</span><br><span class="line">    <span class="built_in">print</span>(v.name, <span class="string">&quot;=&quot;</span>, v.varValue)</span><br><span class="line"></span><br><span class="line">    s.append(v.varValue)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;objective=&quot;</span>, value(pro.objective))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第八讲-BP神经网络"><a href="#第八讲-BP神经网络" class="headerlink" title="第八讲 BP神经网络"></a>第八讲 BP神经网络</h2><p>无作业 <del>撞专业了导致看ppt有莫名的感觉 😒</del></p><h2 id="第九讲-多目标优化"><a href="#第九讲-多目标优化" class="headerlink" title="第九讲 多目标优化"></a>第九讲 多目标优化</h2><h3 id="多目标优化的性能度量"><a href="#多目标优化的性能度量" class="headerlink" title="多目标优化的性能度量"></a>多目标优化的性能度量</h3><p>标准：</p><ul><li>必须收敛到pareto 优解集</li><li>pareto优解集的均匀性和稳定性</li></ul><div class="tabs" id="度量方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#度量方法-1">C-度量方法</button></li><li class="tab"><button type="button" data-href="#度量方法-2">D-度量方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="度量方法-1"><p>​    反映了一个算法得到的最优解被另一个算法得到的最优解支配的比例。设 A 和 B 分别是算法 A 和算法 B 得到的非支配解集或 Pareto 最优解集:</p><script type="math/tex; mode=display">C(A,B)=\frac{|\{b\in B | \exist \   a\in A, a \ covers \ b\}|}{|B|}</script><p>其中 |B|表示集合 B中的元素个数，a covers b表示a支配b或a与b同样好。</p><p>若C(A,B)&gt;C(B,A)，则算法 A 求得的 Pareto 最优解集优于算法 B 求得的 Pareto 最优解集。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="度量方法-2"><p>​    为测量 A 的均匀性和宽广性，设 $P^\star$是Pareto 前沿面上均匀分布的一组解，$P^\star$到 A的平均距离定义为：</p><script type="math/tex; mode=display">D(A,P^\star)=\frac{\sum_{v\in P^\star} d(v,A)}{|P^\star|}</script><p>d(v,A)表示v与A中的点的最小欧式距离， $D(A,P^\star)$越小，说明A 越接近 Pareto 前沿面</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="练习-1-3"><a href="#练习-1-3" class="headerlink" title="练习 1"></a>练习 1</h3><p><del>遗传算法yyds</del></p><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">思路</button></li><li class="tab"><button type="button" data-href="#练习-1-3">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210717002128.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><p>设生产$x_0$,$x_1$个A，B型号润滑油，分别加工生产$x_3$，$ x_4$个A，B型号润滑油，观察题目数据，发现必须会有加工生产。</p><script type="math/tex; mode=display">\begin{cases}F=min (3x_0+2x_1,-100x_0-90x_2-80x_1-70x_3) \\3x_0+2x_1<=120\\3x_2+2x_3<=48\\x_3+x_1>=30\\x_2+x_0>=30\\x_i>=0 \quad  i\in [0,4]\end{cases}</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-3"><p>这里使用的是Geatpy库实现，不同库的对比可以参考<a href="https://zhuanlan.zhihu.com/p/138127772">这篇知乎</a>自行选择</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> geatpy <span class="keyword">as</span> ea</span><br><span class="line"><span class="keyword">from</span> geatpy <span class="keyword">import</span> Problem,crtfld,Population</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LX1</span>(<span class="params">Problem</span>):</span> <span class="comment"># 继承Problem父类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        name = <span class="string">&#x27;练习 1&#x27;</span> <span class="comment"># 初始化name（函数名称，可以随意设置）</span></span><br><span class="line">        M = <span class="number">2</span> <span class="comment"># 初始化M（目标维数）</span></span><br><span class="line">        maxormins = [<span class="number">1</span>,-<span class="number">1</span>]  <span class="comment"># 初始化maxormins（目标最小最大化标记列表，1：最小化该目标；-1：最大化该目标）</span></span><br><span class="line">        Dim = <span class="number">4</span> <span class="comment"># 初始化Dim（决策变量维数）</span></span><br><span class="line">        varTypes = [<span class="number">1</span>] * Dim <span class="comment"># 初始化varTypes（决策变量的类型，0：实数；1：整数）</span></span><br><span class="line">        lb = [<span class="number">0</span>] * Dim <span class="comment"># 决策变量下界</span></span><br><span class="line">        ub = [<span class="number">60</span>] * Dim <span class="comment"># 决策变量上界</span></span><br><span class="line">        lbin = [<span class="number">1</span>] * Dim <span class="comment"># 决策变量下边界（0表示不包含该变量的下边界，1表示包含）</span></span><br><span class="line">        ubin = [<span class="number">1</span>] * Dim <span class="comment"># 决策变量上边界（0表示不包含该变量的上边界，1表示包含）</span></span><br><span class="line">        <span class="comment"># 调用父类构造方法完成实例化</span></span><br><span class="line">        Problem.__init__(self, name, M, maxormins, Dim, varTypes, lb, ub, lbin, ubin)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aimFunc</span>(<span class="params">self, pop</span>):</span> <span class="comment"># 目标函数</span></span><br><span class="line">        Vars = pop.Phen <span class="comment"># 得到决策变量矩阵</span></span><br><span class="line">        <span class="comment"># 行向量</span></span><br><span class="line">        x0,x1,x2,x3 = Vars[:, <span class="number">0</span>],Vars[:,<span class="number">1</span>],Vars[:,<span class="number">2</span>],Vars[:,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        f = <span class="number">3</span>*x0+<span class="number">2</span>*x1</span><br><span class="line">        g = <span class="number">100</span>*x0+<span class="number">90</span>*x2+<span class="number">80</span>*x1+<span class="number">70</span>*x3</span><br><span class="line"></span><br><span class="line">        pop.ObjV = np.array([f, g]).T <span class="comment"># 把结果赋值给ObjV</span></span><br><span class="line">        <span class="comment"># 小于等于等式或不等式约束</span></span><br><span class="line">        pop.CV=np.vstack([</span><br><span class="line">            <span class="number">3</span>*x0+<span class="number">2</span>*x1-<span class="number">120</span>,</span><br><span class="line">            <span class="number">3</span>*x2+<span class="number">2</span>*x3-<span class="number">48</span>,</span><br><span class="line">            <span class="number">30</span>-x1-x3,</span><br><span class="line">            <span class="number">30</span>-x0-x2</span><br><span class="line">        ]).T</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    problem=LX1()</span><br><span class="line">    NIND=<span class="number">40</span></span><br><span class="line">    Encoding=<span class="string">&#x27;RI&#x27;</span></span><br><span class="line">    Field=ea.crtfld(Encoding, problem.varTypes, problem.ranges, problem.borders) <span class="comment"># 创建区域描述器</span></span><br><span class="line"></span><br><span class="line">    population=ea.Population(Encoding,Field,NIND)</span><br><span class="line">    myalgorithm=ea.moea_NSGA2_templet(problem,population)</span><br><span class="line">    myalgorithm.MAXGEN = <span class="number">100</span>  <span class="comment"># 最大进化代数</span></span><br><span class="line">    myalgorithm.logTras = <span class="number">0</span>  <span class="comment"># 设置每多少代记录日志，若设置成0则表示不记录日志</span></span><br><span class="line">    myalgorithm.verbose = <span class="literal">True</span>  <span class="comment"># 设置是否打印输出日志信息</span></span><br><span class="line">    myalgorithm.drawing = <span class="number">1</span>  <span class="comment"># 设置绘图方式（0：不绘图；1：绘制结果图；2：绘制目标空间过程动画；3：绘制决策空间过程动画）</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;==========================调用算法模板进行种群进化=========================</span></span><br><span class="line"><span class="string">    调用run执行算法模板，得到帕累托最优解集NDSet以及最后一代种群。NDSet是一个种群类Population的对象。</span></span><br><span class="line"><span class="string">    NDSet.ObjV为最优解个体的目标函数值；NDSet.Phen为对应的决策变量值。</span></span><br><span class="line"><span class="string">    详见Population.py中关于种群类的定义。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    [NDSet, population] = myalgorithm.run()  <span class="comment"># 执行算法模板，得到非支配种群以及最后一代种群</span></span><br><span class="line">    NDSet.save()  <span class="comment"># 把非支配种群的信息保存到文件中</span></span><br><span class="line">   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;用时：%f 秒&#x27;</span> % myalgorithm.passTime)</span><br><span class="line">    <span class="built_in">print</span>(NDSet.sizes)</span><br></pre></td></tr></table></figure><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210717212554.svg" alt="结果1"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="练习-2-1"><a href="#练习-2-1" class="headerlink" title="练习 2"></a>练习 2</h3><div class="tabs" id="练习-2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-2-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-2-2">思路</button></li><li class="tab"><button type="button" data-href="#练习-2-3">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-2-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210717002154.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-2-2"><p>由题意可建得以下模型：</p><script type="math/tex; mode=display">\begin{cases}f_1=max(10*x_a+20*x_b+12*x_c+14*x_d) \\f2=min(0.015*x_a+0.02*x_b+0.018*x_c+0.011*x_d\\\\0.015x_a+0.02*x_b+0.018*x_c+0.011*x_d\leq20 \\40*300\leq 13*x_a+13.5*x_b+14*x_c+11.5*x_d\leq 48*300\\\\x_a\in[0,270],x_b\in[0,240],x_c\in[150,460],x_d\in[0,130]\end{cases}</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-2-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> geatpy <span class="keyword">as</span> ea</span><br><span class="line"><span class="keyword">from</span> geatpy <span class="keyword">import</span> Problem, crtfld, Population</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LX1</span>(<span class="params">Problem</span>):</span>  <span class="comment"># 继承Problem父类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        name = <span class="string">&#x27;练习 1&#x27;</span>  <span class="comment"># 初始化name（函数名称，可以随意设置）</span></span><br><span class="line">        M = <span class="number">2</span>  <span class="comment"># 初始化M（目标维数）</span></span><br><span class="line">        maxormins = [-<span class="number">1</span>, <span class="number">1</span>]  <span class="comment"># 初始化maxormins（目标最小最大化标记列表，1：最小化该目标；-1：最大化该目标）</span></span><br><span class="line">        Dim = <span class="number">4</span>  <span class="comment"># 初始化Dim（决策变量维数）</span></span><br><span class="line">        varTypes = [<span class="number">0</span>] * Dim  <span class="comment"># 初始化varTypes（决策变量的类型，0：实数；1：整数）</span></span><br><span class="line">        lb = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">0</span>]  <span class="comment"># 决策变量下界</span></span><br><span class="line">        ub = [<span class="number">270</span>,<span class="number">240</span>,<span class="number">460</span>,<span class="number">130</span>] <span class="comment"># 决策变量上界</span></span><br><span class="line">        lbin = [<span class="number">1</span>] * Dim  <span class="comment"># 决策变量下边界（0表示不包含该变量的下边界，1表示包含）</span></span><br><span class="line">        ubin = [<span class="number">1</span>] * Dim  <span class="comment"># 决策变量上边界（0表示不包含该变量的上边界，1表示包含）</span></span><br><span class="line">        <span class="comment"># 调用父类构造方法完成实例化</span></span><br><span class="line">        Problem.__init__(self, name, M, maxormins, Dim, varTypes, lb, ub, lbin, ubin)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aimFunc</span>(<span class="params">self, pop</span>):</span>  <span class="comment"># 目标函数</span></span><br><span class="line">        Vars = pop.Phen  <span class="comment"># 得到决策变量矩阵</span></span><br><span class="line">        <span class="comment"># 行向量</span></span><br><span class="line">        xa, xb, xc, xd = Vars[:, [<span class="number">0</span>]], Vars[:, [<span class="number">1</span>]], Vars[:, [<span class="number">2</span>]], Vars[:, [<span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">        f1 = <span class="number">10</span>*xa+<span class="number">20</span>*xb+<span class="number">12</span>*xc+<span class="number">14</span>*xd</span><br><span class="line">        f2 = <span class="number">0.015</span>*xa+<span class="number">0.02</span>*xb+<span class="number">0.018</span>*xc+<span class="number">0.011</span>*xd</span><br><span class="line">        <span class="comment"># 只要求目标函数shape要为 [xx，M]，前面随便弄</span></span><br><span class="line">        pop.ObjV = np.hstack([f1, f2])  <span class="comment"># 把结果赋值给ObjV</span></span><br><span class="line">        <span class="comment"># 小于等于等式或不等式约束</span></span><br><span class="line">        pop.CV = np.hstack([</span><br><span class="line">            <span class="number">0.015</span>*xa+<span class="number">0.02</span>*xb+<span class="number">0.018</span>*xc+<span class="number">0.011</span>*xd-<span class="number">20</span>,</span><br><span class="line">            <span class="number">13</span>*xa+<span class="number">13.5</span>*xb+<span class="number">14</span>*xc+<span class="number">11.5</span>*xd-<span class="number">48</span>*<span class="number">300</span>,</span><br><span class="line">            -(<span class="number">13</span>*xa+<span class="number">13.5</span>*xb+<span class="number">14</span>*xc+<span class="number">11.5</span>*xd-<span class="number">40</span>*<span class="number">300</span>)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    problem = LX1()</span><br><span class="line">    NIND = <span class="number">40</span></span><br><span class="line">    Encoding = <span class="string">&#x27;RI&#x27;</span></span><br><span class="line">    Field = ea.crtfld(Encoding, problem.varTypes, problem.ranges, problem.borders)  <span class="comment"># 创建区域描述器</span></span><br><span class="line"></span><br><span class="line">    population = ea.Population(Encoding, Field, NIND)</span><br><span class="line">    myalgorithm = ea.moea_NSGA2_templet(problem, population)</span><br><span class="line">    myalgorithm.MAXGEN = <span class="number">100</span>  <span class="comment"># 最大进化代数</span></span><br><span class="line">    myalgorithm.logTras = <span class="number">0</span>  <span class="comment"># 设置每多少代记录日志，若设置成0则表示不记录日志</span></span><br><span class="line">    myalgorithm.verbose = <span class="literal">True</span>  <span class="comment"># 设置是否打印输出日志信息</span></span><br><span class="line">    myalgorithm.drawing = <span class="number">1</span>  <span class="comment"># 设置绘图方式（0：不绘图；1：绘制结果图；2：绘制目标空间过程动画；3：绘制决策空间过程动画）</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;==========================调用算法模板进行种群进化=========================</span></span><br><span class="line"><span class="string">    调用run执行算法模板，得到帕累托最优解集NDSet以及最后一代种群。NDSet是一个种群类Population的对象。</span></span><br><span class="line"><span class="string">    NDSet.ObjV为最优解个体的目标函数值；NDSet.Phen为对应的决策变量值。</span></span><br><span class="line"><span class="string">    详见Population.py中关于种群类的定义。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    [NDSet, population] = myalgorithm.run()  <span class="comment"># 执行算法模板，得到非支配种群以及最后一代种群</span></span><br><span class="line">    NDSet.save(<span class="string">&#x27;solve1&#x27;</span>)  <span class="comment"># 把非支配种群的信息保存到文件中</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;用时：%f 秒&#x27;</span> % myalgorithm.passTime)</span><br><span class="line">    <span class="built_in">print</span>(NDSet.sizes)</span><br></pre></td></tr></table></figure><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210717214109.svg" alt="结果2"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第十讲-过程预测与优化"><a href="#第十讲-过程预测与优化" class="headerlink" title="第十讲 过程预测与优化"></a>第十讲 过程预测与优化</h2><p>好家伙，全英文ppt，头看掉了</p><h2 id="第十一讲-时间序列分析"><a href="#第十一讲-时间序列分析" class="headerlink" title="第十一讲 时间序列分析"></a>第十一讲 时间序列分析</h2><p><del>似乎没有作业，全程讲课</del> 时间序列的学习<a href="https://dummerfu.top/p/65094.html">我之前写过这一篇</a></p><h2 id="第十二讲-马氏链模型"><a href="#第十二讲-马氏链模型" class="headerlink" title="第十二讲 马氏链模型"></a>第十二讲 马氏链模型</h2><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">思路</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210716102259.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><p>每天的状态转移规律</p><script type="math/tex; mode=display">X_{n+1}=\begin{cases}            X_n-D_{n+1} &&X_n-D_{n+1}>s\\            S && X_n-D_{n+1}<=s        \end{cases}\\</script><p>因为$X_{n+1} \in [1,2,3,4,5]$，所以概率矩阵为</p><script type="math/tex; mode=display">p_{11}=P({X_{n+1}=1|X_n=1})=0\\p_{21}=P(X_{n+1}=1|X_n=2)=0</script><p>以此类推可得完整状态转移矩阵P</p><script type="math/tex; mode=display">    P=\left\{ \begin{matrix}    0  & 0 & 0 & 0 & 1   \\    0  & 0.3& 0 & 0 &0.7 \\    0  & 0.4& 0.3&0 &0.3 \\    0  & 0.2& 0.4&0.3&0.1\\    0  & 0.1& 0.2&0.4&0.3\\    \end{matrix}\right\}</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第十三讲-蒙特卡洛模拟"><a href="#第十三讲-蒙特卡洛模拟" class="headerlink" title="第十三讲 蒙特卡洛模拟"></a>第十三讲 蒙特卡洛模拟</h2><p>蒙特卡洛还是比较重要的，就多来几道例题吧</p><h3 id="了解随机数"><a href="#了解随机数" class="headerlink" title="了解随机数"></a>了解随机数</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210715195437.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读懂了就很简单了</span></span><br><span class="line"><span class="comment"># a,c,m,x0可以自己设定</span></span><br><span class="line">a,c,m,N=<span class="number">5</span>,<span class="number">1</span>,<span class="number">16</span>,<span class="number">5000</span></span><br><span class="line"></span><br><span class="line">x=[<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">x[<span class="number">0</span>]=<span class="number">5</span></span><br><span class="line">b=[<span class="number">0.</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">b[<span class="number">0</span>]=x[<span class="number">0</span>]/m</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N):</span><br><span class="line">    x[i]=(x[i-<span class="number">1</span>]*a+c)%m</span><br><span class="line">    b[i]=x[i]/m</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><div class="tabs" id="例题-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#例题-1-1">题目</button></li><li class="tab"><button type="button" data-href="#例题-1-2">思路</button></li><li class="tab"><button type="button" data-href="#例题-1-3">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="例题-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210715203726.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例题-1-2"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210715203738.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="例题-1-3"><p>好家伙python光循环1e6次并且里面生成随机数就无了，亏我还用的是的numpy.random </p><p><del>果然这种暴力还是c++更适合</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">tot=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">N=<span class="built_in">int</span>(<span class="number">1e6</span>)</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    theta=[np.cos(np.random.rand()*np.pi) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>(theta)&gt;<span class="number">5</span>:</span><br><span class="line">        tot+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(tot)</span><br></pre></td></tr></table></figure><p>​    有没有大佬传授一下提速的奇淫技巧啊</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">思路</button></li><li class="tab"><button type="button" data-href="#练习-1-3">CODE</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><p>用计算机仿真布沣实验计算圆周率。</p><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210715230226.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><p>显然，答案与针的横坐标无关，一个针的坐标位置只与纵坐标<code>y</code>和角度$\theta$ 有关。</p><p>设距最近下面的横线距离为y显然$y\in [0,a)$的均匀分布且$\theta  \in [0,\pi)$的均匀分布，相交只需判断$y+lsin(\theta)&gt;ceil$ 和 $y-lsin(\theta)&lt;floor$即可。</p><p>概率公式如下：</p><script type="math/tex; mode=display">P=\int_{0}^{\pi}\int_{0}^{lsin(\theta)} \frac{1}{\pi a}dx d\theta+\int_{0}^{\pi}\int_{a-lsin(\theta)}^{a} \frac{1}{\pi a}dx d\theta=\frac{4l}{a\pi}</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">tot=<span class="number">0</span></span><br><span class="line">N=<span class="built_in">int</span>(<span class="number">1e6</span>)</span><br><span class="line">a=<span class="number">0.001</span></span><br><span class="line">l=a/<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    y=np.random.rand()</span><br><span class="line">    theta=np.random.rand()*np.pi</span><br><span class="line">    nearest=np.ceil(y*<span class="number">1e3</span>)/<span class="number">1e3</span></span><br><span class="line">    <span class="keyword">if</span> y+l*np.sin(theta)&gt;nearest:<span class="comment"># 省略一个判断，最后结果除2了</span></span><br><span class="line">        tot+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>/(tot/N))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第十四讲-1stopt"><a href="#第十四讲-1stopt" class="headerlink" title="第十四讲 1stopt"></a>第十四讲 1stopt</h2><p>看到这图….<img no-lazy class="inline" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210718214308.png" style="height:60vh;"/> 散了散了，不会有人20世纪了还在这学passcal吧，basic就离谱</p><p><del>但是练习还是要做的</del></p><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h3><p>最小二乘法拟合曲线…也没什么技术含量。</p><p>函数长这样:</p><script type="math/tex; mode=display">\epsilon_r=\epsilon_\infty+\frac{\epsilon_s-\epsilon_\infty}{1+i\omega \tau }  \quad \beta\in (0,1]</script><p>在作业data中，w表示自变量，也是excel的第一列，第二和第三列分别表示因变量的实部和虚部。<br>要求：第一，采用最小二乘法进行拟合；<br>第二，在已知函数的时候，求几个参数的最优值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第十五讲-数值计算方法"><a href="#第十五讲-数值计算方法" class="headerlink" title="第十五讲 数值计算方法"></a>第十五讲 数值计算方法</h2><h2 id="第十六讲-常微分方程模型"><a href="#第十六讲-常微分方程模型" class="headerlink" title="第十六讲 常微分方程模型"></a>第十六讲 常微分方程模型</h2><h3 id="练习-1-4"><a href="#练习-1-4" class="headerlink" title="练习 1"></a>练习 1</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210717173625.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第十七讲-差分方程模型"><a href="#第十七讲-差分方程模型" class="headerlink" title="第十七讲 差分方程模型"></a>第十七讲 差分方程模型</h2><p>都是数学题，压根不用码，<strong>靠zzy带飞 orz</strong>  </p><h3 id="练习-1-5"><a href="#练习-1-5" class="headerlink" title="练习 1"></a>练习 1</h3><div class="tabs" id="练习-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-1-2">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210717161316.png" style="height:70vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-1-2"><script type="math/tex; mode=display">x_{n+1}=\frac{x_n+x_{n-1}+x_{n-2}}{3}\\</script><p>特征方程解得$\lambda_{1,2,3}=\frac{\pm\sqrt2j -1}{3}$所以</p><script type="math/tex; mode=display">x_n=C_1(\frac{\sqrt2j-1}{3})^n+C_2(\frac{-\sqrt2 j-1}{3})^n+C_3</script><p>$C_1 ,C_2,C_3$由$x_1,x_2,x_3$初始值可解出</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="练习-2-2"><a href="#练习-2-2" class="headerlink" title="练习 2"></a>练习 2</h3><div class="tabs" id="练习-2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-2-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-2-2">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-2-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210717162244.png" style="height:70vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-2-2"><p>将上面三个差分方程整合可得有：</p><script type="math/tex; mode=display">L_{t+2}=b(1-\mu_p)(1-\mu_L)L_{t-1}+(1-\mu_A)L_{t+1}</script><p>求得特征方程为：</p><script type="math/tex; mode=display">\lambda^3-(1-\mu_A)\lambda^2-b(1-\mu_p)(1-\mu_L)=0</script><p>根据求根公式可得解，通过控制所有解绝对值小于1可令群体负增长</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习 3"></a>练习 3</h3><div class="tabs" id="练习-3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-3-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-3-2">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-3-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210717162300.png" style="height:70vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-3-2"><p>列得关系式：</p><script type="math/tex; mode=display">x_{n+1}=kx_{n}+A_0</script><p>不动点：</p><script type="math/tex; mode=display">\lambda=\frac{A_0}{1-k}</script><p>收敛极限：</p><script type="math/tex; mode=display">x_n=\frac{1-k^{n+1}}{1-k}A_0</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="练习 4"></a>练习 4</h3><div class="tabs" id="练习-4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-4-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-4-2">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-4-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210717162313.png" style="height:70vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-4-2"><p>易得：</p><script type="math/tex; mode=display">x_{n+1}=2x_n+1 \rightarrow x_n=2^n-1</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第十八讲-偏微分方程模型"><a href="#第十八讲-偏微分方程模型" class="headerlink" title="第十八讲 偏微分方程模型"></a>第十八讲 偏微分方程模型</h2><p><del>作业太随便了，就是做往年题</del></p><h2 id="第十九讲-微分方程模型数值解"><a href="#第十九讲-微分方程模型数值解" class="headerlink" title="第十九讲 微分方程模型数值解"></a>第十九讲 微分方程模型数值解</h2><h2 id="第二十讲-2020国赛C题"><a href="#第二十讲-2020国赛C题" class="headerlink" title="第二十讲 2020国赛C题"></a>第二十讲 2020国赛C题</h2><ul><li>使用模型方法前要解释为什么要使用这个方法，比如为什么要使用回归？分类？</li><li>求解优化问题时要先介绍求解方法和过程，有必要可以画流程图。</li><li>每一个求解结果都需要用图标直观显示，并说明与之前的对比。</li><li>大型的神经网络模型只需要把与题目相关的解释清楚，但是随篇幅灵活改动。</li><li>没有数据的问题可以从网上爬取。</li><li>附代码必须写注释<del>虽然估计也没人看</del></li><li>写论文前可以参考知网、万方，但是不要盲目相信，因为国内论文水平可能很低，即使是硕士论文</li><li>要明确解决问题的目标，然后寻找论文或算法，不要盲目跟随别人的论文。</li><li>参考文献，一般在问题分析里面引用参考文献，因为你不是从头开始求解这个问题的</li><li>参考文献即使是链接也可以引用，但是需要说明链接的主要内容</li><li>参考文献必须要在正文引用。</li></ul><h2 id="第二十一讲-博弈论和纳什均衡"><a href="#第二十一讲-博弈论和纳什均衡" class="headerlink" title="第二十一讲 博弈论和纳什均衡"></a>第二十一讲 博弈论和纳什均衡</h2><h3 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h3><div class="tabs" id="练习"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-2">纯策略纳什均衡讲解</button></li><li class="tab"><button type="button" data-href="#练习-3">题目思路</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210718202253.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-2"><p>看这个ppt才明白纯策略纳什均衡</p><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210718204933.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-3"><ul><li><p>纯策略纳什均衡为 工人不偷懒，监工不监督</p></li><li><p>混合策略纳什均衡：</p><p>  设监工监督的概率为P，不监督的概率为1-P</p><script type="math/tex; mode=display">  \begin{cases}  E_{偷懒}=P-(1-P)=2P-1\\  E_{不偷懒}=-2P+2(1-P)=2-4P\\  \end{cases}  \\  E_{偷懒}=E_{不偷懒}  \rightarrow  P=0.5</script><p>  则在混合策略纳什均衡条件下，监工监督概率为0.5，此时工人的收益为 (1-1)P=0</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第二十二讲-数值计算分析"><a href="#第二十二讲-数值计算分析" class="headerlink" title="第二十二讲 数值计算分析"></a>第二十二讲 数值计算分析</h2><p>无作业</p><h2 id="第二十三讲-反应扩散方程"><a href="#第二十三讲-反应扩散方程" class="headerlink" title="第二十三讲 反应扩散方程"></a>第二十三讲 反应扩散方程</h2><h3 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h3><div class="tabs" id="练习"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1">题目</button></li><li class="tab"><button type="button" data-href="#练习-2">思路</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1"><div class="img-wrap"><div class="img-bg"><img class="img" src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed03@image_bed_001/img/20210727214728.png" style="height:60vh;"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第二十四讲-工程数学建模"><a href="#第二十四讲-工程数学建模" class="headerlink" title="第二十四讲 工程数学建模"></a>第二十四讲 工程数学建模</h2><p><del>无作业，看都不想看</del></p><div class="tip warning"><p>END </p></div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Action 自动部署hexo</title>
      <link href="/p/15888.html"/>
      <url>/p/15888.html</url>
      
        <content type="html"><![CDATA[<h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p><del>日常水字数</del></p><p>hexo部署之后总是会觉得每次写完要一键三连比较麻烦，特别是文章写多了后generate会很慢，这个时候要是有个能写完文章或者push后自动一键三连岂不美哉？</p><p>在git action出来之前，网上有这种脚本，什么加alias，监听deploy啊，但是这些还是会在自己本地上显示generate出来的东西影响观感~~</p><p>下面简单介绍一下Git Action和我踩的坑，（没想到时隔半年，我居然会又部署一遍这个…</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="Git-Action实现"><a href="#Git-Action实现" class="headerlink" title="Git Action实现"></a>Git Action实现</h3><h4 id="准备密匙"><a href="#准备密匙" class="headerlink" title="准备密匙"></a>准备密匙</h4><p>在根目录下面.ssh里面生成一对名为github-action-deploy的密匙（公匙后缀为pub</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f ~/.ssh/github-actions-deploy</span><br></pre></td></tr></table></figure><p>在github主页面的 <code>Settings</code>-&gt;<code>SSH and GPG keys</code>添加刚刚生成的公钥，名称随意。 在<code>blog</code>仓库的<code>Settings</code>-&gt;<code>Secrets</code>里添加刚刚生成的私钥，名称为 <code>ACTION_DEPLOY_KEY</code> 这个一定要一样，不想后面直接复制yml文件后出问题萌新就不要名字了。</p><h4 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="comment"># 目前不清楚第一个deploy有什么用，下面那样也行</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span> <span class="comment"># 最好是git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxxx.git</span> <span class="comment"># 使用仓库的ssh地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># 分支名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># backup</span></span><br><span class="line"><span class="comment"># - type: git</span></span><br><span class="line"><span class="comment">#   repo: git@github.com:xxxx.git # 仓库地址</span></span><br><span class="line"><span class="comment">#   branch: </span></span><br></pre></td></tr></table></figure><h4 id="配置Git-Action"><a href="#配置Git-Action" class="headerlink" title="配置Git Action"></a>配置Git Action</h4><p>在配置私钥的仓库点击<code>Action</code>-&gt;<code>new workflow</code> 创建一个main.yml文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Compile</span> <span class="string">and</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Page</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># 你的branch |一般是 master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;13.x&#x27;</span> <span class="comment">#不同版本可能会有不兼容的npm包，后面会说坑</span></span><br><span class="line">          </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">hexo</span></span><br><span class="line">      <span class="attr">env:</span> </span><br><span class="line">      <span class="comment"># secrets选项中你配置私匙的名字，前面一样就不用改</span></span><br><span class="line">          <span class="attr">ACTIONS_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">        echo &quot;$ACTIONS_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;xxx&quot; # github邮箱</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;xxx&quot;  # github用户名</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><h3 id="hexo-uitl"><a href="#hexo-uitl" class="headerlink" title="hexo-uitl"></a>hexo-uitl</h3><p><del>之前Git Action用的好好的,换个主题突然就出bug了</del></p><p><img src= "/img/lazyload.svg" data-src="C:/Users/Lenovo/AppData/Roaming/Typora/typora-user-images/image-20210704153929038.png" alt="image-20210704153929038"></p><p>这个错误很<strong>隐晦</strong>，表面上是这个highlight.js错误但是实际上是hexo-uitl不支持node12版本以下，这个在之前的<code>setup hexo</code></p><p>里面有提到，因为不是error没有注意，弄我半天…<del>也算是我水这篇博客的原因</del></p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210704155108.png" alt="image-20210704155108843"></p><p>在yml文件把node-version改高点就行了 <del>弄我debug一天</del></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透工具测评</title>
      <link href="/p/23841.html"/>
      <url>/p/23841.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要内网穿透"><a href="#为什么要内网穿透" class="headerlink" title="为什么要内网穿透"></a>为什么要内网穿透</h1><p>​    众所周知，不同网络下的电脑是无法访问别人本地ip挂载的web程序的，这就是因为内网（NAT）。</p><p>但是处于种种原因，比如你写了个程序想装逼又或你想<a href="https://dummerfu.top/p/14426.html">挂载本地文件</a>让他人访问下载又或想开个Minecraft服务器大家一起玩，这就需要一个人人都能访问的ip了（公网ip）。</p><p>​    我们通常是看不到这些ip且较难获得这种公网ip <del>这涉及到一系列知识就不细说了</del> 但是有一些工具可以让我们不配置服务器和域名就可以<strong>较为简单的获得这种公网ip</strong>（域名映射后的）。</p><p>​    我找这种软件也找了不少，真正想完美白嫖还是挺困难的。（踩了许多广告坑，不能白踩，故在此记录</p><p>​    我包括但不仅限于下面几项来评测软件白嫖程度：</p><blockquote><ul><li>配置</li><li>带宽限制</li><li>流量限制</li></ul></blockquote><p>废话不多说，下面开始软件测评环节。<del>绝对中立的评测，无恰饭（也没资本恰饭</del></p><h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><h2 id="ngrok-钉钉穿透"><a href="#ngrok-钉钉穿透" class="headerlink" title="ngrok|钉钉穿透"></a>ngrok|钉钉穿透</h2><p>这两个似乎是一个东西 <del>出来的页面都一样</del>，没怎么用不评判</p><h2 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h2><p><del>全靠广告撑起来，本人没付费使用过，但是贵是确实</del></p><ul><li>配置：无需配置，官网教程详细 <del>这么贵还不详细谁会用啊</del></li><li>流量：有限，免费只有1G？</li><li>带宽：1G带宽</li><li>协议：白嫖只有tcp</li><li>综合：白嫖不易，巨贵无比，学生党极不友好。</li></ul><h2 id="NATAPP"><a href="#NATAPP" class="headerlink" title="NATAPP"></a><a href="https://natapp.cn/article/natapp_newbie">NATAPP</a></h2><ul><li>配置：简单易上手</li><li>流量：不限量</li><li>协议：tcp，http等都支持</li><li>带宽：免费只有1M带宽 </li><li>综合：虽然不限量，只有1M带宽但是看情况还是可以用</li></ul><h2 id="Nat123-和-NetTunnel"><a href="#Nat123-和-NetTunnel" class="headerlink" title="Nat123 和 NetTunnel"></a>Nat123 和 <a href="https://console.uulap.com/#">NetTunnel</a></h2><p>​    Net123不充值只能映射80端口，收费与花生壳相比还是便宜一点。<del>页面还是上个年代的样子，丑不可言</del></p><p>NetTunnel就相对人性化，页面好看文档也全，和NetApp差不多，但是多了个客户端启动，带宽也还是1M。</p><h2 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h2><p>需要自带服务器等，不能白嫖，企业使用。</p><h2 id="Zeroiter"><a href="#Zeroiter" class="headerlink" title="Zeroiter"></a><a href="https://www.zerotier.com/">Zeroiter</a></h2><p>​    <a href="https://zhuanlan.zhihu.com/p/83849371">知乎使用教程</a></p><p>​    私人用可以，是另类的内网穿透，是通过创建虚拟网卡，使安装这个软件的人可以加入到同一个局域网从而实现’’内网穿透’’效果，但是要至少两个设备。<del>对于玩联机游戏等场景的十分好用</del></p><p>​    傻瓜安装操作，但是server端似乎需要fq，所以对于小白也不怎么好用。</p><h2 id="Holoer"><a href="#Holoer" class="headerlink" title="Holoer"></a><a href="https://github.com/wisdom-projects/holer-client">Holoer</a></h2><ul><li>配置：难懂，未配置成功。</li></ul><h2 id="Sakura-Frp"><a href="#Sakura-Frp" class="headerlink" title="Sakura Frp"></a><a href="https://www.natfrp.com/user/">Sakura Frp</a></h2><p><del><a href="https://noionion.top/">noionion</a>推荐的，这么好的东西我都搜不到，看来我信息检索能力还有待提高</del></p><p>只能说完爆上面NatXX</p><ul><li>配置：可以说是十分详细了，应该不会有人看不懂</li><li>流量：每天10G?,还有签到流量（上限100g）。</li><li>协议：tcp等都支持，而且支持自绑域名（绑域名太香了）</li><li>带宽：免费是限速10M，超流量后限速4M</li><li>还可以开机后台自启动：本地为服务器真的方便</li></ul><p>吐槽：<del>这页面做的和某机场一样让我第一眼还以为进错了网站</del>，</p><p>首先这个不是完全白嫖，会有个需要1rmb的实名认证，实名认证之后才可以用。然后写着限速10M，但是我下载似乎是跑不满，可能是我自己的带宽不太够跑不满。这个你们可以自己测测。</p><p>总之还是非常好用的，毕竟只用1rmb就做到了常人难以做到的事<del>滑稽</del>。</p><p>不过注意一下，<strong>创建隧道时高级设置加密传输不能启用，启用就无法穿透成功</strong>。</p><h2 id="NPS"><a href="#NPS" class="headerlink" title="NPS"></a><a href="https://ehang-io.github.io/nps/#/use">NPS</a></h2><p>推荐的，功能是挺多的但是主要是应用场景与假设不符（因为还是需要一个公网ip</p><ul><li>udp，tcp，socket等主流协议都支持</li><li>什么都没有限制（毕竟是自己的服务器😀</li></ul><p>总体感觉是大材小用了，更适合长期上线api等任务，因为主打穿透，功能也更全（vps要自己准备，如果上线web的话可以考虑</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>白嫖无果 —- 相比之下NetApp和NetTunnel除了1M带宽还是好用的，学习或者测试web 1M带宽将就将就也还行。</li><li>微氪可以选择Sakura Frp，毕竟1rmb可以享受的权益和其他的相比确实挺多的，10M带宽还有待考量。</li><li>重氪玩家有硬需求还是买台服务器算了，自带公网ip，但是花生壳慎重。</li></ul><p>日后还有什么好用的内网穿透工具还会再加的，大家有什么好用的也可以在评论区分享。</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 杂集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Colab 实现本地连接</title>
      <link href="/p/64572.html"/>
      <url>/p/64572.html</url>
      
        <content type="html"><![CDATA[<h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>​    虽说colab可以挂载谷歌云，但是机器学习方面的数据集传输一直都是个麻烦事，更别说fq传网盘上了<del>你上传速度快？那可以右上角了</del></p><p>​    再退一步，虽然可以共享文件，但是本地还是不能同步修改也算一个痛点，那么干脆直接将colab直接挂载在本地算了。然而看网上的奇淫技巧估计都是老博客了，也没有谈到这方面，所以干脆自己记录一下。</p><p>​    ps: 似乎挂载本地就不能用colab的GPU了（虽然更改笔记本设置gpu还是会提示你重新连接，但是速度似乎是和本地一样快？）<del>本地了个寂寞</del></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><div class='tip bug'>本实例都是在window环境下运行，未尝试linux</div><p>不多解释<del>都学到用colab了别和我说还不会pip安装依赖</del></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#　安装 安装jupyter</span></span><br><span class="line">pip install notebook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用jupyter_http_over_ws jupyter 扩展程序（连接到本地需要</span></span><br><span class="line">pip install jupyter_http_over_ws jupyter serverextension <span class="built_in">enable</span> --py jupyter_http_over_ws</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动jupyter 最后一行参数是为了挂载到本地后能打开自己的文件</span></span><br><span class="line"><span class="comment"># 虽然缺乏安全性，但是是最快解决403的方法，有时间再找找其他替代方案</span></span><br><span class="line">jupyter notebook \</span><br><span class="line">  --NotebookApp.allow_origin=<span class="string">&#x27;https://colab.research.google.com&#x27;</span> \</span><br><span class="line">  --port=8888 \</span><br><span class="line">  --NotebookApp.port_retries=0</span><br><span class="line">  --NotebookApp.disable_check_xsrf=True</span><br></pre></td></tr></table></figure><h2 id="连接到本地"><a href="#连接到本地" class="headerlink" title="连接到本地"></a>连接到本地</h2><p>直接点colab连接选择连接到本地然后就按照他的提示来就行了</p><p><strong>注意挂载的目录是运行jupyter 里那个config.py里默认的目录</strong></p><h2 id="一点点优化"><a href="#一点点优化" class="headerlink" title="一点点优化"></a>一点点优化</h2><p>先进入配置的jupyter_notebook_config.py文件 <strong>后面简称config文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成配置文件（有就不用生成了）</span></span><br><span class="line"></span><br><span class="line">jupyter notebook --generate-config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入上面显示的路径</span></span><br><span class="line"><span class="comment"># 进入config.py </span></span><br></pre></td></tr></table></figure><h3 id="更换默认目录"><a href="#更换默认目录" class="headerlink" title="更换默认目录"></a>更换默认目录</h3><p>搜索 notebook_dir更改为自己的工作路径</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.Notebook_dir=<span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p><del>每次输入这么多参数多麻烦</del></p><p>搜索notebook.app，根据按照依赖里面的参数进行修改默认值，<del>自己想改什么随便改不用按照我的来</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我修改了下面几个的值（也没改动多少</span></span><br><span class="line"></span><br><span class="line">c.NotebookApp.allow_origin = <span class="string">&#x27;https://colab.research.google.com&#x27;</span></span><br><span class="line"></span><br><span class="line">c.NotebookApp.port_retries=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">c.NotebookApp.disable_check_xsrf = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认就是8888，也可以不改</span></span><br><span class="line">c.NotebookApp.port = <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="更改token"><a href="#更改token" class="headerlink" title="更改token"></a>更改token</h3><p>因为每次连接到本地运行都要输入token，可以将token设置为固定值<del>也相当于password了</del></p><p>不过这样运行的时候命令行里面不会显示token具体值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只会像这样显示</span></span><br><span class="line">http://localhost:8888/?token=...</span><br></pre></td></tr></table></figure><p>还是再之前那个config.py里面设置</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.token = <span class="string">&#x27;你的token&#x27;</span></span><br></pre></td></tr></table></figure><div class="tip warning">后面还是会在命令行里面输出log日志，会显示token所以不是私人电脑千万别固定token</div><h3 id="取消自动重定向"><a href="#取消自动重定向" class="headerlink" title="取消自动重定向"></a>取消自动重定向</h3><p>每次打开一个new tab很烦人<del>我又不用jupyter写代码</del></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config里面修改</span></span><br><span class="line"><span class="comment"># 关闭自动打开browser</span></span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不想关闭也可以选择打开的方式</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#   - 2 opens a new tab,</span></span><br><span class="line"><span class="comment">#   - 1 opens a new window,</span></span><br><span class="line"><span class="comment">#   - 0 opens in an existing window.</span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line">c.NotebookApp.webbrowser_open_new = 2</span><br></pre></td></tr></table></figure><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><p>每次命令行不能关闭好麻烦啊 <del>不会杀进程的小白慎用</del></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在上述命令的最后加一个 &amp; ，则该命令产生的进程在后台运行，不会影响当前终端的使用（我们在只有一个bash的环境下）。</span></span><br><span class="line"><span class="comment"># ctrl c之后还在运行，但是关掉窗口就会停止</span></span><br><span class="line">jupyter notebook &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在命令的开头加一个nohup，忽略所有的挂断信号，如果当前bash关闭，则当前进程会挂载到init进程下，成为其子进程，这样即使退出当前bash，其8000端口也可以使用。</span></span><br><span class="line">nohup jupyter notebook &amp;</span><br></pre></td></tr></table></figure><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><p><del>个人没兴趣，应该配置开机启动项之类的就行了</del></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YoloV3 介绍</title>
      <link href="/p/3028.html"/>
      <url>/p/3028.html</url>
      
        <content type="html"><![CDATA[<h1 id="yolo算法背景介绍"><a href="#yolo算法背景介绍" class="headerlink" title="yolo算法背景介绍"></a>yolo算法背景介绍</h1><p>Yolo算法是一些一阶段的目标检测算法，这一类的算法的特点是只用一个卷积神经网路(CNN)来直接预测不同目标的类别和位置。工业界中最常用的yolo版本为yolov3，其检测与识别速度与准确率已经在实践中证明可行。</p><h1 id="Yolov3网络结构介绍"><a href="#Yolov3网络结构介绍" class="headerlink" title="Yolov3网络结构介绍"></a>Yolov3网络结构介绍</h1><p>​    首先yolov3会将输入图片通过一系列带残差结构的卷积神经网络（backbone）进行特征提取，在论文中这个网络使用的是DarkNet-53，其结构示意如下：</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210524225210.jpg" alt="img"> </p><p>​    上图中的Convolutional为二维卷积和BN层以及LeakyReLU激活函数的堆叠。Residual为残差结构网络，如图所示，将输入经过1x1和3x3的卷积处理之后与原输入相加为新的输出。</p><p>​    此处是预训练时的网络结构，在图片分类的数据集中进行预训练，可以加载其预训练权重来迁移学习，缩短训练的时间。</p><p>​    得到DarkNet提取之后的特征，进一步对该特征进行卷积和上采样操作，提高了特征的细粒度，有利于我们的网络预测小目标，并且与来自darknet的中间层输出进行拼接（concatenate）以便于进行进一步的卷积，得到三种不同尺度大小的输出，分别用于大目标，中等大小目标，小目标的预测。下图为网络结构图：</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210524225051.png" alt="img"> </p><p>上图为根据原论文以及官方源码所画出的示意图，我们可以根据以上示意图搭建出yolov3算法的主体网络。</p><h2 id="yoloV3的预测"><a href="#yoloV3的预测" class="headerlink" title="yoloV3的预测"></a>yoloV3的预测</h2><p>​    根据上图,可以发现输入一张416x416大小的图片，可以得到三种不同尺度的预测特征图:</p><ul><li><p>Predict one的size为(Batch_size,3*(1+4+classes),13,13),</p></li><li><p>Predict two的size为(Batch_size,3*(1+4+classes),26,26),</p></li><li><p>Predict three的size为(Batch_size,3*(1+4+classes),52,52).</p></li></ul><p>​    这些张量的channel上的维度（即size元组上第二位的值）的含义为，在每一个特征图上的点都进行3个bounding box的预测，bounding box即目标的预测框的候选框。三个bound ing box的大小如下图设置：</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210524225227.jpg" alt="img"> </p><p>​    对于每个bounding box，我们需要预测以下的指标：其一是置信度（confidence），这一指标的含义时bounding box中是否包含着目标，即候选框与实际框的IOU值。其二是候选框的中心坐标偏移量与在特征图上的宽高缩放比(tx,ty,tw,th)。其三为每个classes的置信度。故channel上的数值为3(bounding box数量)*(1(目标置信度)+4(确定框的坐标)+classes(classes个置信度))。</p><p>对于目标分类任务重点在于候选框参数的调整，yolov3采取和yolov2一致的候选框调整策略。下图展示了目标边界框的预测过程。图中虚线矩形框为预设边界框，实线矩形框为通过网络预测的偏移量计算得到的预测边界框。其中(cx,cy)为预设边界框在特征图上的中心坐标，(pw,ph)为预设边界框在特征图上的宽和高，(tx,ty,tw,th)分别为网络预测的边界框中心偏移量(tx,ty)以及宽高缩放比(tw,th)，(bx,by,bw,bh)为最终预测的目标边界框，从预设边界框到最终预测边界框的转换过程如图右侧公式所示，其中函数是sigmoid函数其目的是将预测偏移量缩放到0到1之间（这样能够将预设边界框的中心坐标固定在一个1x1大小的cell当中，这样能够加快网络收敛）。</p><h1 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h1><p>YOLOv3 损失函数包括三部分：边界框回归损失，目标置信度损失，目标分类损失</p><script type="math/tex; mode=display">L(O,o,C,c,l,g)=\lambda_1L_{conf}(o,c)+\lambda_2L_{cla}(O,C)+\lambda_3L_{loc}(l,g)</script><h2 id="目标置信度损失"><a href="#目标置信度损失" class="headerlink" title="目标置信度损失"></a>目标置信度损失</h2><p>​    目标置信度可理解为预测目标是前景还是背景的概率（是否为待识别目标），显然可以看作是一个二分类，采用交叉熵回归损失：</p><p>$L_{conf}(o,c)=-\sum(o_i<em>ln(\hat c))+(1-o_i)</em>(ln(1-\hat c_i)) $</p><p>其中 $\hat c=sigmod(c)$,$o_i \in {0,1}$代表是否为目标，$c_i$代表预测目标框中存在目标的sigmod概率。</p><h2 id="目标类别损失"><a href="#目标类别损失" class="headerlink" title="目标类别损失"></a>目标类别损失</h2><p> 判断前景和背景后就应该预测目标类别，所以目标类比损失是一个多分类损失，但是也可以用二分类损失。</p><p>因为可以认为一个物体可以被多个分类概括，比如牧羊犬既属于动物还属于狗，可以使算法更具有鲁棒性。</p><script type="math/tex; mode=display">L_{cla}(O,C)=-\sum_{i\in pos}\sum_{j\in cla}(O_{ij}*ln(\hat C_{ij} ))+(1-O_{ij})*ln(1-\hat C_{ij})</script><p>i属于第i个预测目标，cla代表预测目标的分类，<script type="math/tex">O_{ij}</script>代表是否存在第i个预测目标中第j类是否存在，$C_{ij}$代表第i个目标属于j的概率</p><h2 id="目标定位损失"><a href="#目标定位损失" class="headerlink" title="目标定位损失"></a>目标定位损失</h2><p>​    在一个目标检测算法中，既要衡量预测类比的准确率还要衡量边界框与预测类别是否对应。现在预测类别分类的损失函数已经知道了只需要计算边界框回归损失即可：</p><script type="math/tex; mode=display">L_{loc}(l,g)=\sum_{i\in pos}\sum_{j \in \{x,y,w,h\}} (\hat l-\hat g)^2</script><p>这里使用的是SE损失函数，其中i代表第i个预测边界框，j属于第i个边界框的参数，l是预测的第i个边界框的参数，g是已知真实的预测边界框参数。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 文件传输</title>
      <link href="/p/14426.html"/>
      <url>/p/14426.html</url>
      
        <content type="html"><![CDATA[<h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><p>​    昨日去实验室，发现电脑又换了<del>每次去都要配次环境，佛了</del>，在解压数据集的时候发现数据集损坏…</p><p>四处找工具传输，不得不吐槽Linuxqq页面和06年qq一样，qq是指望不上了。<del>最后还是靠的U盘</del></p><p>​    现在发现一个好用的传输工具python包？，无需下载安装，可以跑满带宽，支持多下载方式，只需要提供数据源有python环境并且处在<strong>一个局域网下</strong>即可，它就是—— <strong>http.server</strong>！！</p><p><del>这不比网上的fps，scp便捷？？？感觉是解决了U盘不够大的问题</del></p><p>​    7废话不多说直接上操作</p><h1 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h1><h2 id="http-server-的基本操作"><a href="#http-server-的基本操作" class="headerlink" title="http.server 的基本操作"></a><a href="https://www.cnblogs.com/lmg-jie/p/9564608.html">http.server 的基本操作</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单使用:</span></span><br><span class="line"><span class="comment"># 关闭终端或ctrl C就会停止服务</span></span><br><span class="line">python http.server 端口号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台挂载</span></span><br><span class="line"><span class="comment"># 在上述命令的最后加一个 &amp; ，则该命令产生的进程在后台运行，不会影响当前终端的使用（我们在只有一个bash的环境下）。</span></span><br><span class="line">python -m http.server 8000 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在命令的开头加一个nohup，忽略所有的挂断信号，如果当前bash关闭，则当前进程会挂载到init进程下，成为其子进程，这样即使退出当前bash，其8000端口也可以使用。</span></span><br><span class="line"><span class="comment"># windows 下无法这样，无论是start还是nohup都不行</span></span><br><span class="line">nohup python -m http.server 8000 &amp;</span><br></pre></td></tr></table></figure><div tips="warning">python2 要将http.server 修改为 SimpleHTTPServer</div><h2 id="Windows"><a href="#Windows" class="headerlink" title="　Windows"></a>　Windows</h2><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>打开cmd，cd到需要的共享文件夹的<strong>上一级目录</strong>，python -m http.server 9393</p><h3 id="高级进阶"><a href="#高级进阶" class="headerlink" title="高级进阶"></a>高级进阶</h3><p>查看端口是否开放</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看端口是否占用，无返回则未被占用</span></span><br><span class="line">netstat -ano |findstr <span class="string">&quot;端口号&quot;</span></span><br><span class="line"><span class="comment"># 若占用找到PID，查看谁占用</span></span><br><span class="line">tasklist |findstr <span class="string">&quot;PID&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若无关紧要，终止进程</span></span><br><span class="line">taskkill /f /t /pid <span class="string">&quot;PID&quot;</span> -t -f</span><br><span class="line"><span class="comment"># 也可以用name终止,比如python.exe</span></span><br><span class="line">taskkill /f /t /im python.exe</span><br></pre></td></tr></table></figure><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210527123936.png" alt="image-20210527123936242">    </p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看ip</span></span><br><span class="line">ifconfig -a</span><br><span class="line"><span class="comment"># 查看端口</span></span><br><span class="line">netstat -nlt</span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">ps -ef</span><br><span class="line"><span class="comment"># 杀死进程(-9强制杀死)</span></span><br><span class="line"><span class="built_in">kill</span> -9 PID</span><br><span class="line"><span class="comment"># 通过名字精确杀死</span></span><br><span class="line">killall firefox</span><br><span class="line"><span class="comment"># 模糊查找，杀死所有包含firefox的进程</span></span><br><span class="line">pkill firefox</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>浏览器中输入：你的ip:9393就可以访问了，类似下面的样子，但是这样只能可以直接下载压缩文件</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210527122842.png" alt="image-20210527122842821"></p><p>缺点就是只能同一个局域网访问，但是也可以做端口映射达到公网访问的效果（不建议办公网络使用</p><p><del>反正家庭网络也没什么值得攻击的，只要不设置80，3389，443这种端口映射就行</del></p><h2 id="使用wget下载文件"><a href="#使用wget下载文件" class="headerlink" title="使用wget下载文件"></a>使用wget下载文件</h2><p>为什么用wget呢？<del><a href="https://www.cnblogs.com/sx66/p/11887022.html">因为wget什么都能下</a></del> 就省去打包压缩这一步了</p><p>今天我才发现window也可以使用wget <a href="https://sourceforge.net/projects/gnuwin32/">download is here!</a></p><p>因为可能会文件名字乱码出现invaid argument奇怪bug，所以建议文件夹不要用中文命名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -c -r -np -nH -nc -k --restrict-file-names=nocontrol <span class="string">&quot;url&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数可以wget -h查看</span></span><br><span class="line"><span class="comment"># 常用参数如下</span></span><br><span class="line"><span class="comment"># 注意 -O 只能在下载单个文件的时候才能起到重命名的作用</span></span><br><span class="line"><span class="comment"># -O newname 将文档写入newname</span></span><br><span class="line"><span class="comment"># -c 断点续传</span></span><br><span class="line"><span class="comment"># -r 递归下载</span></span><br><span class="line"><span class="comment"># -t 设置重试次数</span></span><br><span class="line"><span class="comment"># -np noparent</span></span><br><span class="line"><span class="comment"># -nH 不要创建主目录。</span></span><br><span class="line"><span class="comment"># -nc 不下载已经下载的文件</span></span><br><span class="line"><span class="comment"># -k 修复相对链接为绝对链接</span></span><br><span class="line"><span class="comment"># --restrict-file-names=nocontrol 网上都说能解决中文乱码问题（我没有解决/(ㄒoㄒ)/~~</span></span><br></pre></td></tr></table></figure><p><del>发现还是打包压缩再下载方便，弄什么文件夹递归下载，不好使</del></p>]]></content>
      
      
      <categories>
          
          <category> 杂集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信号之谜</title>
      <link href="/p/22895.html"/>
      <url>/p/22895.html</url>
      
        <content type="html"><![CDATA[<h1 id="‘信号’之谜"><a href="#‘信号’之谜" class="headerlink" title="‘信号’之谜"></a>‘信号’之谜</h1><p>​    虽然已经学习了近半个学期的信号与系统，但是我一直有个疑问，什么是信号？？？为什么光，电甚至一张图片也算是信号？</p><p>​    尤其是某一节课老师讲了图片可以被分离出高频低频信号，我的疑惑更深了。这次，借着老师的机会，想向大家分享一下我是如何理解图片也算信号及为何还可以被分为高频和低频信号的，希望自己解惑的同时也对大家有所帮助。</p><p>​    通常，我们课本里的信号大多都是和时间相关的函数，这给我们一种错觉就是信号都是和时间有关的单变量函数，但是图片没有时间变量啊，为什么也有高频和低频种信号呢？其实可以这么理解：变化快慢（频率）也不一定非要是相对时间而言的，任何一个变量都可以看作‘时间’，这样只要是一个函数都可以认为是一个信号，成功打破了我们的思维定势，拓展了信号的定义—只要是函数都可以认为是一种信号。</p><p>​    其实图片的本质是一个二维矩阵，可以表示为Z=F(x,y)的离散函数，Z可以认为是x，y位置处的灰度值（0-255）。z越大，即灰度值越大（靠近255），颜色越亮，灰度值越低（靠近0），颜色越暗。学过信号的人都知道，一维信号傅里叶级数展开可以看作无穷个的正弦波叠加，一维的高频信号可以简单的认为就是正弦波中带有’毛刺’，从而类比二维信号，是不是也可以这样认为，二维图像只不过是平面上的正弦波不同方向上叠加之后产生的（二维傅里叶变换）。</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210510234534.png" alt="img"> </p><p>​    而图像的边缘轮廓就是正弦波的’毛刺’（导数较大），就是图片的高频信号，而图片z值变化不大的地方（导数较小）就是低频信号。                     </p><p>​        <img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed02@image_bed_001/img/20210510234527.png" alt="img"></p><p>​                图源<a href="https://pic1.zhimg.com/ec4ac525ace8155b327e47c8af262cbf_r.jpg?source=1940ef5c">知乎</a>：</p><p>经过上述简单的类比推广，是不是窥伺到‘信号’的真颜了呢?</p><p><del>这个人水博客真是什么手段都用上了</del></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美多商城</title>
      <link href="/p/6015.html"/>
      <url>/p/6015.html</url>
      
        <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>这几天一直琢磨着如何才能培养自己好的代码习惯和读源码能力 <del>或者说是我大学以来一直担心的</del></p><p>但是感觉这件事如果不自己写一个’工程项目’是永远都不会懂的。</p><p>遂找了个以前毕业必会的项目练练手<a href="https://www.bilibili.com/video/BV1c54y1Q7Xh?p=739&amp;spm_id_from=pageDriver">项目视频教程</a>。</p><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>先在windows下创建虚拟环境</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 没装包pip install 一下</span></span><br><span class="line">mkvirtualenv django_project</span><br><span class="line">workon django_project</span><br></pre></td></tr></table></figure><p>主要是<strong>django+redis+mysql+jinja2</strong>的框架进行前后端不分离开发，环境如下</p><blockquote><p>Django            3.2<br>django-redis      4.12.1<br>Jinja2            2.11.3<br>pip               20.1.1<br>PyMySQL           1.0.2<br>redis             3.5.3</p></blockquote><h3 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h3><p>这个很简单，github建库，clone一下就完事了</p><p>目前为止的tree结构</p><blockquote><p>├─.idea<br>└─meiduomall</p><p>├─readme<br>└─.gitignore</p></blockquote><p>因为是django项目在meiduomall里面执行 就有了基本框架</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果没有必要包先安装必要包</span></span><br><span class="line"><span class="comment"># pip install django</span></span><br><span class="line"><span class="comment"># pip install redis</span></span><br><span class="line"><span class="comment"># pip install pymysql</span></span><br><span class="line"><span class="comment"># pip install jinja2</span></span><br><span class="line"><span class="comment"># 安装请忽略</span></span><br><span class="line">django-admin startproject meiduomall</span><br></pre></td></tr></table></figure><h3 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h3><p>这里涉及许多就不一一细说了，都是在setting文件里修改。</p><p>不过首先为了测试等方便，将原本的setting.py删除创建新的setting包，再在里面创建dev.py作为测试setting</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 注意这里根据自己的文件夹名字不同设置不同</span></span><br><span class="line">    os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;meiduomall.settings.dev&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> django.core.management <span class="keyword">import</span> execute_from_command_line</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="comment"># The above import may fail for some other reason. Ensure that the</span></span><br><span class="line">        <span class="comment"># issue is really that Django is missing to avoid masking other</span></span><br><span class="line">        <span class="comment"># exceptions on Python 2.</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">import</span> django</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">raise</span> ImportError(</span><br><span class="line">                <span class="string">&quot;Couldn&#x27;t import Django. Are you sure it&#x27;s installed and &quot;</span></span><br><span class="line">                <span class="string">&quot;available on your PYTHONPATH environment variable? Did you &quot;</span></span><br><span class="line">                <span class="string">&quot;forget to activate a virtual environment?&quot;</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    execute_from_command_line(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意使用jinja2的框架要设置环境（在template那），新建utils包，在里面创建jinja2_env.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2021/4/20 18:16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.storage <span class="keyword">import</span> staticfiles_storage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jinja2_env</span>(<span class="params">**options</span>):</span></span><br><span class="line">    env=Environment(**options)</span><br><span class="line">    env.<span class="built_in">globals</span>.update(&#123;</span><br><span class="line">        <span class="string">&#x27;static&#x27;</span>:staticfiles_storage.url, <span class="comment"># 获取静态文件前缀</span></span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>:reverse, <span class="comment"># 反向解析路由</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> env</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后就是在setting中修改了，我主要改了 <strong>databases</strong>，<strong>templates</strong>，增加了<strong>redis</strong>，<strong>logging</strong>，<strong>static_url</strong></p><p><del>别忘记建个mysql数据库</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Django settings for meiduomall project.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Generated by &#x27;django-admin startproject&#x27; using Django 1.11.11.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For more information on this file, see</span></span><br><span class="line"><span class="string">https://docs.djangoproject.com/en/1.11/topics/settings/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For the full list of settings and their values, see</span></span><br><span class="line"><span class="string">https://docs.djangoproject.com/en/1.11/ref/settings/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Quick-start development settings - unsuitable for production</span></span><br><span class="line"><span class="comment"># See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: keep the secret key used in production secret!</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;r3jt$+_uq90)99sr-p#@u%=$y43cwh18%2sdac2(uh!w^oj@qg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ROOT_URLCONF = <span class="string">&#x27;meiduomall.urls&#x27;</span></span><br><span class="line"></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.jinja2.Jinja2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR,<span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&#x27;environment&#x27;</span>:<span class="string">&#x27;meiduomall.utils.jinja2_env.jinja2_env&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR,<span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># TEMPLATES = [</span></span><br><span class="line"><span class="comment">#     &#123;</span></span><br><span class="line"><span class="comment">#         &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,</span></span><br><span class="line"><span class="comment">#         &#x27;DIRS&#x27;: [],</span></span><br><span class="line"><span class="comment">#         &#x27;APP_DIRS&#x27;: True,</span></span><br><span class="line"><span class="comment">#         &#x27;OPTIONS&#x27;: &#123;</span></span><br><span class="line"><span class="comment">#             &#x27;context_processors&#x27;: [</span></span><br><span class="line"><span class="comment">#                 &#x27;django.template.context_processors.debug&#x27;,</span></span><br><span class="line"><span class="comment">#                 &#x27;django.template.context_processors.request&#x27;,</span></span><br><span class="line"><span class="comment">#                 &#x27;django.contrib.auth.context_processors.auth&#x27;,</span></span><br><span class="line"><span class="comment">#                 &#x27;django.contrib.messages.context_processors.messages&#x27;,</span></span><br><span class="line"><span class="comment">#             ],</span></span><br><span class="line"><span class="comment">#         &#125;,</span></span><br><span class="line"><span class="comment">#     &#125;,</span></span><br><span class="line"><span class="comment"># ]</span></span><br><span class="line"></span><br><span class="line">WSGI_APPLICATION = <span class="string">&#x27;meiduomall.wsgi.application&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;mall_admin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;20010720&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>:<span class="string">&#x27;mall&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置redis</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;session&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SESSION_ENGINE = <span class="string">&quot;django.contrib.sessions.backends.cache&quot;</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">&quot;session&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Password validation</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators</span></span><br><span class="line"></span><br><span class="line">AUTH_PASSWORD_VALIDATORS = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.MinimumLengthValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.CommonPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.NumericPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Internationalization</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/topics/i18n/</span></span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;en-us&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;UTC&#x27;</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/howto/static-files/</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># loggers 配置</span></span><br><span class="line"></span><br><span class="line">LOGGING=&#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;verbose&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>:<span class="string">&#x27;%(levelname)s %(module)s %(lineno)d %(message)s&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;require_debug_true&#x27;</span>:&#123;<span class="comment"># django 在debug模式下输出日志</span></span><br><span class="line">            <span class="string">&#x27;()&#x27;</span>: <span class="string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>:&#123; <span class="comment"># 日志处理方法</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filters&#x27;</span>:[<span class="string">&#x27;require_debug_true&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>:<span class="string">&#x27;simple&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;file&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>:os.path.join(BASE_DIR,<span class="string">&#x27;logs/mall.log&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">300</span>*<span class="number">1024</span>*<span class="number">1024</span>,</span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>:<span class="string">&#x27;verbose&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;django&#x27;</span>:&#123; <span class="comment"># 定义日志器名字</span></span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>:[<span class="string">&#x27;console&#x27;</span>,<span class="string">&#x27;file&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>:<span class="literal">True</span>, <span class="comment"># 是否继续传递日志信息</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加上templates，static，logs文件夹的tree如下（当然可以把logs文件夹放在和meiduomall同级目录）</p><blockquote><p>├─.idea<br>└─meiduomall<br>    └─meiduomall<br>        ├─logs<br>        ├─settings<br>        ├─static<br>        ├─templates<br>        ├─utils</p></blockquote><h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><p>okk，以上我们已经完成了项目配置，现在可以开始构建app了</p><h3 id="apps"><a href="#apps" class="headerlink" title="apps"></a>apps</h3><p>为了方便管理，我们先在meiduomall目录下创建一个python package apps，然后再在里面创建项目子应用。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python ../../manage.py startapp users</span><br></pre></td></tr></table></figure><p>然后在setting中注册子应用<del>每次创建都有注册，后续就不再赘述了</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户子应用注册，如果不知道路径可以通过sys.path查看</span></span><br><span class="line"><span class="comment"># 当然也可以sys.path.insert()插入新的导包路径</span></span><br><span class="line"><span class="comment"># 这样就可以使用&#x27;users&#x27;,</span></span><br><span class="line"><span class="comment"># 不加插入，直接用meiduomall.apps.users会说找不到&#x27;users&#x27;就很奇怪</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>,os.path.join(BASE_DIR,<span class="string">&#x27;apps&#x27;</span>))</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h3><p>因为我主要还是从事后端所以所有html都默认已经写好了，直接用（现在templates里面已经有register.html)</p><h4 id="在view-py中创建register视图类"><a href="#在view-py中创建register视图类" class="headerlink" title="在view.py中创建register视图类"></a>在view.py中创建register视图类</h4><p>视图类可以理解为在当前页面发送请求所触发的相应的响应。后面在详细修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register_View</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        用户注册</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;register.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="设置路由"><a href="#设置路由" class="headerlink" title="设置路由"></a>设置路由</h4><p>这里要闲话一下</p><p>urlpattern的匹配顺序</p><ul><li><p>在根路由中顺序匹配，匹配成功则进入子应用路由匹配（可以多个匹配成功</p></li><li><p>子路由中匹配<strong>剩余</strong>的string</p></li><li><blockquote><p>如果根路由正则为r’^register/‘</p><p>子路由中正则为r’^register/$’</p><p>输入路径为 xxxx:xxx/register/ ，会nofound</p><p>提示也有先匹配register/ 匹配成功，然后剩余字符串为’’,匹配子路由失败</p><p>这样是xxx:xx/register/register/才会匹配成功</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;meiduomall URL Configuration</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The `urlpatterns` list routes URLs to views. For more information please see:</span></span><br><span class="line"><span class="string">    https://docs.djangoproject.com/en/1.11/topics/http/urls/</span></span><br><span class="line"><span class="string">Examples:</span></span><br><span class="line"><span class="string">Function views</span></span><br><span class="line"><span class="string">    1. Add an import:  from my_app import views</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  url(r&#x27;^$&#x27;, views.home, name=&#x27;home&#x27;)</span></span><br><span class="line"><span class="string">Class-based views</span></span><br><span class="line"><span class="string">    1. Add an import:  from other_app.views import Home</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  url(r&#x27;^$&#x27;, Home.as_view(), name=&#x27;home&#x27;)</span></span><br><span class="line"><span class="string">Including another URLconf</span></span><br><span class="line"><span class="string">    1. Import the include() function: from django.conf.urls import url, include</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  url(r&#x27;^blog/&#x27;, include(&#x27;blog.urls&#x27;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url,include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根路由中不能有严格的结束$，这样子路由就没有意义了</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^&#x27;</span>,include(<span class="string">&#x27;users.urls&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在users下创建urls.py文件</span></span><br><span class="line"><span class="comment"># 里面内容如下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url,include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^$&#x27;</span>,views.Register_View.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在打开即可看到注册页面</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210421130438.png" alt="image-20210421130438609"></p><h3 id="实现数据存储数据库"><a href="#实现数据存储数据库" class="headerlink" title="实现数据存储数据库"></a>实现数据存储数据库</h3><p>创建user模型类完成注册登录并存储账号等信息到数据库，因为django已经有内置的用户类所以直接继承即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">AbstractUser</span>):</span></span><br><span class="line"></span><br><span class="line">    mobile=models.CharField(max_length=<span class="number">11</span>,unique=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;phone number&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 表名规范 db_name</span></span><br><span class="line">        db_table=<span class="string">&#x27;db_user&#x27;</span></span><br><span class="line">        verbose_name=<span class="string">&#x27;user_name&#x27;</span></span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><del>一般get是向服务器发送请求，post是向数据库发送请求</del></p><h3 id="验证信息"><a href="#验证信息" class="headerlink" title="验证信息"></a>验证信息</h3><p>信息填写后还需要验证这一步骤，包括前端验证和后端验证，步骤是先前端初步判断信息十分符合，再使用axios发送get|post请求，然后后端向数据库得到数据检验信息是否符合规范。</p><p>可以建立一个verification子应用然后再里面修改。（添加子应用和前面步骤都一样</p><p>具体检验信息包括：</p><ul><li>用户名检验（前端检验是否合法，后端检验是否重复</li><li>密码检验（前端后端检验两次密码是否相同</li><li>手机号检验（前端检验是否合法，后端检验是否重复</li><li>验证码检验（后端检验是否与用户输入相同</li><li>短信检验（后端检验是否符合</li><li>同意条款检验（前后端检验是否勾选</li></ul><p><del>有条件最后都前后端都检验一下，以防恶意分子。</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># View 代码</span></span><br><span class="line"><span class="comment"># 检验用户名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Username_View</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,username</span>):</span></span><br><span class="line"></span><br><span class="line">        count=User.objects.<span class="built_in">filter</span>(username=username).count()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.JsonResponse(&#123;<span class="string">&#x27;count&#x27;</span>:count,<span class="string">&#x27;errormsg&#x27;</span>:<span class="string">&#x27;ok&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="comment"># 检验手机号</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mobile_View</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,mobile</span>):</span></span><br><span class="line"></span><br><span class="line">        count=User.objects.<span class="built_in">filter</span>(mobile=mobile).count()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.JsonResponse(&#123;<span class="string">&#x27;count&#x27;</span>:count,<span class="string">&#x27;errormsg&#x27;</span>:<span class="string">&#x27;ok&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检验手机号为例</span></span><br><span class="line"><span class="attr">check_phone</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^1[345789]\d&#123;9&#125;$/</span>;</span><br><span class="line"><span class="keyword">if</span>(re.test(<span class="built_in">this</span>.mobile)) &#123;</span><br><span class="line"><span class="built_in">this</span>.error_phone = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;???&quot;</span>)</span><br><span class="line">                <span class="built_in">this</span>.error_phone_message = <span class="string">&#x27;您输入的手机号格式不正确&#x27;</span>;</span><br><span class="line"><span class="built_in">this</span>.error_phone = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.error_phone == <span class="literal">false</span>) &#123;</span><br><span class="line">axios.get(<span class="string">&#x27;http://127.0.0.1:8000/mobiles/&#x27;</span>+ <span class="built_in">this</span>.mobile + <span class="string">&#x27;/count/&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (response.data.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.error_phone_message = <span class="string">&#x27;手机号已存在,请尝试登录&#x27;</span>;</span><br><span class="line"><span class="built_in">this</span>.error_phone = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.error_phone = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(error.response.data.code);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>注意验证码是存放在redis中的，项目开始不要忘记开启redis和mysql</strong></p><p>也可以再增加一个verify_code redis库，如果你的redis有密码还要配置密码</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">CACHES = &#123;</span></span><br><span class="line"><span class="xml">    &quot;default&quot;: &#123;</span></span><br><span class="line"><span class="xml">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span></span><br><span class="line"><span class="xml">        &quot;LOCATION&quot;: &quot;redis://:20010720@127.0.0.1:6379/1&quot;,</span></span><br><span class="line"><span class="xml">        &quot;OPTIONS&quot;: &#123;</span></span><br><span class="line"><span class="xml">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span></span><br><span class="line"><span class="xml">            &quot;PASSWORD&quot;:&quot;XXXX&quot;,</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    &quot;session&quot;: &#123;</span></span><br><span class="line"><span class="xml">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span></span><br><span class="line"><span class="xml">        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/2&quot;,</span></span><br><span class="line"><span class="xml">        &quot;OPTIONS&quot;: &#123;</span></span><br><span class="line"><span class="xml">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span></span><br><span class="line"><span class="xml">            &quot;PASSWORD&quot;:&#x27;XXXX&#x27;,</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    &quot;verify_code&quot;: &#123;</span></span><br><span class="line"><span class="xml">        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,</span></span><br><span class="line"><span class="xml">        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/3&quot;,</span></span><br><span class="line"><span class="xml">        &quot;OPTIONS&quot;: &#123;</span></span><br><span class="line"><span class="xml">            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,</span></span><br><span class="line"><span class="xml">            &quot;PASSWORD&quot;:&#x27;XXXX&#x27;,</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>下面讲一讲验证码检验部分思路，其实很简单 <del>短信验证用不起</del></p><ul><li>定义view</li><li>定义url路由</li><li>前端访问对应路由</li><li>view接受get|post请求</li><li>view类里查询redis，check用户与后端数据库存储是否相同</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>你看到后记可能会问，唉？这就后记了？就这？<del>没错</del></p><p>因为写到这里用户注册部分就已经差不多了，之后只是对注册页面的各种优化（虽然不知为什么我的axios的ajax请求会刷新页面）但算是把一个板块写完了吧，所以先告一段落。</p><p>由于5.1校赛选择了烟盒的目标识别，发现自己好多网络结构都不懂，trick也是现场yy，开始说好的k折也没实现<del>菜鸡全靠大佬带飞</del>。</p><p>当务之急是恶补ML基础所以接下来可能按这方面走了：</p><blockquote><div class="checkbox red checked"> <input type='checkbox' checked="checked"> <p>Mobilenet学习和代码复现</p></div><div class="checkbox red"> <input type='checkbox' > <p>Effient Net学习和代码复现</p></div><div class="checkbox red"> <input type='checkbox'> <p>尝试VP <a href="https://www.kaggle.com/c/vinbigdata-chest-xray-abnormalities-detection/">VinBigData Chest X-ray Abnormalities Detection</a></p></div></blockquote><div class='tip accept'>To be contiune…</div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝与浅拷贝</title>
      <link href="/p/12139.html"/>
      <url>/p/12139.html</url>
      
        <content type="html"><![CDATA[<h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><div class='tip warning'>python的赋值与c++不同</div><h2 id="问题缘由"><a href="#问题缘由" class="headerlink" title="问题缘由"></a>问题缘由</h2><p>​    之前被坑过一次，结果忘了总结。这次写元胞自动机的时候发现了这个bug，让我迷惑很久才想起来这个问题，遂记录。</p><p>具体如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=a</span><br><span class="line">a.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>,a,<span class="string">&#x27;b=&#x27;</span>,b)</span><br><span class="line"><span class="comment"># a = [1, 2, 3, 1] b= [1, 2, 3, 1]</span></span><br><span class="line">b.append(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>,a,<span class="string">&#x27;b=&#x27;</span>,b)</span><br><span class="line"><span class="comment"># a = [1, 2, 3, 1, 11] b= [1, 2, 3, 1, 11]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a),<span class="built_in">id</span>(b))</span><br><span class="line"><span class="comment"># 3002845450824 3002845450824</span></span><br></pre></td></tr></table></figure><p>c++使用变量前会需要先声明变量，故每一个变量都会先有一个地址，而python不需要先命名故会发生这种奇怪的情况，于是就引出了python中的变量空间问题。</p><p><del>python中的拷贝可以理解为创建一个新的命名空间，而不是’真正的拷贝’</del></p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><blockquote><p>只会被可变类型第一项进行拷贝，不会对子对象进行拷贝。</p></blockquote><p>什么是可变类型？list，dict，set都是可变类型，可以简单理解为可以动态增删改查的数据结构。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">b=a</span><br><span class="line">b.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>,a,<span class="string">&#x27;b=&#x27;</span>,b)</span><br><span class="line"><span class="comment"># a = [1, 2, 3, [1, 2, 3], 1] b= [1, 2, 3, [1, 2, 3], 1]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a),<span class="built_in">id</span>(b))</span><br><span class="line"><span class="comment"># 2555694210504 2555694210504</span></span><br><span class="line"><span class="comment"># 浅拷贝，只拷贝第一个可变类型</span></span><br><span class="line">b=copy.copy(a)</span><br><span class="line">b.append(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>,a,<span class="string">&#x27;b=&#x27;</span>,b)</span><br><span class="line"><span class="comment"># a = [1, 2, 3, [1, 2, 3], 1] b= [1, 2, 3, [1, 2, 3], 1, 2]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a),<span class="built_in">id</span>(b))</span><br><span class="line"><span class="comment"># 2555694210504 2555694194440</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a[<span class="number">3</span>]),<span class="built_in">id</span>(b[<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>​    可以对全部可变类型进行拷贝，所有子对象进行拷贝（可以理解真正的创建了一个变量）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">b=a</span><br><span class="line">b.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>,a,<span class="string">&#x27;b=&#x27;</span>,b)</span><br><span class="line"><span class="comment"># a = [1, 2, 3, [1, 2, 3], 1] b= [1, 2, 3, [1, 2, 3], 1]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a),<span class="built_in">id</span>(b))</span><br><span class="line"><span class="comment"># 2555694210504 2555694210504</span></span><br><span class="line"><span class="comment"># 浅拷贝，只拷贝第一个可变类型</span></span><br><span class="line">b=copy.deepcopy(a)</span><br><span class="line">b.append(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>,a,<span class="string">&#x27;b=&#x27;</span>,b)</span><br><span class="line"><span class="comment"># a = [1, 2, 3, [1, 2, 3], 1] b= [1, 2, 3, [1, 2, 3], 1, 2]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a),<span class="built_in">id</span>(b))</span><br><span class="line"><span class="comment"># 2555694210504 2555694194440</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a[<span class="number">3</span>]),<span class="built_in">id</span>(b[<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><div class='tip success'>总之，deepcopy准没错</div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>退役流水账</title>
      <link href="/p/11997.html"/>
      <url>/p/11997.html</url>
      
        <content type="html"><![CDATA[<p>没想到这么快到了退役这一天 <del>其实早就开始划水了</del>，遂有感而发，写有此文。<del>谁带的退役就要写博客的节奏啊</del></p><h2 id="入坑起因"><a href="#入坑起因" class="headerlink" title="入坑起因"></a>入坑起因</h2><p>我在高中竞赛成绩并不显赫，本来大学不想打acm<del>无奈加分太香了</del>    加上第一次的队友也想和我一起打下次，就又继续了一年，虽然这两年里毫无进步并且差点第一次爆零（还好最后水了分拿了个铜）但是总体来讲收获颇多。（还是加分太香了</p><h2 id="退役赛"><a href="#退役赛" class="headerlink" title="退役赛"></a>退役赛</h2><p>2021.4.3 昆明icpc，战况–惨。<del>全程靠队友带飞</del></p><p>开局签到没什么问题，然后就开始神奇的自闭，两个小时后才wa6做出了第二道题。期间疯狂划水也让我丧失了最后打下去的希望。</p><p>之后又自闭了，直到封榜最后15分钟和最后四分钟，我们才debug出来两道，太惊险了<del>交题的时候我甚至开始了祈祷</del>，交的时候心态本来都崩了，甚至没有输样例，没想到A了。最后四道题完结撒花。排名178<del>应该有个铜吧</del> 本来如果不wa6的话可以更高的，wa6心态崩了。</p><p>这次题全是临场发挥…什么都</p><p>好评的是免费午餐和打印机（队友70多面板子现场印的，xswl，整个教室就我们这嗡嗡的响，结果最后还是没用到）</p><h2 id="关于acm本蒟蒻的一些建议"><a href="#关于acm本蒟蒻的一些建议" class="headerlink" title="关于acm本蒟蒻的一些建议"></a>关于acm本蒟蒻的一些建议</h2><p>如果让我说大学是否值得从零开始学acm，我的答案毫无疑问是NO！！，甚至碰都不要碰这门竞赛。因为他实在是太卷了<del>大佬忽略</del>。你可能拼死拼活学了两个月，不眠不休刷了别人两三年前就刷过的题，结果可能是发现自己还是不会做“新题”，（甚至你去问别人，别人还可能秒了）心里落差极大。<del>我最初的一个队友就是被劝退了</del> 拿这时间和精力去学习别的可能收入会比支出大的多。</p><p>再者，学习的算法数据结构对与大学甚至以后的工作几乎没用（如果有奖找工作还挺有用的），就好比小学奥数和数学，你可能到高中都没见过奥数里的题 <del>甚至还不会写</del>。</p><p>（再退一步说，有的学校可能加分的时候icpc区域赛是算省奖，让你费心费力还吃力不讨好…</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上都仅仅是建议和胡说，仅代表本人的想法，你大可不必看这篇文章。每个人有每个人的想法，求同存异就好。说不定也不退役了(●’◡’●)</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】初探docker</title>
      <link href="/p/21866.html"/>
      <url>/p/21866.html</url>
      
        <content type="html"><![CDATA[<div class="tip warning">本文转载于http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</div><p>2013年发布至今， <a href="https://www.docker.com/">Docker</a> 一直广受瞩目，被认为可能会改变软件行业。</p><p>但是，许多人并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。</p><p><img src= "/img/lazyload.svg" data-src="http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png" alt="img"></p><h2 id="一、环境配置的难题"><a href="#一、环境配置的难题" class="headerlink" title="一、环境配置的难题"></a>一、环境配置的难题</h2><p>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p><h2 id="二、虚拟机"><a href="#二、虚拟机" class="headerlink" title="二、虚拟机"></a>二、虚拟机</h2><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p><p><strong>（1）资源占用多</strong></p><p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p><p><strong>（2）冗余步骤多</strong></p><p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p><p><strong>（3）启动慢</strong></p><p>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</p><h2 id="三、Linux-容器"><a href="#三、Linux-容器" class="headerlink" title="三、Linux 容器"></a>三、Linux 容器</h2><p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p><p><strong>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。</strong>或者说，在正常进程的外面套了一个<a href="https://opensource.com/article/18/1/history-low-level-container-runtimes">保护层</a>。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。</p><p><strong>（1）启动快</strong></p><p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p><p><strong>（2）资源占用少</strong></p><p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p><p><strong>（3）体积小</strong></p><p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</p><p>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p><h2 id="四、Docker-是什么？"><a href="#四、Docker-是什么？" class="headerlink" title="四、Docker 是什么？"></a>四、Docker 是什么？</h2><p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong>它是目前最流行的 Linux 容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><h2 id="五、Docker-的用途"><a href="#五、Docker-的用途" class="headerlink" title="五、Docker 的用途"></a>五、Docker 的用途</h2><p>Docker 的主要用途，目前有三大类。</p><p><strong>（1）提供一次性的环境。</strong>比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p><p><strong>（2）提供弹性的云服务。</strong>因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p><p><strong>（3）组建微服务架构。</strong>通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><h2 id="六、Docker-的安装"><a href="#六、Docker-的安装" class="headerlink" title="六、Docker 的安装"></a>六、Docker 的安装</h2><p>Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。</p><p>Docker CE 的安装请参考官方文档。</p><ul><li><a href="https://docs.docker.com/docker-for-mac/install/">Mac</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/">Windows</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">Ubuntu</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/debian/">Debian</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/">CentOS</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/fedora/">Fedora</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/">其他 Linux 发行版</a></li></ul><p>安装完成后，运行下面的命令，验证是否安装成功。</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>docker version</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="variable">$ </span>docker info</span><br></pre></td></tr></table></figure><p>Docker 需要用户具有 sudo 权限，为了避免每次命令都输入<code>sudo</code>，可以把用户加入 Docker 用户组（<a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user">官方文档</a>）。</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>Docker 是服务器——客户端架构。命令行运行<code>docker</code>命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动（<a href="https://docs.docker.com/config/daemon/systemd/">官方文档</a>）。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># service 命令的用法</span></span><br><span class="line"><span class="variable">$</span> sudo service docker <span class="built_in">start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl 命令的用法</span></span><br><span class="line"><span class="variable">$</span> sudo systemctl <span class="built_in">start</span> docker</span><br></pre></td></tr></table></figure><h2 id="六、image-文件"><a href="#六、image-文件" class="headerlink" title="六、image 文件"></a>六、image 文件</h2><p><strong>Docker 把应用程序及其依赖，打包在 image 文件里面。</strong>只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出本机的所有 image 文件。</span></span><br><span class="line"><span class="variable">$</span> docker image <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 image 文件</span></span><br><span class="line"><span class="variable">$</span> docker image <span class="built_in">rm</span> [<span class="type">imageName</span>]</span><br></pre></td></tr></table></figure><p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p><p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 <a href="https://hub.docker.com/">Docker Hub</a> 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。</p><h2 id="七、实例：hello-world"><a href="#七、实例：hello-world" class="headerlink" title="七、实例：hello world"></a>七、实例：hello world</h2><p>下面，我们通过最简单的 image 文件”<a href="https://hub.docker.com/r/library/hello-world/">hello world”</a>，感受一下 Docker。</p><p>需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站，具体的修改方法在<a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html">下一篇文章</a>的第一节。有需要的朋友，可以先看一下。</p><p>首先，运行下面的命令，将 image 文件从仓库抓取到本地。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image pull library/hello-world</span><br></pre></td></tr></table></figure><p>上面代码中，<code>docker image pull</code>是抓取 image 文件的命令。<code>library/hello-world</code>是 image 文件在仓库里面的位置，其中<code>library</code>是 image 文件所在的组，<code>hello-world</code>是 image 文件的名字。</p><p>由于 Docker 官方提供的 image 文件，都放在<a href="https://hub.docker.com/r/library/"><code>library</code></a>组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image pull hello-world</span><br></pre></td></tr></table></figure><p>抓取成功以后，就可以在本机看到这个 image 文件了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image ls</span><br></pre></td></tr></table></figure><p>现在，运行这个 image 文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container run hello-world</span><br></pre></td></tr></table></figure><p><code>docker container run</code>命令会从 image 文件，生成一个正在运行的容器实例。</p><p>注意，<code>docker container run</code>命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的<code>docker image pull</code>命令并不是必需的步骤。</p><p>如果运行成功，你会在屏幕上读到下面的输出。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>输出这段提示以后，<code>hello world</code>就会停止运行，容器自动终止。</p><p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container run -it ubuntu bash</span><br></pre></td></tr></table></figure><p>对于那些不会自动终止的容器，必须使用<a href="https://docs.docker.com/engine/reference/commandline/container_kill/"><code>docker container kill</code></a> 命令手动终止。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container kill [containID]</span><br></pre></td></tr></table></figure><h2 id="八、容器文件"><a href="#八、容器文件" class="headerlink" title="八、容器文件"></a>八、容器文件</h2><p><strong>image 文件生成的容器实例，本身也是一个文件，称为容器文件。</strong>也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出本机正在运行的容器</span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line"># 列出本机所有容器，包括终止运行的容器</span><br><span class="line">$ docker container ls --all</span><br></pre></td></tr></table></figure><p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的<code>docker container kill</code>命令。</p><p>终止运行的容器文件，依然会占据硬盘空间，可以使用<a href="https://docs.docker.com/engine/reference/commandline/container_rm/"><code>docker container rm</code></a>命令删除。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container rm [containerID]</span><br></pre></td></tr></table></figure><p>运行上面的命令之后，再使用<code>docker container ls --all</code>命令，就会发现被删除的容器文件已经消失了。</p><h2 id="九、Dockerfile-文件"><a href="#九、Dockerfile-文件" class="headerlink" title="九、Dockerfile 文件"></a>九、Dockerfile 文件</h2><p>学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。</p><p>这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p><p>下面通过一个实例，演示如何编写 Dockerfile 文件。</p><h2 id="十、实例：制作自己的-Docker-容器"><a href="#十、实例：制作自己的-Docker-容器" class="headerlink" title="十、实例：制作自己的 Docker 容器"></a>十、实例：制作自己的 Docker 容器</h2><p>下面我以 <a href="http://www.ruanyifeng.com/blog/2017/08/koa.html">koa-demos</a> 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。</p><p>作为准备工作，请先<a href="https://github.com/ruanyf/koa-demos/archive/master.zip">下载源码</a>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/ruanyf/koa-demos.git</span><br><span class="line">$ cd koa-demos</span><br></pre></td></tr></table></figure><h3 id="10-1-编写-Dockerfile-文件"><a href="#10-1-编写-Dockerfile-文件" class="headerlink" title="10.1 编写 Dockerfile 文件"></a>10.1 编写 Dockerfile 文件</h3><p>首先，在项目的根目录下，新建一个文本文件<code>.dockerignore</code>，写入下面的<a href="https://github.com/ruanyf/koa-demos/blob/master/.dockerignore">内容</a>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure><p>上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。</p><p>然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的<a href="https://github.com/ruanyf/koa-demos/blob/master/Dockerfile">内容</a>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure><p>上面代码一共五行，含义如下。</p><ul><li><code>FROM node:8.4</code>：该 image 文件继承官方的 node image，冒号表示标签，这里标签是<code>8.4</code>，即8.4版本的 node。</li><li><code>COPY . /app</code>：将当前目录下的所有文件（除了<code>.dockerignore</code>排除的路径），都拷贝进入 image 文件的<code>/app</code>目录。</li><li><code>WORKDIR /app</code>：指定接下来的工作路径为<code>/app</code>。</li><li><code>RUN npm install</code>：在<code>/app</code>目录下，运行<code>npm install</code>命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</li><li><code>EXPOSE 3000</code>：将容器 3000 端口暴露出来， 允许外部连接这个端口。</li></ul><h3 id="10-2-创建-image-文件"><a href="#10-2-创建-image-文件" class="headerlink" title="10.2 创建 image 文件"></a>10.2 创建 image 文件</h3><p>有了 Dockerfile 文件以后，就可以使用<code>docker image build</code>命令创建 image 文件了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image build -t koa-demo .</span><br><span class="line"># 或者</span><br><span class="line">$ docker image build -t koa-demo:0.0.1 .</span><br></pre></td></tr></table></figure><p>上面代码中，<code>-t</code>参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是<code>latest</code>。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。</p><p>如果运行成功，就可以看到新生成的 image 文件<code>koa-demo</code>了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image ls</span><br></pre></td></tr></table></figure><h3 id="10-3-生成容器"><a href="#10-3-生成容器" class="headerlink" title="10.3 生成容器"></a>10.3 生成容器</h3><p><code>docker container run</code>命令会从 image 文件生成容器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container run -p 8000:3000 -it koa-demo /bin/bash</span><br><span class="line"># 或者</span><br><span class="line">$ docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash</span><br></pre></td></tr></table></figure><p>上面命令的各个参数含义如下：</p><ul><li><code>-p</code>参数：容器的 3000 端口映射到本机的 8000 端口。</li><li><code>-it</code>参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</li><li><code>koa-demo:0.0.1</code>：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</li><li><code>/bin/bash</code>：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</li></ul><p>如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@66d80f4aaf1e:/app#</span><br></pre></td></tr></table></figure><p>这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@66d80f4aaf1e:/app# node demos/01.js</span><br></pre></td></tr></table></figure><p>这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 <a href="http://127.0.0.1:8000，网页显示&quot;Not">http://127.0.0.1:8000，网页显示&quot;Not</a> Found”，这是因为这个 <a href="https://github.com/ruanyf/koa-demos/blob/master/demos/01.js">demo</a> 没有写路由。</p><p>这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。</p><p>现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用<code>docker container kill</code>终止容器运行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在本机的另一个终端窗口，查出容器的 ID</span><br><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line"># 停止指定的容器运行</span><br><span class="line">$ docker container kill [containerID]</span><br></pre></td></tr></table></figure><p>容器停止运行之后，并不会消失，用下面的命令删除容器文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查出容器的 ID</span><br><span class="line">$ docker container ls --all</span><br><span class="line"></span><br><span class="line"># 删除指定的容器文件</span><br><span class="line">$ docker container rm [containerID]</span><br></pre></td></tr></table></figure><p>也可以使用<code>docker container run</code>命令的<code>--rm</code>参数，在容器终止运行后自动删除容器文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container run --rm -p 8000:3000 -it koa-demo /bin/bash</span><br></pre></td></tr></table></figure><h3 id="10-4-CMD-命令"><a href="#10-4-CMD-命令" class="headerlink" title="10.4 CMD 命令"></a>10.4 CMD 命令</h3><p>上一节的例子里面，容器启动以后，需要手动输入命令<code>node demos/01.js</code>。我们可以把这个命令写在 Dockerfile 里面，这样容器启动以后，这个命令就已经执行了，不用再手动输入了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br><span class="line">CMD node demos/01.js</span><br></pre></td></tr></table></figure><p>上面的 Dockerfile 里面，多了最后一行<code>CMD node demos/01.js</code>，它表示容器启动后自动执行<code>node demos/01.js</code>。</p><p>你可能会问，<code>RUN</code>命令与<code>CMD</code>命令的区别在哪里？简单说，<code>RUN</code>命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；<code>CMD</code>命令则是在容器启动后执行。另外，一个 Dockerfile 可以包含多个<code>RUN</code>命令，但是只能有一个<code>CMD</code>命令。</p><p>注意，指定了<code>CMD</code>命令以后，<code>docker container run</code>命令就不能附加命令了（比如前面的<code>/bin/bash</code>），否则它会覆盖<code>CMD</code>命令。现在，启动容器可以使用下面的命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container run --rm -p 8000:3000 -it koa-demo:0.0.1</span><br></pre></td></tr></table></figure><h3 id="10-5-发布-image-文件"><a href="#10-5-发布-image-文件" class="headerlink" title="10.5 发布 image 文件"></a>10.5 发布 image 文件</h3><p>容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。</p><p>首先，去 <a href="https://hub.docker.com/">hub.docker.com</a> 或 <a href="https://cloud.docker.com/">cloud.docker.com</a> 注册一个账户。然后，用下面的命令登录。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker login</span><br></pre></td></tr></table></figure><p>接着，为本地的 image 标注用户名和版本。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image tag [imageName] [username]/[repository]:[tag]</span><br><span class="line"># 实例</span><br><span class="line">$ docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1</span><br></pre></td></tr></table></figure><p>也可以不标注用户名，重新构建一下 image 文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image build -t [username]/[repository]:[tag] .</span><br></pre></td></tr></table></figure><p>最后，发布 image 文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image push [username]/[repository]:[tag]</span><br></pre></td></tr></table></figure><p>发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。</p><h2 id="十一、其他有用的命令"><a href="#十一、其他有用的命令" class="headerlink" title="十一、其他有用的命令"></a>十一、其他有用的命令</h2><p>docker 的主要用法就是上面这些，此外还有几个命令，也非常有用。</p><p><strong>（1）docker container start</strong></p><p>前面的<code>docker container run</code>命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用<code>docker container start</code>命令，它用来启动已经生成、已经停止运行的容器文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container start [containerID]</span><br></pre></td></tr></table></figure><p><strong>（2）docker container stop</strong></p><p>前面的<code>docker container kill</code>命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而<code>docker container stop</code>命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ bash container stop [containerID]</span><br></pre></td></tr></table></figure><p>这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。</p><p><strong>（3）docker container logs</strong></p><p><code>docker container logs</code>命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果<code>docker run</code>命令运行容器的时候，没有使用<code>-it</code>参数，就要用这个命令查看输出。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container logs [containerID]</span><br></pre></td></tr></table></figure><p><strong>（4）docker container exec</strong></p><p><code>docker container exec</code>命令用于进入一个正在运行的 docker 容器。如果<code>docker run</code>命令运行容器的时候，没有使用<code>-it</code>参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container exec -it [containerID] /bin/bash</span><br></pre></td></tr></table></figure><p><strong>（5）docker container cp</strong></p><p><code>docker container cp</code>命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker container cp [containID]:[/path/to/file] .</span><br></pre></td></tr></table></figure><p>非常感谢你一直读到了这里，这个系列还有<a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html">下一篇</a>，介绍如何使用 Docker 搭建真正的网站，欢迎<a href="http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html">继续阅读</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程与进程</title>
      <link href="/p/52642.html"/>
      <url>/p/52642.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cea1f5b22bd66d8ed1aed91acc96ab4d314122bc6d23438e1ee02cc38689c493">06f86bacd7a2f2265f6cf92574ab7c5d0bef642e59c29f46d712a42e7c52085d2337f5c33b3f39ecf0c030f2a7fe5650bc1158bf8f59d78c0898a552e7bf62c4e5bb71e5adf01e2a1afb981fb4f2f67e420cfa05bbc8724761ff983e85a5bd5e137974bece39319d218456650412ee961088e30272c2cada308b220912e58d1601d0473c0542088aa6e4f27cec2df01061f4adde0e734186ce4d89d25b5755372602b3fc855e0065438914ad3fb92e836f3e0da2432ec248f9275302c0f34691b4c55e18d4eb87d46c0f4862db9a8357a229c88e392329ac83c0a0738bcd378dc5903d57bd68e86547ce5c2c38c71f98e82571866cbe36739701d71100c0fa2c7fe5312937f9ec97b7fc62b91bb84977afe2dc195486cb2bcac4eff6dcfc857450602359999dc3d22efe19b1359d33e97487e3e0eb6f87da02af6c5c2cea0601d08ba2d9d0b78c537d750d3ecbc9557712fdd4a25386fd004158360ad53c7f5acbe3c3fd0411a997c7af8b6419780739b8d84bcda7b258527bad74ac2b77a92181b00831ffbd135b66e73f94795b8557a205db3ea103febbc7f435dab335fa7415c05dededea2c606ae12115145ad09a3ba5ca352950cfaecb77e3d647589b519738a8bcdd5793651162b0d95ab6bffb8d71c19668c42aed0f23e053b2ff58dbb0fbeded5dbf9a0cb34585139c9afa5b80fae59ba4a890d5f53b30543e506f0bf06b77c0f2b22e1c20f886d12bc511ccb9f0af4aeae583fbae27aacb70e85321fb446acd804fdcffd5950deb81dd511018d6df489a1b1277220752cc8ab3f8294df8ef06780775f40ea185300251a199b6319631b7fc24cb77359df89e59eb26dd1337140aab45d4907b831c0dd0689a695d04f0fb125766c4d47e36cf38359db5ba0bd7ddda79344b72eca9141250883a2ec00e3f060b5ba224fce43fb9a9453d7e8440d104874cc44360a3174d37f2075884eb3b529a1f38330e6ec944cb7b2d9da11e4623203f500956f6c9cf47108c251ccdb0928a8d58dece208ab96fa39adbc10ae1914d630e5ccb66955f41b90828c27d38c90831de5d6fcfd0ec2768ed946de371b4d0963c3ea5ca90e8a5a2f893d49905dbd72fa0ea1bc2888561b66249b275b59a47b964dc9379b1476f9c5e0bc77e274327948a94dd0798b9ab0644f4aa5c01627f8669737e97092f6a8fe4b3ead0d8db8a3c2e020245926f5943cf62a1a4125b03ee575089e4dd491ca446b511b96b69b4a542b107e6b179c8d5cf7682cd3cf500da050217a6406c85b1471395fc3fdb815376fe8eb3e51711d7b69c246298c3a195179e5b804b37dc1a54e098b964e0bbd1004977189fdae237042cd3a79ab96f2f113e3102bfc241fea1ecd9a316ab5e80fbb2df8f36a0457a9972b71075f44be6588875cfb134a62962a2a1d905153ab380873435ad349f1985352622c32db8aeb428d57ddc247b32143e2632db3933f19b34fb9ede9c2d30903bef0d0cd88fc8b34fb6af89b1766fd351f934a48c934aa5f310a826f209818de74b0b0dd9e64d4369c7c1224adc685eae138fd07a9359eb95d9f1f0567b1fcd71c337e2df1ab86e34a9d05762e8d71eac3ace4891c4fbcf24daf15517a633e8b14cc56c003a8542a7d9c5541a4b2c3cd1b524200e809981376d118fa1a5c170b736cbd63cb30240a030999532461f8cb3808e033161e059adef64bfd5ffdfc0b143f9d3c98e439d3a9a9a555e55d97134dd1db4128e1a08e662ad7567934eda230ffa10d5695f4237e4086064d9a3d680caebca55d38e52f0d009cdcb54679b026cebedb6c857b59347918d9fba9671c35fbab4644666c74a2a65d4673ba91ae6b316d6e0d68ef6f62e95f92b5d06d5da622e3f70ef2b60213621647750f62c2651700826b3e9116077d1a457e3fcc3c5e9d2af9847b4a4a435fd54fa3f45aefeb7e4924482a2fb9e3b979261716c924c352b806d52f168176aa38a809d8a13ef836204c9001ca1dbd477e22176997d6df79c275c16468e8d901d5de5c0413ba3bed49347278d429a6feef2fd5a997495085edb59e34b296340c7acb7d50d67d028dd1adcf134f2ec62f83290a2245a8330a995281e997821df023d3ec01f6e707110b304f3b8dbcf75af3d6a179e13e572f51482fff54e6b26beed4051c6dc4d4af476972349d8eb699ed3c7b98bad85cef0b6a5c7f686929f18271336d93ab364356ee8babf7401a298541549af30f85e9cec9648dbca7044a3418839a47b6032cf55af245980012fe92b3b1c2ac661574b16cb2824dbc836a3497925bf9de3dd89d2d2c88d9cd7ab37e3bfaa6451bd9261355d74f72d53629af78c90fed6aa95163e99f8bdf5da5b6e6bbcff7b633c1d7cd320d6b21ecc146bec79f818bf6665e7a6289bf28025546db370f1c53709ad3a2ef65c735b1089025a69f6e8ed0e853d3751ee2cffcae7d1bc154b3b90f39852987f64b022c56f6ab1ac4969509003c0e48c7f068649bdd0c54ca0a9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典网络实现</title>
      <link href="/p/35344.html"/>
      <url>/p/35344.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="tip error">看不懂别人的代码,自己实现一遍经典网络,熟悉keras api</div> <div class="tip success"> 水篇博客 </div><div class="tip warning">没有训练测试过网络的效果,直接拿去用可能会出问题!!!</div><p>本意是了解如何自己构建网络,以防日后的模型迁移要再学一遍. <del>不要问为什么我知道要重学</del></p><p>可能网络会有错误,但是无伤大雅,知道如何构建就行 <del>反正以后经典网络可以直接导入</del></p><p>不过在之前要先了解一下模型保存不同格式的区别<del>以防模型实现了不会保存</del></p><h2 id="模型保存"><a href="#模型保存" class="headerlink" title="模型保存"></a>模型保存</h2><p><a href="https://tensorflow.google.cn/guide/keras/save_and_serialize?hl=zh-cn">TF官网</a></p><h3 id="Save-model格式"><a href="#Save-model格式" class="headerlink" title="Save_model格式"></a>Save_model格式</h3><p>这个是最简单粗暴的模型保存方法了。</p><p>保存的模型将包括：</p><ul><li>模型的架构/配置</li><li>模型的权重值（在训练过程中学习）</li><li>模型的编译信息（如果调用了 <code>compile()</code>）</li><li>优化器及其状态（如果有的话，使您可以从上次中断的位置重新开始训练）</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保存为dirname_path路径下文件名为dirname的文件夹</span></span><br><span class="line"></span><br><span class="line">model.save(dirname_path)</span><br></pre></td></tr></table></figure><h3 id="H5格式"><a href="#H5格式" class="headerlink" title="H5格式"></a>H5格式</h3><blockquote><p>Keras 还支持保存单个 HDF5 文件，其中包含模型的架构、权重值和 <code>compile()</code> 信息。它是 SavedModel 的轻量化替代选择。</p></blockquote><p>但是同时因为只有一个h5文件与 SavedModel 格式相比，H5 文件不包括以下两方面内容：</p><ul><li>通过 <code>model.add_loss()</code> 和 <code>model.add_metric()</code> 添加的<strong>外部损失和指标</strong>不会被保存（这与 SavedModel 不同）。如果您的模型有此类损失和指标且您想要恢复训练，则您需要在加载模型后自行重新添加这些损失。请注意，这不适用于通过 <code>self.add_loss()</code> 和 <code>self.add_metric()</code> 在层内创建的损失指标。只要该层被加载，这些损失和指标就会被保留，因为它们是该层 <code>call</code> 方法的一部分。</li><li>已保存的文件中<strong>不包含自定义对象（如自定义层）的计算图</strong>。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只需要在文件名后加.h5后缀即可</span></span><br><span class="line">model.save(name.h5)</span><br></pre></td></tr></table></figure><h3 id="checkpoints"><a href="#checkpoints" class="headerlink" title="　checkpoints"></a>　checkpoints</h3><h3 id="保存时附带签名"><a href="#保存时附带签名" class="headerlink" title="保存时附带签名"></a>保存时附带签名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span>(<span class="params">tf.keras.Model</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @tf.function</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, x</span>):</span></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">  m = Model()</span><br><span class="line">  tf.saved_model.save(</span><br><span class="line">      m, <span class="string">&#x27;/tmp/saved_model/&#x27;</span>,</span><br><span class="line">      signatures=m.call.get_concrete_function(</span><br><span class="line">          tf.TensorSpec(shape=[<span class="literal">None</span>, <span class="number">3</span>], dtype=tf.float32, name=<span class="string">&quot;inp&quot;</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h2><h3 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h3><p>不同的ResNet只有结构不同,unit是相同的只需要改变layer_dims就可以实现了</p><p>这里使用重写类来构建网络,虽然要写前向传播比较麻烦,但是自由度更高</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>]=<span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span>  tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> tensorboard</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BATCHSIZE=<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicBlock</span>(<span class="params">layers.Layer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,filter_num,stride=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(BasicBlock,self).__init__()</span><br><span class="line">        self.conv1=layers.Conv2D(kernel_size=(<span class="number">3</span>,<span class="number">3</span>) ,filters=filter_num,strides=stride,padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.bn1=layers.BatchNormalization()</span><br><span class="line">        self.relu=layers.Activation(<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.conv2=layers.Conv2D(kernel_size=(<span class="number">3</span>,<span class="number">3</span>) ,filters=filter_num,strides=<span class="number">1</span>,padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        self.bn2 = layers.BatchNormalization()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stride!=<span class="number">1</span>):</span><br><span class="line">            self.downsample = keras.Sequential()</span><br><span class="line">            self.downsample.add(layers.Conv2D(filters=filter_num,kernel_size=(<span class="number">1</span>,<span class="number">1</span>),strides=stride))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.downsample=<span class="keyword">lambda</span> x:x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,inputs,training=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line">        out=self.conv1(inputs)</span><br><span class="line">        out=self.bn1(out)</span><br><span class="line">        out=self.relu(out)</span><br><span class="line">        out=self.conv2(out)</span><br><span class="line">        out=self.bn2(out)</span><br><span class="line"></span><br><span class="line">        identity=self.downsample(inputs)</span><br><span class="line">        output=layers.add([out,identity])</span><br><span class="line">        output=self.relu(output)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet</span>(<span class="params">keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,layer_dims,num_classes=<span class="number">100</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResNet, self).__init__()</span><br><span class="line">        <span class="comment"># self.flatten=layers.Flatten(input_shape=(32,32,3))</span></span><br><span class="line">        self.stem=keras.Sequential([</span><br><span class="line">            layers.Conv2D(<span class="number">64</span>,(<span class="number">3</span>,<span class="number">3</span>),strides=(<span class="number">1</span>,<span class="number">1</span>)),</span><br><span class="line">            layers.BatchNormalization(),</span><br><span class="line">            layers.Activation(<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">            layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>),strides=(<span class="number">1</span>,<span class="number">1</span>),padding=<span class="string">&#x27;same&#x27;</span>)</span><br><span class="line">        ])</span><br><span class="line">        self.layer1=self.build_resblock(filter_num=<span class="number">64</span>,blocks=layer_dims[<span class="number">0</span>])</span><br><span class="line">        self.layer2=self.build_resblock(filter_num=<span class="number">128</span>,blocks=layer_dims[<span class="number">1</span>],stride=<span class="number">2</span>)</span><br><span class="line">        self.layer3=self.build_resblock(filter_num=<span class="number">256</span>,blocks=layer_dims[<span class="number">2</span>],stride=<span class="number">2</span>)</span><br><span class="line">        self.layer4=self.build_resblock(filter_num=<span class="number">512</span>,blocks=layer_dims[<span class="number">3</span>],stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.avgpool=layers.GlobalAveragePooling2D()</span><br><span class="line">        self.fc=layers.Dense(num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,inputs,training=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="comment"># x = tf.reshape(inputs, [-1, 32 * 32*3])</span></span><br><span class="line">        out=self.stem(inputs)</span><br><span class="line">        out=self.layer1(out)</span><br><span class="line">        out=self.layer2(out)</span><br><span class="line">        out=self.layer3(out)</span><br><span class="line">        out=self.layer4(out)</span><br><span class="line">        out=self.avgpool(out)</span><br><span class="line">        out=self.fc(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_resblock</span>(<span class="params">self,filter_num,blocks,stride=<span class="number">1</span></span>):</span></span><br><span class="line">        res_block=keras.Sequential()</span><br><span class="line">        res_block.add(BasicBlock(filter_num,stride))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,blocks):</span><br><span class="line">            res_block.add(BasicBlock(filter_num,stride=<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span>  res_block</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnet18</span>():</span></span><br><span class="line">    <span class="keyword">return</span> ResNet(layer_dims=[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;pre:&#x27;</span>, x.shape, y.shape)</span><br><span class="line">    x=tf.cast(x,dtype=tf.float32)/<span class="number">255.0</span></span><br><span class="line">    y=tf.cast(y,dtype=tf.int32)</span><br><span class="line">    y = tf.squeeze(y)</span><br><span class="line">    y=tf.one_hot(y,depth=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;after&#x27;</span>, x.shape, y.shape)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x,y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data2tensor</span>(<span class="params">x,y</span>):</span></span><br><span class="line"></span><br><span class="line">    db=tf.data.Dataset.from_tensor_slices((x,y))</span><br><span class="line">    db=db.<span class="built_in">map</span>(preprocess)</span><br><span class="line">    db=db.shuffle(<span class="number">5000</span>).batch(BATCHSIZE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span>(<span class="params">train_db,val_db,is_train=<span class="literal">False</span></span>):</span></span><br><span class="line">    model = resnet18()</span><br><span class="line"></span><br><span class="line">    model.build(input_shape=(<span class="literal">None</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>))</span><br><span class="line">    model.summary()</span><br><span class="line">    x=tf.random.normal([<span class="number">4</span>,<span class="number">32</span>,<span class="number">32</span>,<span class="number">3</span>])</span><br><span class="line">    out=model(x)</span><br><span class="line">    <span class="built_in">print</span>(out.shape)</span><br><span class="line"></span><br><span class="line">    model.<span class="built_in">compile</span>(</span><br><span class="line">        optimizer=tf.optimizers.Adam(),</span><br><span class="line">        loss=tf.losses.CategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">        metrics=[<span class="string">&#x27;accuracy&#x27;</span>],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    path=os.path.abspath(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line">    log_dir = path + <span class="string">&#x27;\\logs\\&#x27;</span> + datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d-%H%M&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(log_dir)</span><br><span class="line">    tensorboard=keras.callbacks.TensorBoard(log_dir=log_dir,histogram_freq=<span class="number">1</span>)</span><br><span class="line">    model.summary()</span><br><span class="line">    <span class="keyword">if</span> is_train:</span><br><span class="line"></span><br><span class="line">        model.fit(train_db,validation_data=val_db,validation_freq=<span class="number">1</span>,epochs=<span class="number">5</span>,callbacks=[tensorboard])</span><br><span class="line"></span><br><span class="line">        model.save_weights(<span class="string">&#x27;./resnet18.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    (x,y),(x_test,y_test)=keras.datasets.cifar100.load_data()</span><br><span class="line"></span><br><span class="line">    l=<span class="built_in">int</span>(<span class="built_in">len</span>(x)*<span class="number">0.8</span>)</span><br><span class="line">    train_db=data2tensor(x[:l],y[:l])</span><br><span class="line">    val_db=data2tensor(x[l:],y[l:])</span><br><span class="line">    test_db=data2tensor(x_test,y_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># sample=next(iter(train_db))</span></span><br><span class="line">    <span class="comment"># print(sample[0].shape,sample[1].shape)</span></span><br><span class="line">    <span class="comment"># plt.imshow(sample[0])</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    train_model(train_db,val_db,is_train=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h3 id="自带api实现"><a href="#自带api实现" class="headerlink" title="自带api实现"></a>自带api实现</h3><p>因为application里面都有，功能都类似故后面不再赘述</p><div class="tips warning"> tf.kears.application.resnet50.Resnet50与tf.kears.application.Resnet50的功能都一样</div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.keras.applications <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">model=ResNet50(weights=<span class="string">&#x27;./resnet50_weights_tf_dim_ordering_tf_kernels.h5&#x27;</span>)</span><br><span class="line">path=<span class="string">&#x27;./cat.jpg&#x27;</span></span><br><span class="line"><span class="comment"># 读入图片</span></span><br><span class="line">image=image_preprocess.img_decoder(path)</span><br><span class="line"></span><br><span class="line">pre1=model.predict(image)</span><br><span class="line"><span class="comment"># 这个能使标签对应起来</span></span><br><span class="line">pre=resnet50.decode_predictions(pre1)</span><br><span class="line"><span class="built_in">print</span>(pre)</span><br></pre></td></tr></table></figure><h2 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h2><p>​    这里使用keras的高级api来构建网络,当然使用Sequential也可以实现同样的效果.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2021/2/19 20:48</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>]=<span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span>  tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span>  tensorflow <span class="keyword">import</span>  keras</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BATCHSIZE=<span class="number">32</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;pre&#x27;</span>,x.shape,y.shape)</span><br><span class="line"></span><br><span class="line">    x=<span class="number">2</span>*tf.cast(x,dtype=tf.float32)/<span class="number">255.0</span> -<span class="number">1</span></span><br><span class="line">    y = tf.squeeze(y)</span><br><span class="line">    y=tf.cast(y,dtype=tf.int32)</span><br><span class="line">    y=tf.one_hot(y,depth=<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;after:&#x27;</span>,x.shape,y.shape)</span><br><span class="line">    <span class="keyword">return</span>  x,y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data2tensor</span>(<span class="params">x,y</span>):</span></span><br><span class="line"></span><br><span class="line">    db=tf.data.Dataset.from_tensor_slices((x,y))</span><br><span class="line">    db=db.<span class="built_in">map</span>(preprocess)</span><br><span class="line">    db=db.shuffle(<span class="number">5000</span>).batch(BATCHSIZE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">VGG</span>(<span class="params">image_shape,n_class</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(image_shape[<span class="number">0</span>],image_shape[<span class="number">1</span>],image_shape[<span class="number">2</span>])</span><br><span class="line">    inputs = keras.Input(shape=[image_shape[<span class="number">0</span>],image_shape[<span class="number">1</span>],image_shape[<span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line">    x=keras.layers.Conv2D(<span class="number">64</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(inputs)</span><br><span class="line">    x=keras.layers.Conv2D(<span class="number">64</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x=keras.layers.MaxPooling2D(pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">128</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">128</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.MaxPooling2D(pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">256</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">256</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">256</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">256</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.MaxPooling2D(pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">512</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">512</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">512</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">512</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.MaxPooling2D(pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">512</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">512</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">512</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.Conv2D(<span class="number">512</span>, kernel_size=[<span class="number">3</span>, <span class="number">3</span>], strides=[<span class="number">1</span>, <span class="number">1</span>], activation=keras.activations.relu,padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line">    x= keras.layers.MaxPooling2D(pool_size=[<span class="number">2</span>, <span class="number">2</span>], strides=[<span class="number">2</span>, <span class="number">2</span>], padding=<span class="string">&#x27;same&#x27;</span>)(x)</span><br><span class="line"></span><br><span class="line">    x= keras.layers.Flatten()(x)</span><br><span class="line">    x= keras.layers.Dense(<span class="number">4096</span>, activation=keras.activations.relu, use_bias=<span class="literal">True</span>)(x)</span><br><span class="line">    x= keras.layers.Dense(<span class="number">4096</span>, activation=keras.activations.relu, use_bias=<span class="literal">True</span>)(x)</span><br><span class="line"></span><br><span class="line">    outputs= keras.layers.Dense(n_class, activation=keras.activations.softmax, use_bias=<span class="literal">True</span>)(x)</span><br><span class="line">    <span class="comment"># 基于Model方法构建模型</span></span><br><span class="line">    model = keras.Model(inputs=inputs, outputs=outputs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">train_db,val_db,is_train=<span class="literal">False</span></span>):</span></span><br><span class="line">    model = VGG([<span class="number">32</span>,<span class="number">32</span>,<span class="number">3</span>],n_class=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    model.<span class="built_in">compile</span>(</span><br><span class="line">        optimizer=tf.optimizers.Adam(),</span><br><span class="line">        loss=tf.losses.CategoricalCrossentropy(),</span><br><span class="line">        metrics=[<span class="string">&#x27;accuracy&#x27;</span>],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    path = os.path.abspath(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line">    log_dir = path + <span class="string">&#x27;\\logs\\&#x27;</span> + datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d-%H%M&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(log_dir)</span><br><span class="line">    tensorboard = keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=<span class="number">1</span>)</span><br><span class="line">    model.summary()</span><br><span class="line">    <span class="keyword">if</span> is_train:</span><br><span class="line"></span><br><span class="line">        model.fit(train_db, validation_data=val_db, validation_freq=<span class="number">1</span>, epochs=<span class="number">5</span>, callbacks=[tensorboard])</span><br><span class="line"></span><br><span class="line">        model.save_weights(<span class="string">&#x27;./vgg16.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(x,y),(x_test,y_test)=keras.datasets.cifar100.load_data()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;pre&#x27;</span>,x.shape,y.shape)</span><br><span class="line"></span><br><span class="line">train_db=data2tensor(x,y)</span><br><span class="line">test_db=data2tensor(x_test,y_test)</span><br><span class="line"></span><br><span class="line">train(train_db=train_db,val_db=test_db,is_train=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2><div class="tip warning">layers.lstmcell和layers.lstm传参是不一样的</div><p>前者需要手动更新state参数($h<em>{t-1}$,$c</em>{t-1}$)但是后者自动更新，如果需要多层叠加则需要设置return_sequence=True , unroll=True</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2021/2/21 17:46</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>]=<span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最常见的前20000个单词</span></span><br><span class="line">max_features=<span class="number">20000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一句话的最大长度</span></span><br><span class="line">max_len=<span class="number">100</span></span><br><span class="line">batchsize=<span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mylstm</span>(<span class="params">keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,units</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Mylstm,self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [b,100] =&gt; [b,100,100]</span></span><br><span class="line"></span><br><span class="line">        self.embeding=keras.layers.Embedding(input_dim=max_features,input_length=max_len,output_dim=<span class="number">100</span>)</span><br><span class="line">        self.rnn=keras.Sequential([</span><br><span class="line">            keras.layers.LSTM(units=units,dropout=<span class="number">0.5</span>,return_sequences=<span class="literal">True</span>,unroll=<span class="literal">True</span>),</span><br><span class="line">            keras.layers.LSTM(units=units,dropout=<span class="number">0.5</span>,unroll=<span class="literal">True</span>)</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        self.fc=keras.layers.Dense(<span class="number">1</span>,activation=keras.activations.sigmoid)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,inputs,training=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># [b,100] =&gt; [b,100,100]</span></span><br><span class="line">        x=self.embeding(inputs)</span><br><span class="line">        <span class="built_in">print</span>(x.shape)</span><br><span class="line">        <span class="comment"># [b,100,100] =&gt; [b,64]</span></span><br><span class="line">        x=self.rnn(x)</span><br><span class="line">        x=self.fc(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data2tensor</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    x=keras.preprocessing.sequence.pad_sequences(sequences=x,maxlen=max_len)</span><br><span class="line">    x=tf.cast(x,dtype=tf.int32)</span><br><span class="line">    y=tf.cast(y,dtype=tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(x.shape,y.shape)</span><br><span class="line"></span><br><span class="line">    db=tf.data.Dataset.from_tensor_slices((x,y)).shuffle(<span class="number">10000</span>).batch(batchsize,drop_remainder=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">db_train,db_val,db_test</span>):</span></span><br><span class="line"></span><br><span class="line">    model=Mylstm(<span class="number">64</span>)</span><br><span class="line">    model.<span class="built_in">compile</span>(</span><br><span class="line">        optimizer=tf.optimizers.Adam(),</span><br><span class="line">        loss=tf.losses.BinaryCrossentropy(),</span><br><span class="line">        metrics=[<span class="string">&#x27;accuracy&#x27;</span>],</span><br><span class="line">    )</span><br><span class="line">    model.fit(db_train,epochs=<span class="number">5</span>,validation_data=db_val,validation_freq=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    model.evaluate(db_test)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    (x,y),(x_test,y_test)=keras.datasets.imdb.load_data(num_words=max_features)</span><br><span class="line"></span><br><span class="line">    l=<span class="built_in">int</span>(<span class="built_in">len</span>(x)*<span class="number">0.8</span>)</span><br><span class="line">    db_train=data2tensor(x[:l],y[:l])</span><br><span class="line">    db_val=data2tensor(x[l:],y[l:])</span><br><span class="line">    db_test=data2tensor(x_test,y_test)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    train(db_train,db_val,db_test)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AutoEncoder-VAE"><a href="#AutoEncoder-VAE" class="headerlink" title="AutoEncoder|VAE"></a>AutoEncoder|VAE</h2><p><em>这里是自定义训练，当然相比之下更复杂但是自由度也更高。</em></p><p>autoencoder就是两个自定义网络，先降维得到特征向量h，再升到原本维度就行了<del>没什么技术含量，就不写了</del>，关键是它的思路非常具有启发性。</p><p>这里要注意的是mean,var Dense是两个Dense，即使计算方式一样但是要用两Dense,如果一个Dense算两次因为权重的原因结果是相同的，直接会导致图片越来越暗。</p><p>先附上<a href="https://www.cnblogs.com/henuliulei/p/13742376.html">tf.nn的几种损失函数区别</a>再附代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2021/2/22 21:55</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>]=<span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">tf.random.set_seed(<span class="number">2345</span>)</span><br><span class="line"><span class="comment"># autoencoder 计算量很小batch可以大一点</span></span><br><span class="line">batch_size=<span class="number">512</span></span><br><span class="line"><span class="comment"># 特征维数</span></span><br><span class="line">z_dims=<span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VAE</span>(<span class="params">keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(VAE,self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#encoder</span></span><br><span class="line">        self.encoder=keras.Sequential([</span><br><span class="line">            keras.layers.InputLayer(input_shape=(<span class="number">28</span>*<span class="number">28</span>)),</span><br><span class="line">            keras.layers.Dense(<span class="number">128</span>),</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        self.meanfc=keras.layers.Dense(z_dims)</span><br><span class="line">        self.varfc=keras.layers.Dense(z_dims)</span><br><span class="line">        <span class="comment">#decoder</span></span><br><span class="line">        self.decoder=keras.Sequential([</span><br><span class="line">            keras.layers.Dense(<span class="number">128</span>, activation=tf.nn.relu),</span><br><span class="line">            keras.layers.Dense(<span class="number">784</span>),</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reparamize</span>(<span class="params">self,mean,log_var</span>):</span></span><br><span class="line"></span><br><span class="line">        eps=tf.random.normal(log_var.shape)</span><br><span class="line">        z=mean+eps*tf.exp(log_var*<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,inputs,training=<span class="literal">None</span></span>):</span></span><br><span class="line">        h=self.encoder(inputs)</span><br><span class="line">        </span><br><span class="line">        mean=self.meanfc(h)</span><br><span class="line">        log_var=self.varfc(h)</span><br><span class="line">        </span><br><span class="line">        z=self.reparamize(mean,log_var)</span><br><span class="line">        </span><br><span class="line">        outputs=self.decoder(z)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> outputs,mean,log_var</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data2tensor</span>(<span class="params">x,y</span>):</span></span><br><span class="line"></span><br><span class="line">    x=tf.cast(x,dtype=tf.float32)/<span class="number">255.0</span></span><br><span class="line">    db=tf.data.Dataset.from_tensor_slices(x)</span><br><span class="line">    db=db.shuffle(batch_size*<span class="number">5</span>).batch(batch_size)</span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_images</span>(<span class="params">imgs,name</span>):</span></span><br><span class="line">    new_im = Image.new(<span class="string">&#x27;L&#x27;</span>, (<span class="number">280</span>, <span class="number">280</span>))</span><br><span class="line"></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">280</span>, <span class="number">28</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">280</span>, <span class="number">28</span>):</span><br><span class="line">            im = imgs[index]</span><br><span class="line">            im = Image.fromarray(im, mode=<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">            new_im.paste(im, (i, j))</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">    new_im.save(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_and_test</span>(<span class="params">db_train,db_test</span>):</span></span><br><span class="line"></span><br><span class="line">    model=VAE()</span><br><span class="line">    <span class="comment"># model.build(input_shape=(4,784))</span></span><br><span class="line">    optimizer=tf.optimizers.Adam()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">for</span> step,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(db_train):</span><br><span class="line">            <span class="comment"># print(x.shape)</span></span><br><span class="line">            x=tf.reshape(x,[-<span class="number">1</span>,<span class="number">784</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">                x_hat,mean,log_var=model(x)</span><br><span class="line">                <span class="comment"># 这里使用的这个loss是为了更好的收敛，使用其他的也行，但是要多训练</span></span><br><span class="line">                redu_loss=tf.nn.sigmoid_cross_entropy_with_logits(x,x_hat)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 这里其实随便，reduce_mean(),reduce_sum()应该都行反正都是minimize loss</span></span><br><span class="line">                <span class="comment"># reduce_mean()和reduce_sum()|reduce_sum/x.shape[0]训练结果完全不同..</span></span><br><span class="line">                <span class="comment"># 但是后两者相似</span></span><br><span class="line">                redu_loss=tf.reduce_sum(redu_loss)/x.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                kl=-<span class="number">0.5</span>*(log_var+<span class="number">1</span>-mean**<span class="number">2</span>-tf.exp(log_var))</span><br><span class="line">                <span class="comment"># prekl=tf.reduce_mean(kl)</span></span><br><span class="line">                kl=tf.reduce_sum(kl)/x.shape[<span class="number">0</span>]</span><br><span class="line">     </span><br><span class="line">                loss=redu_loss+kl*<span class="number">1.0</span></span><br><span class="line">            grads=tape.gradient(loss,model.trainable_variables)</span><br><span class="line"></span><br><span class="line">            optimizer.apply_gradients(<span class="built_in">zip</span>(grads,model.trainable_variables))</span><br><span class="line">            <span class="keyword">if</span> step%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(epoch,step,<span class="string">&quot;kl_loss:&quot;</span>,kl,<span class="string">&#x27;loss:&#x27;</span>,loss,<span class="string">&#x27;x_shape0&#x27;</span>,x.shape[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># evaluation</span></span><br><span class="line">        z=tf.random.normal((batch_size,z_dims))</span><br><span class="line">        sample_x=model.decoder(z)</span><br><span class="line">        sample_x=tf.nn.sigmoid(sample_x)</span><br><span class="line">        sample_x = tf.reshape(sample_x, [-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>]).numpy() * <span class="number">255.</span></span><br><span class="line">        sample_x= sample_x.astype(np.uint8)</span><br><span class="line"></span><br><span class="line">        save_images(sample_x, <span class="string">&#x27;vae_images/sample_epoch_%d.png&#x27;</span> % epoch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        test_x = <span class="built_in">next</span>(<span class="built_in">iter</span>(db_test))</span><br><span class="line">        test_x,_,_= model(tf.reshape(test_x, [-<span class="number">1</span>, <span class="number">784</span>]))</span><br><span class="line">        <span class="comment"># [b, 784] =&gt; [b, 28, 28]</span></span><br><span class="line">        test_x=tf.nn.sigmoid(test_x)</span><br><span class="line">        test_x = tf.reshape(test_x, [-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [b, 28, 28] =&gt; [2b, 28, 28]</span></span><br><span class="line">        test_x= test_x.numpy() * <span class="number">255.</span></span><br><span class="line">        test_x = test_x.astype(np.uint8)</span><br><span class="line">        save_images(test_x, <span class="string">&#x27;vae_images/test_epoch_%d.png&#x27;</span> % epoch)</span><br><span class="line"></span><br><span class="line">    model.save_weights(<span class="string">&#x27;./vae.h5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    (x,y),(x_test,y_test)=keras.datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line">    l=<span class="built_in">int</span>(<span class="built_in">len</span>(x)*<span class="number">0.8</span>)</span><br><span class="line">    <span class="built_in">print</span>(x.shape, y.shape,l,<span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">    db_train=data2tensor(x[:l],y[:l])</span><br><span class="line">    db_val=data2tensor(x[l:],y[l:])</span><br><span class="line">    db_test=data2tensor(x_test,y_test)</span><br><span class="line"></span><br><span class="line">    train_and_test(db_train,db_val)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Gan"><a href="#Gan" class="headerlink" title="Gan"></a>Gan</h2><h3 id="WGAN原理"><a href="#WGAN原理" class="headerlink" title="WGAN原理"></a>WGAN原理</h3><p>GAN一直面临着G,D训练困难、G,D的损失函数与训练好坏无关(由于js散度，loss 常常是log2)等问题，在此基础上便提出了WGAN，相对于传统的GAN,WGAN只做了几点改动确有很好的效果</p><ul><li>D的最后一层去掉sigmod</li><li>G,Dloss不取log</li><li>每次更新D的参数后做一个梯度惩罚（gradient penalty）</li></ul><p>GAN的原本损失函数为</p><script type="math/tex; mode=display">E_{z \in p_z(z)}[log(1-D(G(z)))]</script><p>但是这样导致了如果D太好了G则训练不到有效的梯度，G太好了D又训练不到有效的梯度</p><p>所以WGAN的损失函数改为了，在improve WGAN中还加入了gradient penalty</p><script type="math/tex; mode=display">E_{z\in p_z(z)}[-logD(G(z))] = KL(P_g||P_{data})-2JS(P_{data}||P_g)+\lambda gp</script><p>WGAN理论上给出了GAN训练不稳定的原因，即交叉熵（JS散度）不适合衡量具有不相交部分的分布之间的距离，转而使用wassertein距离去衡量生成数据分布和真实数据分布之间的距离，理论上解决了训练不稳定的问题。</p><p>​    WGAN相对于DCGAN，WGAN虽然收敛时间更长但是更稳定，所以对于更复杂网络来说更倾向于WGAN，比如使用resnet可以达到更好的结果。</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p><em>generator里的反卷积参数必须最后要计算结果能吻合Discriminator的input_shape</em></p><p>因为要在batchnorm后面做激活所以不能像之前一样在卷积层里面激活。</p><p>这是我自己的wgan跑3000个epoch后的结果，可以明显看出学习到了头发和眼睛(相比之下别人调的参太牛了)</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed01@master/img/20210227002207.jpg" alt="wg_img_3400"></p><p>数据集kaggle上随便找<del>啊，kaggle真香，各方意义上</del>，</p><p>龙书里面的提到的数据集在这里<a href="https://pan.baidu.com/s/1Yn53uxFLCbja13_6Ay44MA">https://pan.baidu.com/s/1Yn53uxFLCbja13_6Ay44MA</a> </p><p>数据集来源在<a href="https://zhuanlan.zhihu.com/p/24767059">这里</a>,我开始没看issue没找到这个数据集，爬到一半才看到😓，</p><p>我爬的数据在<a href="https://pan.baidu.com/s/1JsUHx_1blY6pGx0DQfE0nQ">https://pan.baidu.com/s/1JsUHx_1blY6pGx0DQfE0nQ</a> 提取码：3621 （只有三万张图片…</p><p>我写的gan参数太差了，看龙书说跑3万次似乎能得到比较好的效果？算了直接上别人已经调好参的WGAN代码吧，知乎那个调好参的DCGAN太猛了，300epoch居然就成型了orz（虽然我没跑</p><h3 id="train函数"><a href="#train函数" class="headerlink" title="train函数"></a>train函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>]=<span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> dataset</span><br><span class="line"><span class="keyword">import</span>  tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span>    tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span>    tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span>(<span class="params">keras.Model</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Generator, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># z: [b, 100] =&gt; [b, 3*3*512] =&gt; [b, 3, 3, 512] =&gt; [b, 64, 64, 3]</span></span><br><span class="line">        self.fc = layers.Dense(<span class="number">3</span>*<span class="number">3</span>*<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">        self.conv1 = layers.Conv2DTranspose(<span class="number">256</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line">        self.bn1 = layers.BatchNormalization()</span><br><span class="line"></span><br><span class="line">        self.conv2 = layers.Conv2DTranspose(<span class="number">128</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line">        self.bn2 = layers.BatchNormalization()</span><br><span class="line"></span><br><span class="line">        self.conv3 = layers.Conv2DTranspose(<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, inputs, training=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="comment"># [z, 100] =&gt; [z, 3*3*512]</span></span><br><span class="line">        x = self.fc(inputs)</span><br><span class="line">        x = tf.reshape(x, [-<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">512</span>])</span><br><span class="line">        x = tf.nn.leaky_relu(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        x = tf.nn.leaky_relu(self.bn1(self.conv1(x), training=training))</span><br><span class="line">        x = tf.nn.leaky_relu(self.bn2(self.conv2(x), training=training))</span><br><span class="line">        x = self.conv3(x)</span><br><span class="line">        x = tf.tanh(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Discriminator</span>(<span class="params">keras.Model</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Discriminator, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [b, 64, 64, 3] =&gt; [b, 1]</span></span><br><span class="line">        self.conv1 = layers.Conv2D(<span class="number">64</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.conv2 = layers.Conv2D(<span class="number">128</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line">        self.bn2 = layers.BatchNormalization()</span><br><span class="line"></span><br><span class="line">        self.conv3 = layers.Conv2D(<span class="number">256</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="string">&#x27;valid&#x27;</span>)</span><br><span class="line">        self.bn3 = layers.BatchNormalization()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [b, h, w ,c] =&gt; [b, -1]</span></span><br><span class="line">        self.flatten = layers.Flatten()</span><br><span class="line">        self.fc = layers.Dense(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, inputs, training=<span class="literal">None</span></span>):</span></span><br><span class="line"></span><br><span class="line">        x = tf.nn.leaky_relu(self.conv1(inputs))</span><br><span class="line">        x = tf.nn.leaky_relu(self.bn2(self.conv2(x), training=training))</span><br><span class="line">        x = tf.nn.leaky_relu(self.bn3(self.conv3(x), training=training))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [b, h, w, c] =&gt; [b, -1]</span></span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        <span class="comment"># [b, -1] =&gt; [b, 1]</span></span><br><span class="line">        logits = self.fc(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_result</span>(<span class="params">val_out, val_block_size, image_path, color_mode</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">img</span>):</span></span><br><span class="line">        img = ((img + <span class="number">1.0</span>) * <span class="number">127.5</span>).astype(np.uint8)</span><br><span class="line">        <span class="comment"># img = img.astype(np.uint8)</span></span><br><span class="line">        <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line">    preprocesed = preprocess(val_out)</span><br><span class="line">    final_image = np.array([])</span><br><span class="line">    single_row = np.array([])</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(val_out.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="comment"># concat image into a row</span></span><br><span class="line">        <span class="keyword">if</span> single_row.size == <span class="number">0</span>:</span><br><span class="line">            single_row = preprocesed[b, :, :, :]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            single_row = np.concatenate((single_row, preprocesed[b, :, :, :]), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># concat image row to final_image</span></span><br><span class="line">        <span class="keyword">if</span> (b+<span class="number">1</span>) % val_block_size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> final_image.size == <span class="number">0</span>:</span><br><span class="line">                final_image = single_row</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                final_image = np.concatenate((final_image, single_row), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># reset single row</span></span><br><span class="line">            single_row = np.array([])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> final_image.shape[<span class="number">2</span>] == <span class="number">1</span>:</span><br><span class="line">        final_image = np.squeeze(final_image, axis=<span class="number">2</span>) </span><br><span class="line">    Image.fromarray(final_image).save(image_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">celoss_ones</span>(<span class="params">logits</span>):</span></span><br><span class="line">   <span class="keyword">return</span> - tf.reduce_mean(logits)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">celoss_zeros</span>(<span class="params">logits</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_mean(logits)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_penalty</span>(<span class="params">discriminator, batch_x, fake_image</span>):</span></span><br><span class="line"></span><br><span class="line">    batchsz = batch_x.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># [b, h, w, c]</span></span><br><span class="line">    t = tf.random.uniform([batchsz, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">    <span class="comment"># [b, 1, 1, 1] =&gt; [b, h, w, c]</span></span><br><span class="line">    t = tf.broadcast_to(t, batch_x.shape)</span><br><span class="line"></span><br><span class="line">    interplate = t * batch_x + (<span class="number">1</span> - t) * fake_image</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        tape.watch([interplate])</span><br><span class="line">        d_interplote_logits = discriminator(interplate, training=<span class="literal">True</span>)</span><br><span class="line">    grads = tape.gradient(d_interplote_logits, interplate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># grads:[b, h, w, c] =&gt; [b, -1]</span></span><br><span class="line">    grads = tf.reshape(grads, [grads.shape[<span class="number">0</span>], -<span class="number">1</span>])</span><br><span class="line">    gp = tf.norm(grads, axis=<span class="number">1</span>) <span class="comment">#[b]</span></span><br><span class="line">    gp = tf.reduce_mean( (gp-<span class="number">1</span>)**<span class="number">2</span> )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d_loss_fn</span>(<span class="params">generator, discriminator, batch_z, batch_x, is_training</span>):</span></span><br><span class="line">    <span class="comment"># 1. treat real image as real</span></span><br><span class="line">    <span class="comment"># 2. treat generated image as fake</span></span><br><span class="line">    fake_image = generator(batch_z, is_training)</span><br><span class="line">    d_fake_logits = discriminator(fake_image, is_training)</span><br><span class="line">    d_real_logits = discriminator(batch_x, is_training)</span><br><span class="line"></span><br><span class="line">    d_loss_real = celoss_ones(d_real_logits)</span><br><span class="line">    d_loss_fake = celoss_zeros(d_fake_logits)</span><br><span class="line">    gp = gradient_penalty(discriminator, batch_x, fake_image)</span><br><span class="line"></span><br><span class="line">    loss = d_loss_real + d_loss_fake + <span class="number">10.</span> * gp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, gp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g_loss_fn</span>(<span class="params">generator, discriminator, batch_z, is_training</span>):</span></span><br><span class="line"></span><br><span class="line">    fake_image = generator(batch_z, is_training)</span><br><span class="line">    d_fake_logits = discriminator(fake_image, is_training)</span><br><span class="line">    loss = celoss_ones(d_fake_logits)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    tf.random.set_seed(<span class="number">233</span>)</span><br><span class="line">    np.random.seed(<span class="number">233</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># hyper parameters</span></span><br><span class="line">    z_dim = <span class="number">100</span></span><br><span class="line">    epochs = <span class="number">3000000</span></span><br><span class="line">    batch_size = <span class="number">512</span></span><br><span class="line">    learning_rate = <span class="number">0.0005</span></span><br><span class="line">    is_training = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    img_path = glob.glob(<span class="string">&#x27;.\animefacedataset\images\*.jpg&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(img_path) &gt; <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    dataset, img_shape, _ = make_anime_dataset(img_path, batch_size)</span><br><span class="line">    <span class="built_in">print</span>(dataset, img_shape)</span><br><span class="line">    sample = <span class="built_in">next</span>(<span class="built_in">iter</span>(dataset))</span><br><span class="line">    <span class="built_in">print</span>(sample.shape, tf.reduce_max(sample).numpy(),</span><br><span class="line">          tf.reduce_min(sample).numpy())</span><br><span class="line">    dataset = dataset.repeat()</span><br><span class="line">    db_iter = <span class="built_in">iter</span>(dataset)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    generator = Generator() </span><br><span class="line">    generator.build(input_shape = (<span class="literal">None</span>, z_dim))</span><br><span class="line">    discriminator = Discriminator()</span><br><span class="line">    discriminator.build(input_shape=(<span class="literal">None</span>, <span class="number">64</span>, <span class="number">64</span>, <span class="number">3</span>))</span><br><span class="line">    z_sample = tf.random.normal([<span class="number">100</span>, z_dim])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    g_optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate, beta_1=<span class="number">0.5</span>)</span><br><span class="line">    d_optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate, beta_1=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line"><span class="comment"># 训练5次discriminator 再训练一次generator！！！不然就会出现像我一样的图</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            batch_z = tf.random.normal([batch_size, z_dim])</span><br><span class="line">            batch_x = <span class="built_in">next</span>(db_iter)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># train D</span></span><br><span class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">                d_loss, gp = d_loss_fn(generator, discriminator, batch_z, batch_x, is_training)</span><br><span class="line">            grads = tape.gradient(d_loss, discriminator.trainable_variables)</span><br><span class="line">            d_optimizer.apply_gradients(<span class="built_in">zip</span>(grads, discriminator.trainable_variables))</span><br><span class="line">        </span><br><span class="line">        batch_z = tf.random.normal([batch_size, z_dim])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            g_loss = g_loss_fn(generator, discriminator, batch_z, is_training)</span><br><span class="line">        grads = tape.gradient(g_loss, generator.trainable_variables)</span><br><span class="line">        g_optimizer.apply_gradients(<span class="built_in">zip</span>(grads, generator.trainable_variables))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> epoch % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(epoch, <span class="string">&#x27;d-loss:&#x27;</span>,<span class="built_in">float</span>(d_loss), <span class="string">&#x27;g-loss:&#x27;</span>, <span class="built_in">float</span>(g_loss),</span><br><span class="line">                  <span class="string">&#x27;gp:&#x27;</span>, <span class="built_in">float</span>(gp))</span><br><span class="line"></span><br><span class="line">            z = tf.random.normal([<span class="number">100</span>, z_dim])</span><br><span class="line">            fake_image = generator(z, training=<span class="literal">False</span>)</span><br><span class="line">            img_path = os.path.join(<span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;wgan-%d.png&#x27;</span>%epoch)</span><br><span class="line">            save_result(fake_image.numpy(), <span class="number">10</span>, img_path, color_mode=<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="datasetload-函数"><a href="#datasetload-函数" class="headerlink" title="datasetload 函数"></a>datasetload 函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_anime_dataset</span>(<span class="params">img_paths, batch_size, resize=<span class="number">64</span>, drop_remainder=<span class="literal">True</span>, shuffle=<span class="literal">True</span>, repeat=<span class="number">1</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @tf.function</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_map_fn</span>(<span class="params">img</span>):</span></span><br><span class="line">        img = tf.image.resize(img, [resize, resize])</span><br><span class="line">        <span class="comment"># img = tf.image.random_crop(img,[resize, resize])</span></span><br><span class="line">        <span class="comment"># img = tf.image.random_flip_left_right(img)</span></span><br><span class="line">        <span class="comment"># img = tf.image.random_flip_up_down(img)</span></span><br><span class="line">        img = tf.clip_by_value(img, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">        img = img / <span class="number">127.5</span> - <span class="number">1</span> <span class="comment">#-1~1</span></span><br><span class="line">        <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line">    dataset = disk_image_batch_dataset(img_paths,</span><br><span class="line">                                          batch_size,</span><br><span class="line">                                          drop_remainder=drop_remainder,</span><br><span class="line">                                          map_fn=_map_fn,</span><br><span class="line">                                          shuffle=shuffle,</span><br><span class="line">                                          repeat=repeat)</span><br><span class="line">    img_shape = (resize, resize, <span class="number">3</span>)</span><br><span class="line">    len_dataset = <span class="built_in">len</span>(img_paths) // batch_size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dataset, img_shape, len_dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_dataset</span>(<span class="params">dataset,</span></span></span><br><span class="line"><span class="params"><span class="function">                  batch_size,</span></span></span><br><span class="line"><span class="params"><span class="function">                  drop_remainder=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                  n_prefetch_batch=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                  filter_fn=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                  map_fn=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                  n_map_threads=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                  filter_after_map=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                  shuffle=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                  shuffle_buffer_size=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                  repeat=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># set defaults</span></span><br><span class="line">    <span class="keyword">if</span> n_map_threads <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        n_map_threads = multiprocessing.cpu_count()</span><br><span class="line">    <span class="keyword">if</span> shuffle <span class="keyword">and</span> shuffle_buffer_size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        shuffle_buffer_size = <span class="built_in">max</span>(batch_size * <span class="number">128</span>, <span class="number">2048</span>)  <span class="comment"># set the minimum buffer size as 2048</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># [*] it is efficient to conduct `shuffle` before `map`/`filter` because `map`/`filter` is sometimes costly</span></span><br><span class="line">    <span class="keyword">if</span> shuffle:</span><br><span class="line">        dataset = dataset.shuffle(shuffle_buffer_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> filter_after_map:</span><br><span class="line">        <span class="keyword">if</span> filter_fn:</span><br><span class="line">            dataset = dataset.<span class="built_in">filter</span>(filter_fn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> map_fn:</span><br><span class="line">            dataset = dataset.<span class="built_in">map</span>(map_fn, num_parallel_calls=n_map_threads)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># [*] this is slower</span></span><br><span class="line">        <span class="keyword">if</span> map_fn:</span><br><span class="line">            dataset = dataset.<span class="built_in">map</span>(map_fn, num_parallel_calls=n_map_threads)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> filter_fn:</span><br><span class="line">            dataset = dataset.<span class="built_in">filter</span>(filter_fn)</span><br><span class="line"></span><br><span class="line">    dataset = dataset.batch(batch_size, drop_remainder=drop_remainder)</span><br><span class="line"></span><br><span class="line">    dataset = dataset.repeat(repeat).prefetch(n_prefetch_batch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memory_data_batch_dataset</span>(<span class="params">memory_data,</span></span></span><br><span class="line"><span class="params"><span class="function">                              batch_size,</span></span></span><br><span class="line"><span class="params"><span class="function">                              drop_remainder=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                              n_prefetch_batch=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                              filter_fn=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                              map_fn=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                              n_map_threads=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                              filter_after_map=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                              shuffle=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                              shuffle_buffer_size=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                              repeat=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Batch dataset of memory data.</span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    memory_data : nested structure of tensors/ndarrays/lists</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dataset = tf.data.Dataset.from_tensor_slices(memory_data)</span><br><span class="line">    dataset = batch_dataset(dataset,</span><br><span class="line">                            batch_size,</span><br><span class="line">                            drop_remainder=drop_remainder,</span><br><span class="line">                            n_prefetch_batch=n_prefetch_batch,</span><br><span class="line">                            filter_fn=filter_fn,</span><br><span class="line">                            map_fn=map_fn,</span><br><span class="line">                            n_map_threads=n_map_threads,</span><br><span class="line">                            filter_after_map=filter_after_map,</span><br><span class="line">                            shuffle=shuffle,</span><br><span class="line">                            shuffle_buffer_size=shuffle_buffer_size,</span><br><span class="line">                            repeat=repeat)</span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disk_image_batch_dataset</span>(<span class="params">img_paths,</span></span></span><br><span class="line"><span class="params"><span class="function">                             batch_size,</span></span></span><br><span class="line"><span class="params"><span class="function">                             labels=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             drop_remainder=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             n_prefetch_batch=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             filter_fn=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             map_fn=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             n_map_threads=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             filter_after_map=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             shuffle=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             shuffle_buffer_size=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                             repeat=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Batch dataset of disk image for PNG and JPEG.</span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">        img_paths : 1d-tensor/ndarray/list of str</span></span><br><span class="line"><span class="string">        labels : nested structure of tensors/ndarrays/lists</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> labels <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        memory_data = img_paths</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        memory_data = (img_paths, labels)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_fn</span>(<span class="params">path, *label</span>):</span></span><br><span class="line">        img = tf.io.read_file(path)</span><br><span class="line">        img = tf.image.decode_jpeg(img, channels=<span class="number">3</span>)  <span class="comment"># fix channels to 3</span></span><br><span class="line">        <span class="keyword">return</span> (img,) + label</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> map_fn:  <span class="comment"># fuse `map_fn` and `parse_fn`</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">map_fn_</span>(<span class="params">*args</span>):</span></span><br><span class="line">            <span class="keyword">return</span> map_fn(*parse_fn(*args))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        map_fn_ = parse_fn</span><br><span class="line"></span><br><span class="line">    dataset = memory_data_batch_dataset(memory_data,</span><br><span class="line">                                        batch_size,</span><br><span class="line">                                        drop_remainder=drop_remainder,</span><br><span class="line">                                        n_prefetch_batch=n_prefetch_batch,</span><br><span class="line">                                        filter_fn=filter_fn,</span><br><span class="line">                                        map_fn=map_fn_,</span><br><span class="line">                                        n_map_threads=n_map_threads,</span><br><span class="line">                                        filter_after_map=filter_after_map,</span><br><span class="line">                                        shuffle=shuffle,</span><br><span class="line">                                        shuffle_buffer_size=shuffle_buffer_size,</span><br><span class="line">                                        repeat=repeat)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dataset</span><br></pre></td></tr></table></figure><p>1000epoch之后是这样</p><p><img src= "/img/lazyload.svg" data-src="https://cdn.jsdelivr.net/gh/dummerchen/My_Image_Bed01@master/img/20210227110619.png" alt="wgansample-1000"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>​    本来是想每一个经典网络都详细写的，但是感觉这样会导致太专业全是公式也不会有人去仔细看 <del>其实是我不会。</del>结果变成了现在这种类似板子的东西。<del>水博客才是原动力</del></p><p>​    终于体会到电脑的苦了，cpu占用率<em>99%</em> 还要开多线程同时爬图片…（虽然现在字都显示不出来了</p><p>这里就随便总结一下学习的经验：</p><h3 id="代码方面"><a href="#代码方面" class="headerlink" title="代码方面"></a>代码方面</h3><ul><li>keras.build(inputs_shape)：这里最好是使用tuple形式表示不然会报奇怪的错，tensorflow和pytorch不同这方面更加严格。</li><li>tf.losses： 这个模块里的函数大小写不同功能也是不同的，<del>具体可以看官网</del>，如果用complie建议用大写的函数，自定义loss使用小写的函数</li><li>sigmod和softmax： 当’分类’事物不完全相互独立可以使用sigmod否则softmax，softmax一定要onehot </li><li>model.save：这个因为保存了网络结构只能用在纯自定义网络里，继承类是不行的。</li><li>layers.BatchNormalization:：这个函数有一个trainable参数,train=True|None，test=False|0,具体可以看源码说明，但是千万要设置正确<a href="http://www.cainiaoxueyuan.com/suanfa/11644.html">原因可参考这里</a></li><li>layers.Flatten与Dense：flatten只是单纯的reshape维度是固定的，Dense还作了一次全连接</li></ul><h3 id="网络等方面"><a href="#网络等方面" class="headerlink" title="网络等方面"></a>网络等方面</h3><p>​    可以从代码中看出现有的几种网络构建格式。当初我也纠结了许多，最后还是准备使用gan网络的格式，毕竟框架好用是好用，但这是牺牲‘自由’换来的，对后期自主构建网络可能会起到反效果。<del>每个人喜好不同，也不用太参考我的建议。</del></p><p>​    k折验证等trick是视频里没有讲的（视频参考下面的学习资源），可以自己去看看相关trick。</p><h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><p><del>我才不是看到Gan可以随机生成老婆才想学Gan的</del></p><p>日月光华的《tensorflow入门学习与实战的》资源弄不到，可惜了免费课程讲的确实好就是太贵了。</p><p>就跟着<a href="https://github.com/dragen1860/Deep-Learning-with-TensorFlow-book">龙书</a>学Gan顺便复习了一遍经典网络，顺便附上<a href="https://www.bilibili.com/video/BV1tE411Z78A?p=3">李宏毅讲解的Gan网络</a>（每次看完这种视频都感觉概率论白学了，建议李宏毅的可以先看一半再看龙书。</p><p>emmm，再附上别人整理的<a href="https://leemeng.tw/deep-learning-resources.html">深度学习路线</a>吧 <del>应该不会有人看的完</del></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北斗文献综述</title>
      <link href="/p/60871.html"/>
      <url>/p/60871.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    我国北斗卫星导航系统是中国自行研制的<a href="https://baike.baidu.com/item/全球卫星导航系统">全球卫星导航系统</a>，现在已经全部组网。北斗也是继GPS、GLONASS之后的第三个成熟的卫星导航系统。北斗卫星导航系统（BDS）和美国GPS、俄罗斯GLONASS、欧盟GALILEO，是联合国卫星导航委员会已认定的供应商。</p><p>​    北斗卫星导航系统由空间段、地面段和用户段三部分组成，可在全球范围内全天候、全天时为各类用户提供高精度、高可靠<a href="https://baike.baidu.com/item/定位/16912011">定位</a>、<a href="https://baike.baidu.com/item/导航">导航</a>、<a href="https://baike.baidu.com/item/授时">授时</a>服务，并且具备短报文<a href="https://baike.baidu.com/item/通信/300982">通信</a>能力，已经初步具备区域导航、定位和授时能力，<a href="https://baike.baidu.com/item/定位精度">定位精度</a>为分米、厘米级别，测速精度0.2米/秒，授时精度10纳秒。</p><p>​    与GPS系统对比：</p><p>​    <strong>1、覆盖范围：</strong>北斗导航系统是覆盖我国本土的区域导航系统。覆盖范围东经约70°一140°，北纬5°一55°。GPS是覆盖全球的全天候导航系统。能够确保地球上任何地点、任何时间能同时观测到6-9颗卫星(实际上最多能观测到11颗)。</p><p>​    <strong>2、卫星数量和轨道特性：</strong>北斗导航系统是在地球赤道平面上设置2颗地球同步卫星颗卫星的赤道角距约60°。GPS是在6个轨道平面上设置24颗卫星，轨道赤道倾角55°，轨道面赤道角距60°。航卫星为准同步轨道，绕地球一周11小时58分。</p><p>​    <strong>3、定位原理</strong>：北斗导航系统是主动式双向测距二维导航。地面中心控制系统解算，供用户三维定位数据。GPS是被动式伪码单向测距三维导航。由用户设备独立解算自位解算在那里而不是由用户设备完成的。为了弥补这种系统易损性，GPS正在发展星际横向数据链技术，使万一主控站被毁后GPS卫星可以独立运行。而“北斗一号”系统从原理上排除了这种可能性，一旦中心控制系统受损，系统就不能继续工作了。</p><p>​    <strong>4、实时性</strong>：“北斗一号”用户的定位申请要送回中心控制系统，中心控制系统解算出用户的三维位置数据之后再发回用户，其间要经过地球静止卫星走一个来回，再加上卫星转发，中心控制系统的处理，时间延迟就更长了，因此对于高速运动体，就加大了定位的误差。此外，“北斗一号”卫星导航系统也有一些自身的特点，其具备的短信通讯功能就是GPS所不具备的。</p><h1 id="国内研究现状"><a href="#国内研究现状" class="headerlink" title="国内研究现状"></a>国内研究现状</h1><h2 id="交通运输-1"><a href="#交通运输-1" class="headerlink" title="交通运输 1"></a>交通运输<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></h2><p>​    交通运输业属于北斗系统最为核心的民用领域,是深入落实我国核心发展战略的前提条件。 对此,深入研究交通运输业中北斗卫星的导航系统的应用及其展望,对交通强国建设发展有着一定积极意义与现实作用,需得到国内交通运输及相应行业的广泛重视与关注。 </p><ul><li><p>道路运输: </p><blockquote><p>​    通过北斗开发的应用,道路运管部即可通过此平台来进行车辆信息查询,包含着车主位置信息、姓名、电话等,实时化了解行驶车速与方向,以对车辆实际行驶状态进行综合监控。并且利用北斗的高性能能够面向全国范围内自定义某区域车辆,并发布禁行或者路况等信息通知。同时对于运载贵重物品的车辆还可以达到实时全面监控的效果。 在城市或铁路交通方面，通过北斗还可以减少车量等待间隔时间，从而减少运输成本，提高运输效率，交通安全。</p></blockquote></li><li><p>海上搜救:</p><blockquote><p>通过报警通信、遇险定位、搜救指挥等各种技术手段，通过北斗卫星船装载终端自动把附带着定位信息的求救短信通过卫星发给岸上的救援队，实现了GPS+海事卫星电话的功能，能够为海上遇险类提供更多报警手段,救援力量科学调度得以有效促进,为开展移动式搜救及现场指挥操作提供了强大的技术支持力量。</p></blockquote></li><li><p>信息查询方面：</p><blockquote><p>​    基于北斗定位，通过对类型、好评等进行筛选。用户通过语音或者屏幕键盘输入加油站，医院等固定地点的信息，迅速地查询目标，其查询的结果可以通过文字或者图像两种形式进行显示，并且使人们可以轻易查询到最短路线、当前距离等信息。</p></blockquote></li></ul><h2 id="灾害预警"><a href="#灾害预警" class="headerlink" title="灾害预警"></a>灾害预警</h2><p>​     北斗卫星导航系统能够发挥精准定位的功能优势，快速确定灾害发生地的精确坐标，并据此划定需要接 收应急预警信息的特定区域，有针对性地向精准群体发布应急预警信息。并且卫星导航系统可以提供冗余的通信渠道，以向人们传播有关即将发生的危险和灾难风险的关键安全信息和警告消息。<sup><a href="#fn_ 2" id="reffn_ 2"> 2</a></sup> </p><h2 id="其他方面"><a href="#其他方面" class="headerlink" title="其他方面"></a>其他方面</h2><ul><li><p>智能定位器：</p><blockquote><p>​    主要通过在北斗高精度的定位功能，配合移动端app的指令实现一系列定位功能，比如智能放牧<sup><a href="#fn_ 3" id="reffn_ 3"> 3</a></sup>,宠物防丢器设计<sup><a href="#fn_ 4" id="reffn_ 4"> 4</a></sup>,远程定位老年痴呆患者<sup><a href="#fn_ 5" id="reffn_ 5"> 5</a></sup>，共享物流箱<sup><a href="#fn_ 6" id="reffn_ 6"> 6</a></sup>，清洁机器人<sup><a href="#fn_ 7" id="reffn_ 7"> 7</a></sup>等。 </p></blockquote></li><li><p>智能小车环境测试系统<sup><a href="#fn_ 8" id="reffn_ 8"> 8</a></sup>：</p><blockquote><p>​    由于GPS成本提高，智能车成本使用十分高昂，但是基于北斗导航的导航定位、无线通信及低成本传感器的环境检测智能车系统，不仅提高了对复杂环境检测的能力，并且还降低了环境检测智能车的推广使用成本。</p></blockquote></li><li><p>农作物生长监控<sup><a href="#fn_ 9" id="reffn_ 9"> 9</a></sup>：</p><blockquote><p>农业生产中，农作物成长周期较长，其生长情况受到天气条件、土壤、水源以及施肥量等多种因素影 响。 在此过程中，针对农作物进行必要监控，强化种植过程管理工作，具有重要意义和价值。而BDS 系统的应用，可利用卫星定位技术发现目标农作物， 期间利用传感器装置传递农作物生长、病虫害信息。提升对农作物成长环境的技术监控，并对生产管理决策提供技术支撑。</p></blockquote></li><li><p>基于5G和北斗的自动化：</p><blockquote><p>基于 5G+ 北斗的高精度定位系统<sup><a href="#fn_ 10" id="reffn_ 10"> 10</a></sup>建成后，大幅降低北斗高精度应用的 技术门槛和成本门槛，推动北斗高精度应用从专业领域走向 大众，并为城市规划、国 土 测 绘 、地 籍 管理、 城乡建设、 环境监测、 防灾减灾、 交通监控等各类不同行业用户和应用提供毫米级、 厘米级、分米级的高精度位置支持，为国家经济和社会发 展注入新的活力。 通过5G的低延时和北斗的高精度定位和地图，自动驾驶，清洁机器等一系列概念重新被重视<sup><a href="#fn_ 11" id="reffn_ 11"> 11</a></sup><sup><a href="#fn_ 12" id="reffn_ 12"> 12</a></sup>。</p></blockquote></li></ul><h1 id="总结及展望"><a href="#总结及展望" class="headerlink" title="总结及展望"></a>总结及展望</h1><p>​    由以上研究方面可见，国内对于北斗的交通运输研究已经区域成熟，但是灾害预警方面可能限于现有灾害预警准确度的原因还是不够深入，有待开发，此外，北斗与5G结合已经是必然趋势，随着5G的发展和北斗的问世，机械自动化必然更能够趋于成熟。可以相信在未来，凭借北斗与5G无人机等小型便携机械的优势会被有效的发挥，为人民提供便利。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote id="fn_ 1"><sup> 1</sup>.  杨秀锋.浅谈北斗卫星导航系统在交通运输行业的应用及展望.科技风,2020, (3):89.<a href="#reffn_ 1" title="Jump back to footnote [ 1] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 2"><sup> 2</sup>.  罗政.北斗卫星导航系统在应急预警信息发布中的应用.数字通信世界,2020, (2):27-28.<a href="#reffn_ 2" title="Jump back to footnote [ 2] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 3"><sup> 3</sup>. 王雅琴,曾逸翔,肖遥.基于北斗导航的智能牧导系统.农村经济与科技,2020, 31(22):4-6.<a href="#reffn_ 3" title="Jump back to footnote [ 3] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 4"><sup> 4</sup>. 汤致远,沈亮,余子龙等.基于北斗的智能宠物防丢器设计.物联网技术,2020, 10(11):89-90,93.<a href="#reffn_ 4" title="Jump back to footnote [ 4] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 5"><sup> 5</sup>. 吴建章,周缤灿,黄文乐.北斗卫星智能远程定位老年痴呆患者科学与财富.2016, (3):433-433.<a href="#reffn_ 5" title="Jump back to footnote [ 5] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 6"><sup> 6</sup>. 阮宏梁,卜晓斌,鲍秋杰.北斗定位智能共享物流箱系统设计.物流工程与管理.2020, 42(9):76-78.<a href="#reffn_ 6" title="Jump back to footnote [ 6] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 7"><sup> 7</sup>. 基龙鑫,袁练,荣忆宁等,于5G和北斗系统的高楼清洁机器人的设计和研究.通信电源技术,2020, 37(15):35-37.<a href="#reffn_ 7" title="Jump back to footnote [ 7] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 8"><sup> 8</sup>. 张树宁,王尔申,徐嵩等.基于北斗卫星导航的环境检测智能车系统设计.电子器件,2020, 43(5):1168-1172.<a href="#reffn_ 8" title="Jump back to footnote [ 8] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 9"><sup> 9</sup>. 郑巍 ,黄盛杰 ,陈智.北斗卫星导航系统在农业领域上的发展现状分析.农业装备技术,2020, 46(4):4-6.<a href="#reffn_ 9" title="Jump back to footnote [ 9] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 10"><sup> 10</sup>. 李金柱.一种基于5G+北斗的高精度定位系统.信息通信,2020, (1):85-86.<a href="#reffn_ 10" title="Jump back to footnote [ 10] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 11"><sup> 11</sup>. 宋思颖,徐纪曈,傅嘉滢 .“北斗3卫星系统+人工智能”构建未来智慧交通解决方案.中国航天.2018, (5):50-55.<a href="#reffn_ 11" title="Jump back to footnote [ 11] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 12"><sup> 12</sup>. 沈沛鸿 ,董强.一种基于5G+北斗的自动驾驶解决方案.信息通信,2020, (6):21-22.<a href="#reffn_ 12" title="Jump back to footnote [ 12] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 13"><sup> 13</sup>. 于利娟,宋荣权,曹伟.基于北斗系统的银行智能提款箱锁研究数码设计(上).2020, 9(3):60-61.<a href="#reffn_ 13" title="Jump back to footnote [ 13] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyecharts模板</title>
      <link href="/p/57635.html"/>
      <url>/p/57635.html</url>
      
        <content type="html"><![CDATA[<h1 id="pyecharts-Theme"><a href="#pyecharts-Theme" class="headerlink" title="pyecharts Theme"></a>pyecharts Theme</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LIGHT = <span class="string">&quot;light&quot;</span></span><br><span class="line">DARK = <span class="string">&quot;dark&quot;</span></span><br><span class="line">WHITE = <span class="string">&quot;white&quot;</span></span><br><span class="line">CHALK: <span class="built_in">str</span> = <span class="string">&quot;chalk&quot;</span></span><br><span class="line">ESSOS: <span class="built_in">str</span> = <span class="string">&quot;essos&quot;</span></span><br><span class="line">INFOGRAPHIC: <span class="built_in">str</span> = <span class="string">&quot;infographic&quot;</span></span><br><span class="line">MACARONS: <span class="built_in">str</span> = <span class="string">&quot;macarons&quot;</span></span><br><span class="line">PURPLE_PASSION: <span class="built_in">str</span> = <span class="string">&quot;purple-passion&quot;</span></span><br><span class="line">ROMA: <span class="built_in">str</span> = <span class="string">&quot;roma&quot;</span></span><br><span class="line">ROMANTIC: <span class="built_in">str</span> = <span class="string">&quot;romantic&quot;</span></span><br><span class="line">SHINE: <span class="built_in">str</span> = <span class="string">&quot;shine&quot;</span></span><br><span class="line">VINTAGE: <span class="built_in">str</span> = <span class="string">&quot;vintage&quot;</span></span><br><span class="line">WALDEN: <span class="built_in">str</span> = <span class="string">&quot;walden&quot;</span></span><br><span class="line">WESTEROS: <span class="built_in">str</span> = <span class="string">&quot;westeros&quot;</span></span><br><span class="line">WONDERLAND: <span class="built_in">str</span> = <span class="string">&quot;wonderland&quot;</span></span><br><span class="line">HALLOWEEN: <span class="built_in">str</span> = <span class="string">&quot;halloween&quot;</span></span><br></pre></td></tr></table></figure><p>个人比较喜欢chalk，infographic，purple-passion</p><h1 id="常用配置项"><a href="#常用配置项" class="headerlink" title="常用配置项"></a>常用配置项</h1><p><a href="https://pyecharts.org/#/zh-cn/">官网文档</a></p><h2 id="初始化配置项"><a href="#初始化配置项" class="headerlink" title="初始化配置项"></a>初始化配置项</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitOpts</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 图表画布宽度，css 长度单位。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    width: <span class="built_in">str</span> = <span class="string">&quot;900px&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 图表画布高度，css 长度单位。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    height: <span class="built_in">str</span> = <span class="string">&quot;500px&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 图表 ID，图表唯一标识，用于在多图表时区分。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    chart_id: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 渲染风格，可选 &quot;canvas&quot;, &quot;svg&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># # 参考 `全局变量` 章节</span></span></span></span><br><span class="line"><span class="params"><span class="class">    renderer: <span class="built_in">str</span> = RenderType.CANVAS,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 网页标题</span></span></span></span><br><span class="line"><span class="params"><span class="class">    page_title: <span class="built_in">str</span> = <span class="string">&quot;Awesome-pyecharts&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 图表主题</span></span></span></span><br><span class="line"><span class="params"><span class="class">    theme: <span class="built_in">str</span> = <span class="string">&quot;white&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 图表背景颜色</span></span></span></span><br><span class="line"><span class="params"><span class="class">    bg_color: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 远程 js host，如不设置默认为 https://assets.pyecharts.org/assets/&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 参考 `全局变量` 章节</span></span></span></span><br><span class="line"><span class="params"><span class="class">    js_host: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 画图动画初始化配置，参考 `global_options.AnimationOpts`</span></span></span></span><br><span class="line"><span class="params"><span class="class">    animation_opts: <span class="type">Union</span>[AnimationOpts, <span class="built_in">dict</span>] = AnimationOpts(<span class="params"></span>),</span></span></span><br><span class="line"><span class="params"><span class="class"></span>)</span></span><br></pre></td></tr></table></figure><h2 id="工具箱配置项"><a href="#工具箱配置项" class="headerlink" title="工具箱配置项"></a>工具箱配置项</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToolboxOpts</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 是否显示工具栏组件</span></span></span></span><br><span class="line"><span class="params"><span class="class">    is_show: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 工具栏 icon 的布局朝向。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 可选：&#x27;horizontal&#x27;, &#x27;vertical&#x27;</span></span></span></span><br><span class="line"><span class="params"><span class="class">    orient: <span class="built_in">str</span> = <span class="string">&quot;horizontal&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 工具栏组件离容器左侧的距离。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># left 的值可以是像 20 这样的具体像素值，可以是像 &#x27;20%&#x27; 这样相对于容器高宽的百分比，</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 也可以是 &#x27;left&#x27;, &#x27;center&#x27;, &#x27;right&#x27;。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 如果 left 的值为&#x27;left&#x27;, &#x27;center&#x27;, &#x27;right&#x27;，组件会根据相应的位置自动对齐</span></span></span></span><br><span class="line"><span class="params"><span class="class">    pos_left: <span class="built_in">str</span> = <span class="string">&quot;80%&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 工具栏组件离容器右侧的距离。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># right 的值可以是像 20 这样的具体像素值，可以是像 &#x27;20%&#x27; 这样相对于容器高宽的百分比。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    pos_right: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 工具栏组件离容器上侧的距离。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># top 的值可以是像 20 这样的具体像素值，可以是像 &#x27;20%&#x27; 这样相对于容器高宽的百分比，</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 也可以是 &#x27;top&#x27;, &#x27;middle&#x27;, &#x27;bottom&#x27;。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 如果 top 的值为&#x27;top&#x27;, &#x27;middle&#x27;, &#x27;bottom&#x27;，组件会根据相应的位置自动对齐。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    pos_top: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 工具栏组件离容器下侧的距离。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># bottom 的值可以是像 20 这样的具体像素值，可以是像 &#x27;20%&#x27; 这样相对于容器高宽的百分比。</span></span></span></span><br><span class="line"><span class="params"><span class="class">    pos_bottom: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="comment"># 各工具配置项，参考 `global_options.ToolBoxFeatureOpts`</span></span></span></span><br><span class="line"><span class="params"><span class="class">    feature: <span class="type">Union</span>[ToolBoxFeatureOpts, <span class="built_in">dict</span>] = ToolBoxFeatureOpts(<span class="params"></span>),</span></span></span><br><span class="line"><span class="params"><span class="class"></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 通常只用一个</span></span><br><span class="line"><span class="class">.<span class="title">set_global_opts</span>(<span class="params">toolbox_opts=opts.ToolboxOpts(<span class="params">is_show=<span class="literal">True</span></span>)</span>)</span></span><br></pre></td></tr></table></figure><h2 id="visualmap-opts"><a href="#visualmap-opts" class="headerlink" title="visualmap_opts"></a>visualmap_opts</h2><p>可以实现某一段一种颜色，相比较markline更简洁，在不连续数据中更常用。</p><ul><li>max, min在自定义颜色可以不用</li><li>如果要自定义颜色，需要is_piecewise=True，并且每一段都要设置颜色</li><li>也可以自定义颜色和透明度，range_color,range_opacity</li></ul><p>附上颜色渐变的好网站<a href="https://webgradients.com/">webgradients</a>和<a href="https://mycolor.space/?hex=%23E7E750&amp;sub=1">mycolor</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">visualmap_opts=opts.VisualMapOpts(</span><br><span class="line">    <span class="comment"># type_=&quot;color&quot;, max_=220, min_=0, dimension=1,</span></span><br><span class="line">    <span class="comment"># range_color=[&#x27;#F2FEDC&#x27;,&#x27;#E7E750&#x27;],</span></span><br><span class="line">    is_piecewise=<span class="literal">True</span>,</span><br><span class="line">    pieces=[&#123;<span class="string">&#x27;min&#x27;</span>:<span class="number">80</span>,<span class="string">&#x27;max&#x27;</span>:<span class="number">120</span>,<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;black&#x27;</span>&#125;]</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><p><strong>graph的点必须唯一，不然会报index的错误</strong></p><p>模板：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">links=[]</span><br><span class="line">nodes=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_graph_node</span>(<span class="params">nodename, position, category,symbol_size,symbol</span>):</span></span><br><span class="line">    one_node=opts.GraphNode(</span><br><span class="line">        name=nodename,</span><br><span class="line">        x=position[<span class="number">0</span>],</span><br><span class="line">        y=position[<span class="number">1</span>],</span><br><span class="line">        category=category,</span><br><span class="line">        symbol_size=symbol_size,</span><br><span class="line">        symbol=symbol,</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=<span class="literal">True</span>,position=<span class="string">&#x27;inside&#x27;</span>,color=<span class="string">&#x27;white&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> one_node</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_graph_link</span>(<span class="params">source,target,value,width</span>):</span></span><br><span class="line">    node_link=opts.GraphLink(</span><br><span class="line">        source=source,target=target,value=<span class="built_in">int</span>(value),</span><br><span class="line">        linestyle_opts=opts.LineStyleOpts(</span><br><span class="line">            <span class="comment"># 线宽</span></span><br><span class="line">            width=<span class="built_in">int</span>(width),</span><br><span class="line">            <span class="comment"># 线的弯曲程度</span></span><br><span class="line">            curve=<span class="number">0.3</span>,</span><br><span class="line">            <span class="comment"># 线的透明度</span></span><br><span class="line">            opacity=<span class="string">&quot;0.7&quot;</span>,</span><br><span class="line">            <span class="comment"># 线的颜色</span></span><br><span class="line">            color=<span class="string">&#x27;grey&#x27;</span>,</span><br><span class="line">        ),</span><br><span class="line">        label_opts=opts.LabelOpts(</span><br><span class="line">            is_show=<span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> node_link</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">graph=(</span><br><span class="line">    ct.Graph(</span><br><span class="line">        init_opts=opts.InitOpts(</span><br><span class="line">            bg_color=<span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">    )</span><br><span class="line">    .add(</span><br><span class="line">            <span class="string">&quot;&quot;</span>,nodes,links,</span><br><span class="line">            categories=category,</span><br><span class="line">            repulsion=<span class="number">800</span>,</span><br><span class="line">            edge_symbol=[<span class="string">&#x27;circle&#x27;</span>,<span class="string">&#x27;arrow&#x27;</span>],</span><br><span class="line">            layout=<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">            edge_length=<span class="number">500</span>,</span><br><span class="line">            </span><br><span class="line">            itemstyle_opts=opts.ItemStyleOpts(opacity=<span class="number">0.7</span>)</span><br><span class="line">        )</span><br><span class="line">    .set_global_opts(toolbox_opts=opts.ToolboxOpts(is_show=<span class="literal">True</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">graph.render_notebook()</span><br><span class="line"><span class="comment"># graph.render(&#x27;1.html&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Radar"><a href="#Radar" class="headerlink" title="Radar"></a>Radar</h1><p>模板</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">radar=(</span><br><span class="line">    ct.Radar(init_opts=opts.InitOpts(width=<span class="string">&quot;860px&quot;</span>, height=<span class="string">&quot;720px&quot;</span>,bg_color=<span class="string">&quot;white&quot;</span>))</span><br><span class="line">    .add_schema(</span><br><span class="line">        schema=[</span><br><span class="line">            opts.RadarIndicatorItem(name=<span class="string">&quot;主因子1&quot;</span>, max_=<span class="number">2</span>,min_=-<span class="number">2</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=<span class="string">&quot;主因子2&quot;</span>, max_=<span class="number">3</span>,min_=-<span class="number">2</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=<span class="string">&quot;主因子3&quot;</span>, max_=<span class="number">0</span>,min_=-<span class="number">2</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=<span class="string">&quot;主因子4&quot;</span>, max_=<span class="number">0</span>,min_=-<span class="number">1</span>),</span><br><span class="line">            opts.RadarIndicatorItem(name=<span class="string">&quot;主因子5&quot;</span>, max_=<span class="number">0</span>,min_=-<span class="number">0.1</span>),</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment"># 改变位置，但是有Page的话可以去掉</span></span><br><span class="line">        center=[<span class="string">&quot;50%&quot;</span>, <span class="string">&quot;50%&quot;</span>],</span><br><span class="line">        <span class="comment"># 分隔线设置，感觉对雷达图没用</span></span><br><span class="line">        splitarea_opt=opts.SplitAreaOpts(</span><br><span class="line">            is_show=<span class="literal">True</span>, areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">1</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment"># 文本设置</span></span><br><span class="line">        textstyle_opts=opts.TextStyleOpts(color=<span class="string">&quot;black&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    .add(</span><br><span class="line">        series_name=<span class="string">&quot;Huskies15&quot;</span>,</span><br><span class="line">        data=hus15,</span><br><span class="line">        <span class="comment"># 线型设置</span></span><br><span class="line">        linestyle_opts=opts.LineStyleOpts(color=<span class="string">&quot;#CD0000&quot;</span>,width=<span class="number">2</span>,opacity=<span class="number">0.5</span>),</span><br><span class="line">        <span class="comment"># 区域颜色设置</span></span><br><span class="line">        areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">0.5</span>,color=<span class="string">&#x27;#CD0000&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    .add(</span><br><span class="line">        series_name=<span class="string">&quot;Oppen15&quot;</span>,</span><br><span class="line">        data=opp15,</span><br><span class="line">        linestyle_opts=opts.LineStyleOpts(color=<span class="string">&quot;#5CACEE&quot;</span>,width=<span class="number">2</span>,opacity=<span class="number">0.5</span>),</span><br><span class="line">        areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">0.5</span>,color=<span class="string">&#x27;#5CACEE&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="literal">True</span>,color=<span class="string">&#x27;black&#x27;</span>))</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;队伍能力比较&quot;</span>), legend_opts=opts.LegendOpts()</span><br><span class="line">    )</span><br><span class="line">    .render(<span class="string">&quot;radar_chart.html&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h1><p>要注意的是x轴的type，不光是list，list里面还必须是<strong>有序的python int类型</strong>或<strong>string类型</strong></p><p><del>numpy.int32都识别不了</del></p><p>如果x是数字，要指定type_=value(默认是category)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> charts <span class="keyword">as</span> ct</span><br><span class="line">y=[<span class="number">6.106</span>,<span class="number">6.037</span>,<span class="number">5.934</span>,<span class="number">5.967</span>,<span class="number">5.955</span>,<span class="number">6.024</span>,<span class="number">6.031</span>,<span class="number">5.825</span>,<span class="number">5.740</span>,<span class="number">5.700</span>]</span><br><span class="line">year=[<span class="string">&#x27;1920&#x27;</span>,<span class="string">&#x27;1930&#x27;</span>,<span class="string">&#x27;1940&#x27;</span>,<span class="string">&#x27;1950&#x27;</span>,<span class="string">&#x27;1960&#x27;</span>,<span class="string">&#x27;1970&#x27;</span>,<span class="string">&#x27;1980&#x27;</span>,<span class="string">&#x27;1990&#x27;</span>,<span class="string">&#x27;2000&#x27;</span>,<span class="string">&#x27;2010&#x27;</span>]</span><br><span class="line">line=(</span><br><span class="line">    ct.Line(init_opts=opts.InitOpts(bg_color=<span class="string">&#x27;white&#x27;</span>))</span><br><span class="line">    .add_xaxis(xaxis_data=year)</span><br><span class="line">    .add_yaxis(</span><br><span class="line">            series_name=i,</span><br><span class="line">            y_axis=y,</span><br><span class="line">            <span class="comment"># 连线是否平滑</span></span><br><span class="line">            is_smooth=<span class="literal">False</span>,</span><br><span class="line">            <span class="comment"># 是否显示点</span></span><br><span class="line">            is_symbol_show=<span class="literal">True</span>,</span><br><span class="line">            <span class="comment"># 点的形状样式</span></span><br><span class="line">            symbol=<span class="string">&quot;circle&quot;</span>,</span><br><span class="line">            <span class="comment"># 大小</span></span><br><span class="line">            symbol_size=<span class="number">10</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 点上方标签的样式</span></span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="literal">True</span>,font_size=<span class="number">13</span>,position=<span class="string">&quot;top&quot;</span>, color=<span class="string">&quot;#2F4858&quot;</span>),</span><br><span class="line">            <span class="comment"># 点的风格样式</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 放上去是否显示坐标</span></span><br><span class="line">            tooltip_opts=opts.TooltipOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">            title_opts=opts.TitleOpts(</span><br><span class="line">                title=<span class="string">&quot;1920-2020 music score trend &quot;</span>,</span><br><span class="line">                pos_top=<span class="string">&quot;5%&quot;</span>,</span><br><span class="line">                pos_left=<span class="string">&quot;center&quot;</span>,</span><br><span class="line">                title_textstyle_opts=opts.TextStyleOpts(font_size=<span class="number">16</span>,color=<span class="string">&#x27;#2F4858&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">            xaxis_opts=opts.AxisOpts(</span><br><span class="line">                boundary_gap=<span class="literal">True</span>,</span><br><span class="line">                axisline_opts=opts.AxisLineOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                <span class="comment"># axistick_opts=opts.AxisTickOpts(</span></span><br><span class="line">                <span class="comment">#     is_show=True,</span></span><br><span class="line">                <span class="comment">#     length=25,</span></span><br><span class="line">                <span class="comment"># ),</span></span><br><span class="line">                splitline_opts=opts.SplitLineOpts(</span><br><span class="line">                    is_show=<span class="literal">True</span></span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">            yaxis_opts=opts.AxisOpts(</span><br><span class="line">                type_=<span class="string">&quot;value&quot;</span>,</span><br><span class="line">                position=<span class="string">&quot;left&quot;</span>,</span><br><span class="line">                <span class="comment"># max_=6.2,</span></span><br><span class="line">                <span class="comment">#min_=5.5,</span></span><br><span class="line">            ),</span><br><span class="line">            toolbox_opts=opts.ToolboxOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">            legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line">)</span><br><span class="line">line.render_notebook()</span><br></pre></td></tr></table></figure><h1 id="Scatter"><a href="#Scatter" class="headerlink" title="Scatter"></a>Scatter</h1><p>和line差不多，就少了几个配置项（linestyle,areastyle..)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scatter=(</span><br><span class="line">         ct.Scatter(init_opts=opts.InitOpts(bg_color=<span class="string">&#x27;white&#x27;</span> ,theme=ThemeType.LIGHT))</span><br><span class="line">        .add_xaxis(</span><br><span class="line">            xaxis_data=pinf_list[:<span class="number">3500</span>],</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        .add_yaxis(</span><br><span class="line">            series_name=<span class="string">&quot;&quot;</span>,</span><br><span class="line">            y_axis=artist_list[:<span class="number">3500</span>],</span><br><span class="line">            symbol_size=<span class="number">10</span>,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">            tooltip_opts=opts.TooltipOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">            markline_opts=opts.MarkLineOpts(</span><br><span class="line">                data=[</span><br><span class="line">                    opts.MarkLineItem(x=<span class="number">0.5</span>,symbol=[<span class="string">&#x27;None&#x27;</span>,<span class="string">&#x27;None&#x27;</span>])],</span><br><span class="line">                linestyle_opts=opts.LineStyleOpts(width=<span class="number">2</span>,type_=<span class="string">&#x27;dashed&#x27;</span>,color=<span class="string">&#x27;#2F4858&#x27;</span>),</span><br><span class="line">                ),</span><br><span class="line">                </span><br><span class="line">        )</span><br><span class="line">        .set_global_opts(</span><br><span class="line">            title_opts=opts.TitleOpts(</span><br><span class="line">                title=<span class="string">&quot;Influencer and Genre affect&quot;</span>,</span><br><span class="line">                pos_left=<span class="string">&quot;center&quot;</span>,</span><br><span class="line">                title_textstyle_opts=opts.TextStyleOpts(color=<span class="string">&quot;#ED6087&quot;</span>, font_size=<span class="number">16</span>),</span><br><span class="line">            ),</span><br><span class="line">            xaxis_opts=opts.AxisOpts(</span><br><span class="line">                type_=<span class="string">&quot;value&quot;</span>, splitline_opts=opts.SplitLineOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">                boundary_gap=<span class="literal">False</span>,</span><br><span class="line">            ),</span><br><span class="line">            yaxis_opts=opts.AxisOpts(</span><br><span class="line">                type_=<span class="string">&quot;value&quot;</span>,</span><br><span class="line">                position=<span class="string">&quot;left&quot;</span>,</span><br><span class="line">                axislabel_opts=opts.LabelOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                axistick_opts=opts.AxisTickOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                splitline_opts=opts.SplitLineOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">            ),</span><br><span class="line">            toolbox_opts=opts.ToolboxOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">            legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="Bar"><a href="#Bar" class="headerlink" title="Bar"></a>Bar</h1><h2 id="2DBar"><a href="#2DBar" class="headerlink" title="2DBar"></a>2DBar</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">bar=(</span><br><span class="line">    ct.Bar(<span class="attribute">init_opts</span>=opts.InitOpts(bg_color=&#x27;white&#x27;))</span><br><span class="line">    .add_xaxis(<span class="attribute">xaxis_data</span>=idx)</span><br><span class="line">    .add_yaxis(</span><br><span class="line">            <span class="string">&#x27;进港航班数&#x27;</span>,</span><br><span class="line">            jg,</span><br><span class="line">            </span><br><span class="line">            # 点上方标签的样式</span><br><span class="line">            <span class="attribute">label_opts</span>=opts.LabelOpts(is_show=True,font_size=13,position=&quot;top&quot;),</span><br><span class="line">            # 放上去是否显示坐标</span><br><span class="line">            <span class="attribute">tooltip_opts</span>=opts.TooltipOpts(is_show=True),</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">            <span class="attribute">title_opts</span>=opts.TitleOpts(</span><br><span class="line">                <span class="attribute">title</span>=<span class="string">&quot;8.22 日进港航班数&quot;</span>,</span><br><span class="line">                <span class="attribute">pos_top</span>=<span class="string">&quot;5%&quot;</span>,</span><br><span class="line">                <span class="attribute">pos_left</span>=<span class="string">&quot;center&quot;</span>,</span><br><span class="line">                <span class="attribute">title_textstyle_opts</span>=opts.TextStyleOpts(font_size=16),</span><br><span class="line">            ),</span><br><span class="line">            <span class="attribute">xaxis_opts</span>=opts.AxisOpts(</span><br><span class="line">                <span class="attribute">boundary_gap</span>=<span class="literal">True</span>,</span><br><span class="line">                <span class="attribute">axisline_opts</span>=opts.AxisLineOpts(is_show=False),</span><br><span class="line">                <span class="attribute">splitline_opts</span>=opts.SplitLineOpts(</span><br><span class="line">                    <span class="attribute">is_show</span>=<span class="literal">True</span></span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">            <span class="attribute">toolbox_opts</span>=opts.ToolboxOpts(is_show=True),</span><br><span class="line">            <span class="attribute">legend_opts</span>=opts.LegendOpts(is_show=False),</span><br><span class="line">        )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">bar.render_notebook()</span><br></pre></td></tr></table></figure><h2 id="3Dbar"><a href="#3Dbar" class="headerlink" title="3Dbar"></a>3Dbar</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bar3d=(</span><br><span class="line">    ct.Bar3D(init_opts=opts.InitOpts(bg_color=<span class="string">&#x27;white&#x27;</span>))</span><br><span class="line">    .add(</span><br><span class="line">        series_name=<span class="string">&quot;&quot;</span>,</span><br><span class="line">        data=data,</span><br><span class="line">        xaxis3d_opts=opts.Axis3DOpts(name=<span class="string">&#x27;xxx&#x27;</span>,type_=<span class="string">&quot;value&quot;</span>, data=v0),</span><br><span class="line">        yaxis3d_opts=opts.Axis3DOpts(name=<span class="string">&#x27;xxx&#x27;</span>,type_=<span class="string">&quot;value&quot;</span>, data=d),</span><br><span class="line">        zaxis3d_opts=opts.Axis3DOpts(type_=<span class="string">&quot;value&quot;</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(</span><br><span class="line">            max_=<span class="number">1</span>,</span><br><span class="line">            range_color=[</span><br><span class="line">                <span class="string">&quot;#313695&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#4575b4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#74add1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#abd9e9&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#e0f3f8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#ffffbf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#fee090&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#fdae61&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#f46d43&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#d73027&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#a50026&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">bar3d.render_notebook()</span><br></pre></td></tr></table></figure><h1 id="Heatmap"><a href="#Heatmap" class="headerlink" title="Heatmap"></a>Heatmap</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">heatmap=(</span><br><span class="line">    ct.HeatMap(init_opts=opts.InitOpts(bg_color=<span class="string">&#x27;white&#x27;</span>))</span><br><span class="line">    .add_xaxis(t)</span><br><span class="line">    .add_yaxis(</span><br><span class="line">        series_name=<span class="string">&quot;&quot;</span>,</span><br><span class="line">        yaxis_data=[<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">150</span>)],</span><br><span class="line">        value=y,</span><br><span class="line">        <span class="comment"># label_opts=opts.LabelOpts(is_show=True,font_size=13,position=&quot;top&quot;),</span></span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">&quot;蓄车池数量对决策的影响&quot;</span>,pos_left=<span class="string">&#x27;40%&#x27;</span>),</span><br><span class="line">        xaxis_opts=opts.AxisOpts(</span><br><span class="line">            name=<span class="string">&#x27;时间&#x27;</span>,</span><br><span class="line">            type_=<span class="string">&quot;category&quot;</span>,</span><br><span class="line">            splitarea_opts=opts.SplitAreaOpts(</span><br><span class="line">                is_show=<span class="literal">True</span>, areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">1</span>)</span><br><span class="line">            ),</span><br><span class="line">        ),</span><br><span class="line">        yaxis_opts=opts.AxisOpts(</span><br><span class="line">            name=<span class="string">&#x27;蓄车池数量&#x27;</span>,</span><br><span class="line">            type_=<span class="string">&quot;category&quot;</span>,</span><br><span class="line">            splitarea_opts=opts.SplitAreaOpts(</span><br><span class="line">                is_show=<span class="literal">True</span>, areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">0.5</span>)</span><br><span class="line">            ),</span><br><span class="line">        ),</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(</span><br><span class="line">            max_=<span class="number">1</span>,</span><br><span class="line">            range_color=[</span><br><span class="line">                <span class="string">&quot;#e0f3f8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#ffffbf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;#fee090&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">        toolbox_opts=opts.ToolboxOpts(is_show=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">heatmap.render(<span class="string">&#x27;./pic/question2.html&#x27;</span>)s</span><br></pre></td></tr></table></figure><h1 id="Sunshine"><a href="#Sunshine" class="headerlink" title="Sunshine"></a>Sunshine</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data是这种json格式</span></span><br><span class="line">color=[<span class="string">&quot;#f89a80&quot;</span>,<span class="string">&quot;#f37674&quot;</span>,<span class="string">&quot;#e75b68&quot;</span>,<span class="string">&quot;#ef5a78&quot;</span>,<span class="string">&quot;#03a653&quot;</span>,<span class="string">&quot;#9ea718&quot;</span>,<span class="string">&quot;#d0b24f&quot;</span>,<span class="string">&quot;#8eb646&quot;</span>,<span class="string">&quot;#faef07&quot;</span></span><br><span class="line">           <span class="string">&quot;#8f1c53&quot;</span>,<span class="string">&quot;#b34039&quot;</span>,<span class="string">&quot;#8b6439&quot;</span>,<span class="string">&quot;#a2b029&quot;</span>,<span class="string">&quot;#718933&quot;</span>]</span><br><span class="line">data=[</span><br><span class="line">            &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;star Five&#x27;</span>,</span><br><span class="line">             <span class="string">&quot;itemStyle&quot;</span>: &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;#da0d68&quot;</span>&#125;,</span><br><span class="line">             <span class="string">&#x27;children&#x27;</span>:[</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;helpful_votes&#x27;</span>,</span><br><span class="line">                     <span class="comment"># itemstyle</span></span><br><span class="line">                     <span class="comment">#&#x27;value&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;children&#x27;</span>:[]</span><br><span class="line">                 &#125;,</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;unhelpful_votes&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;children&#x27;</span>:[]</span><br><span class="line">                 &#125;</span><br><span class="line">                ]</span><br><span class="line">             &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;star Four&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;itemStyle&quot;</span>: &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;#da1d23&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&#x27;children&#x27;</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;helpful_votes&#x27;</span>,</span><br><span class="line">                        <span class="comment"># itemstyle</span></span><br><span class="line">                        <span class="comment"># &#x27;value&#x27;</span></span><br><span class="line">                        <span class="string">&#x27;children&#x27;</span>: []</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;unhelpful_votes&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;children&#x27;</span>: []</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">             &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;star Three&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;itemStyle&quot;</span>: &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;#c94a44&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&#x27;children&#x27;</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;helpful_votes&#x27;</span>,</span><br><span class="line">                        <span class="comment"># itemstyle</span></span><br><span class="line">                        <span class="comment"># &#x27;value&#x27;</span></span><br><span class="line">                        <span class="string">&#x27;children&#x27;</span>: []</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;unhelpful_votes&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;children&#x27;</span>: []</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;star Two&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;itemStyle&quot;</span>: &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;#f7a128&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&#x27;children&#x27;</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;helpful_votes&#x27;</span>,</span><br><span class="line">                        <span class="comment"># itemstyle</span></span><br><span class="line">                        <span class="comment"># &#x27;value&#x27;</span></span><br><span class="line">                        <span class="string">&#x27;children&#x27;</span>: []</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;unhelpful_votes&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;children&#x27;</span>: []</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;star One&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;itemStyle&quot;</span>: &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;#ad213e&quot;</span>&#125;,</span><br><span class="line">                <span class="string">&#x27;children&#x27;</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;helpful_votes&#x27;</span>,</span><br><span class="line">                        <span class="comment"># itemstyle</span></span><br><span class="line">                        <span class="comment"># &#x27;value&#x27;</span></span><br><span class="line">                        <span class="string">&#x27;children&#x27;</span>: []</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;unhelpful_votes&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;children&#x27;</span>: []</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">          ]</span><br><span class="line"></span><br><span class="line">c = (</span><br><span class="line">        ct.Sunburst(</span><br><span class="line">            init_opts=opts.InitOpts(width=<span class="string">&quot;1000px&quot;</span>, height=<span class="string">&quot;600px&quot;</span>,bg_color=<span class="string">&#x27;white&#x27;</span>) )</span><br><span class="line">            .add(</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            data_pair=data,</span><br><span class="line">            highlight_policy=<span class="string">&quot;ancestor&quot;</span>,</span><br><span class="line">            radius=[<span class="number">0</span>, <span class="string">&quot;95%&quot;</span>],</span><br><span class="line">            sort_=<span class="string">&quot;null&quot;</span>,</span><br><span class="line">            levels=[</span><br><span class="line">                &#123;&#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;r0&quot;</span>: <span class="string">&quot;15%&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;r&quot;</span>: <span class="string">&quot;35%&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;itemStyle&quot;</span>: &#123;<span class="string">&quot;borderWidth&quot;</span>: <span class="number">2</span>&#125;,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: &#123;<span class="string">&quot;rotate&quot;</span>: <span class="string">&quot;tangential&quot;</span>&#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;<span class="string">&quot;r0&quot;</span>: <span class="string">&quot;35%&quot;</span>, <span class="string">&quot;r&quot;</span>: <span class="string">&quot;70%&quot;</span>, <span class="string">&quot;label&quot;</span>: &#123;<span class="string">&quot;align&quot;</span>: <span class="string">&quot;right&quot;</span>&#125;&#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;r0&quot;</span>: <span class="string">&quot;70%&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;r&quot;</span>: <span class="string">&quot;72%&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: &#123;<span class="string">&quot;position&quot;</span>: <span class="string">&quot;outside&quot;</span>, <span class="string">&quot;padding&quot;</span>: <span class="number">3</span>, <span class="string">&quot;silent&quot;</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">                    <span class="string">&quot;itemStyle&quot;</span>: &#123;<span class="string">&quot;borderWidth&quot;</span>: <span class="number">3</span>&#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">        )</span><br><span class="line">            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;Sunburst-官方示例&quot;</span>))</span><br><span class="line">            .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">&quot;&#123;b&#125;&quot;</span>))</span><br><span class="line">            .set_global_opts(toolbox_opts=opts.ToolboxOpts(is_show=<span class="literal">True</span>))</span><br><span class="line">            .render(<span class="string">&quot;hairdryer.html&quot;</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h1 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h1><h2 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h2><p>本来只能垂直叠加，但是根据初始化的width，height也可以达到水平布局的效果，但是通过<strong>Page.DraggablePageLayout布局可以实现任意位置、大小布局</strong>，简称神器。</p><p>但是如果有背景色图表重叠时会相互覆盖，此时效果不如grid，背景透明时，图表覆盖则不会产生问题，优于grid。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用浏览器打开渲染后的 .html 文件，默认为 render.html。拖拉/调整图表位置和大小，当调整到一个适合</span></span><br><span class="line"><span class="comment"># 的布局时，点击左上方的 `Save Config` 按钮，下载 chart_config.json 配置文件，假设存放位置为</span></span><br><span class="line"><span class="comment"># ~/chart_config.json。再次渲染图表并指定其布局配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Warning: 请注释掉上面的的所有渲染代码，就是以下三行。因为 html 已经生成，并不需要再重新渲染一遍。</span></span><br><span class="line">page=ct.Page(layout=ct.Page.DraggablePageLayout)</span><br><span class="line">page.add(Radar15(),Radar9())</span><br><span class="line">page.render(<span class="string">&#x27;render.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># render.html：第一步生成的原 html 文件</span></span><br><span class="line"><span class="comment"># chart_config.json：第二步下载的配置文件</span></span><br><span class="line"><span class="comment"># my_new_charts.html：新 html 文件路径</span></span><br><span class="line">Page.save_resize_html(<span class="string">&quot;render.html&quot;</span>, cfg_file=<span class="string">&quot;path/chart_config.json&quot;</span>, dest=<span class="string">&quot;my_new_charts.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者可以使用 json 数据</span></span><br><span class="line"><span class="comment"># cfg_dict 为 json 文件里面的内容</span></span><br><span class="line">Page.save_resize_html(<span class="string">&quot;render.html&quot;</span>, cfg_dict=cfg_dict, dest=<span class="string">&quot;my_new_charts.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Question：能否复用渲染模板？</span></span><br><span class="line"><span class="comment"># Answer: 可以的，渲染配置 json 数据中是以 chart_id 来作为一个图形的唯一标识符的，所以只需要在</span></span><br><span class="line"><span class="comment"># 第一次渲染的时候指定 chart_id 就可以啦。</span></span><br><span class="line"><span class="comment"># example:</span></span><br><span class="line"><span class="comment"># bar = bar_datazoom_slider()</span></span><br><span class="line"><span class="comment"># bar.chart_id = &quot;1&quot;</span></span><br><span class="line"><span class="comment"># line = line_markpoint()</span></span><br><span class="line"><span class="comment"># line.chart_id = &quot;2&quot;</span></span><br><span class="line"><span class="comment"># pie = pie_rosetype()</span></span><br><span class="line"><span class="comment"># pie.chart_id = &quot;3&quot;</span></span><br><span class="line"><span class="comment"># 然后只要以后都按这个 chart_id 来渲染图表的时候，你的布局配置就可以复用啦。</span></span><br><span class="line"><span class="comment"># cat chart_config.json，会发现 chart_id 是固定的啦。</span></span><br></pre></td></tr></table></figure><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p>​    grid布局一定需要一个有坐标轴的图，如果都没有坐标轴，比如玫瑰图，可以通过设置center参数实现布局</p><p>对于不需要初始就显示完美图的可以使用Page.DraggablePageLayout手动调整位置，更为方便。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyecharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-sakura 安装twikoo</title>
      <link href="/p/64378.html"/>
      <url>/p/64378.html</url>
      
        <content type="html"><![CDATA[<h1 id="why-twikoo-？"><a href="#why-twikoo-？" class="headerlink" title="why twikoo ？"></a>why twikoo ？</h1><blockquote><p>操作简单，配置方便小白友好。<del>valine各种自己改配置</del></p><p>基于腾讯云开发，安全有保障。</p><p>valine和artitalk兼容性并不是很好…</p><p>valine v1.4.0停止更新！！！</p></blockquote><h1 id="hexo-sakura-安装twikoo"><a href="#hexo-sakura-安装twikoo" class="headerlink" title="hexo-sakura 安装twikoo"></a>hexo-sakura 安装twikoo</h1><p>老样子，先附上<a href="https://twikoo.js.org/">官网</a></p><p>其实官网已经详细的不能再详细了…所以这篇文章主要是面向sakura主题还不会自己魔改的小白</p><p>搭建twikoo分两步：</p><blockquote><ol><li>在本地的博客主题中配置 Twikoo；</li><li>在腾讯云配置环境和云函数；</li></ol></blockquote><h2 id="腾讯云配置"><a href="#腾讯云配置" class="headerlink" title="腾讯云配置"></a>腾讯云配置</h2><p>官网说的已经很清楚了，不再赘述</p><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="config.yml"></a>config.yml</h3><p>主题下的_config.yml增加类似和valine增加enable项</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210109232911.png" alt="image-20210109232911072"></p><p>代表启用twikoo，envid是腾讯云里面的环境里面那个envId 一般是appname-xxx这种形式</p><h3 id="head-ejs"><a href="#head-ejs" class="headerlink" title="head.ejs"></a>head.ejs</h3><p>在mashiro_option那一串增加一项</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">mashiro_option.t_envID = &quot;&lt;%= theme.twikoo.envId %&gt;&quot;;</span><br></pre></td></tr></table></figure><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210109233528.png" alt="image-20210109233527906"></p><h3 id="comment-ejs"><a href="#comment-ejs" class="headerlink" title="comment.ejs"></a>comment.ejs</h3><p>这里的valine本来是honjun改php的残留，可以顺便删了</p><h2 id="Sakura-app-js"><a href="#Sakura-app-js" class="headerlink" title="Sakura-app.js"></a>Sakura-app.js</h2><p>创建函数TO()</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210124171111.png" alt="image-20210124001506768"></p><p>这里有个坑，el如过有的话会加载失败，把官网瞄点id是tcomment改成twikoo就行了，<del>神奇的bug</del></p><p>然后在pjax渲染里面增加相应的函数初始化就行了</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210124001830.png" alt="image-20210124001830767"></p><p>因为每个页面都可能要渲染所以<strong>要加两个</strong></p><p>最后在footer加上twikoo的cdn就行了我是引用的本地，你换成 <a href="https://cdn.jsdelivr.net/npm/twikoo@0.6.0/dist/twikoo.all.min.js">https://cdn.jsdelivr.net/npm/twikoo@0.6.0/dist/twikoo.all.min.js</a> 就行了，位置在script那一块</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210109234454.png" alt="image-20210109234454286"></p><h2 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h2><p>​    可以享受评论了，虽然限流量，但是官网说10000次/日以内是免费的，所以这个看个人吧。<del>我很放心😜</del>。</p><p>其他进阶设置比如表情cdn啊之类的，官网都已经在设置里配置好了很方便。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-sakura踩坑记</title>
      <link href="/p/52131.html"/>
      <url>/p/52131.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-sakura-踩坑记"><a href="#hexo-sakura-踩坑记" class="headerlink" title="hexo-sakura 踩坑记"></a>hexo-sakura 踩坑记</h1><h2 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h2><div class='tip success'><p>建议clone其他人已经美化好的(直接白嫖美化好的不香吗</p></div><p><del>本人<a href="https://github.com/honjun/hexo-theme-sakura">用的是Sakura主题</a>并且已经自己魔改了许多，也碰到许多坑，故在此记录</del></p><h2 id="说说板块-artitalk"><a href="#说说板块-artitalk" class="headerlink" title="说说板块|artitalk"></a>说说板块|artitalk</h2><p><a href="https://artitalk.js.org/">artitalk官网</a> 已经说的很全了这里补充几点：</p><blockquote><p>官网说：如果要把valine和artitalk同时打开用在一个leancloud应用就行了</p></blockquote><p>但是！！！我出错了，一个应用里面还是报appId can’t redefine（就是artitalk调用的是valine的id）很神奇。</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210108230722.png" alt="image-20210108230722359"></p><p>解决方法：</p><ul><li><p><a href="https://www.yuque.com/amtoaer/aqeozr/uq7bsq">根据这篇文章来</a> <del>似乎是廖雪峰的？？原文没找到</del> </p><p>  但是本蒟蒻太菜了，没有看懂（里面还说了一种解决方法是可以放一个app里面用同一个class？怎么和官网不大一样…）</p></li><li><p>将valine和artitalk分开，二者不同时使用（判断下window.loaction.pathname!=’/shuoshuo/‘就行了）</p></li></ul><p>其他操作可参考：</p><p><a href="https://blog.csdn.net/cungudafa/article/details/106224223">Artitalk说说心情发布页面（个性定制）</a><del>这个里面部署是老版本的建议看美化部分就行了</del></p><p>然后发现valine安全性不高，我选择twikoo😂<del>喂喂，还不到一个小时吧</del></p><p>可以参考<a href="https://dummerfu.top/p/64378.html">hexo-sakura部署twikoo</a></p><blockquote id="fn_ 1 "><sup> 1 </sup>. <a href="https://cungudafa.gitee.io/">比如这个博主的</a><a href="#reffn_ 1 " title="Jump back to footnote [ 1 ] in the text."> &#8617;</a></blockquote><h2 id="页首滑动swiper"><a href="#页首滑动swiper" class="headerlink" title="页首滑动swiper"></a>页首滑动swiper</h2><p><del>个人无聊的魔改</del></p><p><a href="https://www.swiper.com.cn/">swiper官网</a></p><p>基本上也是跟着来就行了，具体可以用js实现多图索引随机头图这些效果，不过官网似乎有现成的api？<del>我没仔细研究）</del></p><h3 id="lazyload"><a href="#lazyload" class="headerlink" title="lazyload"></a>lazyload</h3><p>个人觉得这个比较坑</p><p><strong>swiper的lazyload和普通的imglazyload不一样，具体样式也可以看官网</strong></p><p>不过坑点来了：</p><h4 id="坑点1"><a href="#坑点1" class="headerlink" title="坑点1"></a>坑点1</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 网上大多数initswiper是这样的</span></span><br><span class="line"><span class="keyword">var</span> myswiper=<span class="keyword">new</span> Swiper(<span class="string">&#x27;.swiper-container&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">false</span>,                </span><br><span class="line">    <span class="attr">lazyLoadingInPrevNext</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">lazyLoadingInPrevNextAmount</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">lazyLoading</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 　　lazyLoadingOnTransitionStart : true,</span></span><br><span class="line">    <span class="attr">direction</span>:<span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">    <span class="attr">navigation</span>:&#123;</span><br><span class="line">        <span class="attr">nextEl</span>: <span class="string">&#x27;.bg-next&#x27;</span>,</span><br><span class="line">        <span class="attr">prevEl</span>: <span class="string">&#x27;.bg-pre&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">                    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 但是lazyload应该这样定义</span></span><br><span class="line"><span class="keyword">var</span> myswiper=<span class="keyword">new</span> Swiper(<span class="string">&#x27;.swiper-container&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 不同点！！！                </span></span><br><span class="line">    <span class="attr">lazy</span>:&#123;</span><br><span class="line">        <span class="attr">lazyLoadingInPrevNext</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">lazyLoadingInPrevNextAmount</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">lazyLoading</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 　　lazyLoadingOnTransitionStart : true,</span></span><br><span class="line">    <span class="attr">direction</span>:<span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">    <span class="attr">navigation</span>:&#123;</span><br><span class="line">        <span class="attr">nextEl</span>: <span class="string">&#x27;.bg-next&#x27;</span>,</span><br><span class="line">        <span class="attr">prevEl</span>: <span class="string">&#x27;.bg-pre&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">                    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>不然你会发现怎么样有不会加载出图片的</p><h4 id="坑点2"><a href="#坑点2" class="headerlink" title="坑点2"></a>坑点2</h4><p>如果图片还没加载出来</p><p>别忘记设置图片的height属性，<strong>因为默认是0</strong></p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>首先如果你的代码高亮不了十分正常<del>maybe？</del>因为我初始化就是这样的</p><p>你需要在根目录的__config下面把highlight 全部改为false，因为这里的highlight是hexo的highlight而不是highlightjs的，之后就按照网上的配置就行了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今天我就是马克思</title>
      <link href="/p/15308.html"/>
      <url>/p/15308.html</url>
      
        <content type="html"><![CDATA[<h1 id="练习题三：简答题"><a href="#练习题三：简答题" class="headerlink" title="练习题三：简答题"></a>练习题三：简答题</h1><h2 id="简述马克思主义的三个组成部分及其相互关系？"><a href="#简述马克思主义的三个组成部分及其相互关系？" class="headerlink" title="简述马克思主义的三个组成部分及其相互关系？"></a>简述马克思主义的三个组成部分及其相互关系？</h2><p>（第2页）</p><p>​    马克思主义哲学，马克思主义政治经济学和科学社会主义是马克思主义的三个基本组成部分，有机统一并构成了马克思主义基本理论的主体内容。</p><h2 id="哲学基本问题是什么？"><a href="#哲学基本问题是什么？" class="headerlink" title="哲学基本问题是什么？"></a>哲学基本问题是什么？</h2><p>（第20-21页）</p><p>​    哲学基本问题是思维和存在的关系问题，存在和思维的关系问题包括两个方面的内容：其一，存在和思维究竟谁是世界的本源，即物质和精神何者是第一性，何者是第二性的问题。其二，存在和思维有没有统一性，即思维能否正确认识存在的问题。</p><h2 id="简述意识对物质的反作用"><a href="#简述意识对物质的反作用" class="headerlink" title="简述意识对物质的反作用"></a>简述意识对物质的反作用</h2><p>（第26页）</p><p>​    意识对物质的反作用就是能动作用，主要表现在：</p><ul><li>意识活动具有目的性和计划性。人在认识客观世界、尊重客观规律的同时还总是根据一定的目的和要求去确定反应什么、不反应什么，以及怎样反应，从而表现出主体的选择性。人的整个实践过程，就围绕意识活动所构建的目标和蓝图来进行的。</li><li>意识活动具有创造性。人的意识不仅采取感觉，知觉、表象等形式，反映事物的外部形象，而且运用概念、判断、推理等形式对感性材料进行加工制作和选择建构，在思维中构造一个现实中所没有的理想世界。</li><li>意识具有指导实践改造客观世界的作用。意识的能动作用不限于从实践中形成一定的思想，形成活动的目的、计划、方法等观念的东西，更重要的是在于以这些观念的东西为指导，通过实践使之一步步变成客观现实。</li><li>意识具有调控人的行为和生理活动的作用。</li></ul><h2 id="简述如何处理主观能动性和客观规律性的关系"><a href="#简述如何处理主观能动性和客观规律性的关系" class="headerlink" title="　简述如何处理主观能动性和客观规律性的关系"></a>　简述如何处理主观能动性和客观规律性的关系</h2><p>（27-28）</p><ul><li>尊重客观规律是正确发挥主观能动性的前提。</li><li>只有充分发挥主观能动性，才能正确认识和利用客观规律。</li><li>尊重事物发展的客观规律性与发挥人的主观能动性是辩证统一的，实践是客观规律性和主观能动性统一的基础。</li></ul><h2 id="为什么说对立统一规律是唯物辩证法的实质和核心？"><a href="#为什么说对立统一规律是唯物辩证法的实质和核心？" class="headerlink" title="为什么说对立统一规律是唯物辩证法的实质和核心？"></a>为什么说对立统一规律是唯物辩证法的实质和核心？</h2><p>（第37页）</p><ul><li>对立统一规律揭示了事物普遍联系的根本内容和变化发展的内在动力，从根本上回答了事物为什么会发展的问题。</li><li>对立统一规律是 贯穿量变质变规律、否定之否定规律以及唯物辩证法基本范畴 的中心线索，也是理解这些的钥匙。</li><li>对立统一规律提供了人们认识世界和改造世界的根本方法–矛盾分析法。</li></ul><h2 id="简述量变与质变的辩证关系"><a href="#简述量变与质变的辩证关系" class="headerlink" title="简述量变与质变的辩证关系"></a>简述量变与质变的辩证关系</h2><p>（第40页）</p><ul><li>量变是质变的必要准备，没有量变的积累，质变就不会发生。</li><li>质变是量变的必然结果。单纯的量变不会永远持续下去，量变达到一定程度必然引起质变。</li><li>量变和质变是相互渗透的。一方面量变过程中有阶段性和局部性的部分质变，另一方面，在质变过程中也有旧质在量上的收缩与新质在量上的扩张。</li><li>量变与质变是相互依存，相互贯通的，量变引起质变，在新质的基础上又开始新的量变。</li></ul><h2 id="简述如何坚持对立统一规律“两点论”和“重点论”的统一？"><a href="#简述如何坚持对立统一规律“两点论”和“重点论”的统一？" class="headerlink" title="简述如何坚持对立统一规律“两点论”和“重点论”的统一？"></a>简述如何坚持对立统一规律“两点论”和“重点论”的统一？</h2><p>（教材第39页）</p><ul><li>两点论是指在分析事物的矛盾时不仅要看到矛盾双方的对立而且要看到统一，不仅看到主要矛盾还要看到次要矛盾</li><li>重点论是指要着重把握主要矛盾，并以此作为解决问题的出发点。</li><li>两点论和重点论的统一要求我们，看问题既要全面地看又要看主流、发展大势。</li></ul><h2 id="简述实践在认识活动中的决定作用？"><a href="#简述实践在认识活动中的决定作用？" class="headerlink" title="简述实践在认识活动中的决定作用？"></a>简述实践在认识活动中的决定作用？</h2><p>（第61-63页）</p><ul><li>实践是认识的来源：认识的内容是在实践活动的基础上产生和发展的。</li><li>实践是认识发展的动力：实践的需要 推动认识的产生，推动人类的科学发现和技术发明，推动人类的思想进步和理论创新。</li><li>实践是认识的目的。</li><li>实践是检验认识真理性的唯一标准：认识是否具有真理性，既不能从认识本身得到证实，也不能从认识对象中得到回答，只有在实践中才能得到验证。</li></ul><h2 id="简述感性认识和理性认识的辩证统一关系？"><a href="#简述感性认识和理性认识的辩证统一关系？" class="headerlink" title="简述感性认识和理性认识的辩证统一关系？"></a>简述感性认识和理性认识的辩证统一关系？</h2><p>（第68-69页）</p><ul><li>感性认识有待于发展和深化为理性认识：感性认识是认识的初级阶段，是对事物外部联系的认识，因而感性认识还不是完全的认识。</li><li>理性认识依赖于感性认识：感性认识是认识过程的起点，是达到理性认识的必经阶段，没有感性认识就没有理性认识。</li><li>感性认识与理性认识相互渗透，相互包含，二者没有绝对分明的界限。</li><li>感性认识和理性认识的辩证同一关系是在实践的基础上形成的，也需要在实践中发展。</li></ul><h2 id="简述实践与认识的辩证运动及规律。"><a href="#简述实践与认识的辩证运动及规律。" class="headerlink" title="简述实践与认识的辩证运动及规律。"></a>简述实践与认识的辩证运动及规律。</h2><p>（第72页）</p><p>实践与认识的辩证运动，是一个由感性认识到理性认识，又由理性认识到实践的飞跃，是实践，认识再实践，再认识，循环往复至无穷的辩证发展过程。</p><h2 id="简述价值的基本特征。"><a href="#简述价值的基本特征。" class="headerlink" title="简述价值的基本特征。"></a>简述价值的基本特征。</h2><p>（第86-88页）</p><p>价值具有主体性、客观性、多维性和社会历史性四个基本特性。他们是价值本质的表现。</p><ul><li>价值的主体性：价值主体性是指价值直接同主体相联系，始终以主体为中心，其一，价值关系的形成依赖于主体的存在。其二价值关系的形成依赖于主体的创造。</li><li>价值的客观性：价值的客观性是指在一定条件下客体对于主体的意义不依赖于主体的主观意识而存在。</li><li>价值的多维性：是指价值每个主体的价值关系具有多样性，同一客体对于主体的不同需要会产生不同的价值。</li><li>价值的社会历史性：主体和客体的不断变化决定了价值的社会历史性的特点。</li></ul><h2 id="为什么物质资料生产方式是社会历史发展的决定力量？"><a href="#为什么物质资料生产方式是社会历史发展的决定力量？" class="headerlink" title="为什么物质资料生产方式是社会历史发展的决定力量？"></a>为什么物质资料生产方式是社会历史发展的决定力量？</h2><p>（第108页）</p><ul><li>物质生产活动及生产方式是人类社会赖以存在和发展的基础，是人类进行其他一切活动的首要前提。</li><li>物质生产活动及生产方式决定着社会的结构、性质和面貌。</li><li>物质生产活动及生产方式的变化发展决定整个社会历史的变化发展，决定社会形态从低级向高级的更替和发展。</li></ul><h2 id="简述社会意识的相对独立性的具体表现。"><a href="#简述社会意识的相对独立性的具体表现。" class="headerlink" title="简述社会意识的相对独立性的具体表现。"></a>简述社会意识的相对独立性的具体表现。</h2><p>（第112-113页）</p><ul><li>社会意识与社会 存在发展的不完全同步性和不平衡性。</li><li>社会意识内部各种形式之间的相互影响 及各自具有的历史继承性。</li><li>社会意识对社会存在能动的反作用，这是社会意识性相对独立的突出表现。</li></ul><h2 id="简述生产关系一定要适合生产力状况的规律。"><a href="#简述生产关系一定要适合生产力状况的规律。" class="headerlink" title="简述生产关系一定要适合生产力状况的规律。"></a>简述生产关系一定要适合生产力状况的规律。</h2><p>（第118-120页）</p><p>生产力和生产关系是社会生产不可分割的两个方面</p><ul><li>生产力决定生产关系</li><li>生产关系对生产力具有能动的反作用</li></ul><h2 id="社会基本矛盾在历史发展中的作用主要表现在哪些方面？"><a href="#社会基本矛盾在历史发展中的作用主要表现在哪些方面？" class="headerlink" title="社会基本矛盾在历史发展中的作用主要表现在哪些方面？"></a>社会基本矛盾在历史发展中的作用主要表现在哪些方面？</h2><p>（第131-132页）</p><p>社会基本矛盾是社会发展的根本动力，主要作用表现在：</p><ul><li>生产力是社会基本矛盾运动中最基本的动力因素，是人类社会发展进步的最终决定力量。</li><li>生产力是社会进步的根本内容，是衡量社会进步的根本尺度。</li><li>社会基本矛盾特别是生产力和生产关系的矛盾，决定着社会中其他矛盾的存在和发展。</li><li>经济基础和上层建筑的矛盾也会影响和制约生产力和生产关系矛盾。</li><li>社会基本矛盾具有不同的表现形式和解决方式，并从根本上影响和促进社会形态的变化和发展。</li></ul><h2 id="简述科学技术在社会发展中的作用"><a href="#简述科学技术在社会发展中的作用" class="headerlink" title="简述科学技术在社会发展中的作用"></a>简述科学技术在社会发展中的作用</h2><p>（第144-147页）</p><ul><li>科技革命推动了社会历史的进步，并对生产方式产生了深刻的影响。</li><li>科学技术对我们的生活方式产生了巨大的影响，促进了思维方式的变革，成为了社会发展的重要动力。</li></ul><h2 id="简述商品的二因素（使用价值和价值）之间的对立统一关系"><a href="#简述商品的二因素（使用价值和价值）之间的对立统一关系" class="headerlink" title="简述商品的二因素（使用价值和价值）之间的对立统一关系"></a>简述商品的二因素（使用价值和价值）之间的对立统一关系</h2><p>（162-163）</p><ul><li>对立性：要获得商品的价值就必须放弃商品的使用价值，要得到商品的使用价值就不能得到商品的价值。商品生产者生产商品并不是为了取得使用价值，而是为了取得价值。</li><li>统一性：作为商品，必须同时具有使用价值和价值两个因素，使用价值是价值的物质承担者，价值寓于使用价值之中。一种物品如果没有使用价值就是无用之物，即使人们为他付出了大量劳动，也没有价值。</li></ul><h2 id="简述人民群众在创造历史过程中的决定作用？"><a href="#简述人民群众在创造历史过程中的决定作用？" class="headerlink" title="简述人民群众在创造历史过程中的决定作用？"></a>简述人民群众在创造历史过程中的决定作用？</h2><p>（第150-151页）</p><ul><li>人民群众是社会历史实践的主体，是历史的创造者：人民群众的总体意愿和行动代表了历史发展的方向，人民群众的社会事件最终决定了历史发展的结局。</li><li>人民群众是社会物质财富的创造者。</li><li>人民群众是社会精神财富的创造者。</li><li>人民群众是社会变革的革命力量。</li></ul><h2 id="简述价值规律及其作用"><a href="#简述价值规律及其作用" class="headerlink" title="简述价值规律及其作用"></a>简述价值规律及其作用</h2><p>（第166-169页）</p><p>价值的规律：商品的价值量由生产商品的社会必要劳动时间决定，商品交换以价值量为基础，按照等价交换的原则进行。</p><p>价值规律的作用表现在：</p><ul><li>自发的调节生产资料和劳动力在社会各生产部门之间的分配比例</li><li>自发的刺激社会生产力的发展</li><li>自发的调节社会收入的分配</li></ul><h2 id="简述经济全球化的表现。"><a href="#简述经济全球化的表现。" class="headerlink" title="简述经济全球化的表现。"></a>简述经济全球化的表现。</h2><p>（第228-230页）</p><ul><li>国际分工进一步深化</li><li>贸易全球化</li><li>金融全球化</li><li>企业生产经营全球化 </li></ul><h2 id="简述什么是辩证否定观？"><a href="#简述什么是辩证否定观？" class="headerlink" title="简述什么是辩证否定观？"></a>简述什么是辩证否定观？</h2><p>（第40页）</p><ul><li>否定是事物的自我否定， 是事物内部矛盾运动的结果。</li><li>否定是事物发展的环节，是旧事物向新事物的转变，是旧质到新质的飞跃。</li><li>否定是新旧事物联系的环节，新事物孕育产生于旧事物，新旧事物是通过否定环节联系起来的。</li><li>辩证否定的实质是扬弃，即新事物对旧事物既批判又继承，既克服其消极因素又保留其积极因素。</li></ul><h2 id="简述劳动二重性与商品二因素之间的关系"><a href="#简述劳动二重性与商品二因素之间的关系" class="headerlink" title="简述劳动二重性与商品二因素之间的关系"></a>简述劳动二重性与商品二因素之间的关系</h2><p>（第162-163页）</p><p> 生产商品的具体劳动创造商品的使用价值，抽象劳动形成商品的价值。具体劳动和抽象劳动是同一劳动的两种规定。任何一种劳动，一方面是特殊的具体劳动，另一方面是一般的抽象劳动这就是劳动的二重性。正是劳动的二重性决定了商品的二因素。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas基本操作</title>
      <link href="/p/40218.html"/>
      <url>/p/40218.html</url>
      
        <content type="html"><![CDATA[<h1 id="pandas-基础属性"><a href="#pandas-基础属性" class="headerlink" title="pandas 基础属性"></a>pandas 基础属性</h1><p>pandas.series自带了三个’’属性”，管理分类的cat，管理字符串的str，管理时间的dt</p><h2 id="str"><a href="#str" class="headerlink" title="str"></a>str</h2><ul><li>pd.series.str：返回的是一个series的字符串列，但是复杂函数还是要apply写。</li><li>pd.series.str.contain(str)：查找列是否包含该str，包含则返回行。</li><li>pd.series.str.len()：返回该series列所有str的长度。</li></ul><h2 id="dt"><a href="#dt" class="headerlink" title="dt"></a>dt</h2><p>首先要把格式转为datatime格式</p><blockquote><p>pd.to_datetime(“series”)</p></blockquote><ul><li><p>pd.series.dt：返回的是一个series的datetime类型列，可以做datatime类型操作</p></li><li><p>pd.series.dt:有几个内置属性</p><blockquote><p>hour：返回datetime的时</p><p>day: 返回datetime的天</p><p>second：返回datetime的秒</p><p>quarter：返回第几季度</p><p>month：返回月</p><p>year：返回年</p></blockquote></li></ul><div class="tip success"><p>datatime类型还可以进行加减操作哦</p></div><h1 id="pandas-读写文件1"><a href="#pandas-读写文件1" class="headerlink" title="pandas 读写文件1"></a>pandas 读写文件<sup><a href="#fn_1" id="reffn_1">1</a></sup></h1><h2 id="read-csv"><a href="#read-csv" class="headerlink" title="read_csv"></a>read_csv</h2><p>读取<strong>txt | tsv*</strong>等类似类型文件也可以用，sep设置为<strong>空格 | \t</strong> 就行了</p><p>当然pandas的series也可以写入或读取</p><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html?highlight=csv#pandas.read_csv"><em>Pandas.read_csv(filepath_or_buffer,sep,header,dtype,engine,converters,skiprows,skipfooter,nrows)<sup><a href="#fn_2" id="reffn_2">2</a></sup></em></a></p><ul><li><p>filepath:：读取的文件地址或url地址</p></li><li><p>sep：str类型，默认’,’ 指定分隔符。如果不指定参数，则会尝试使用默认值逗号分隔。分隔符长于一个字符并且不是‘\s+’,将使用python的语法分析器。并且忽略数据中的逗号，并且可以用正则匹配！</p></li><li><p>header：指定第几行作为列名(忽略注解行)，如果没有指定列名，默认header=0; 如果指定了列名header=None</p></li><li><p>dtype：例子： {‘a’: np.float64, ‘b’: np.int32} 指定每一列的数据类型，a,b表示列名</p></li><li><p>engine：使用的分析引擎。可以选择C或者是python，C引擎快但是Python引擎功能更多一些。并且如果sep本意不是正则可以用这个来区别</p><p>  比如：sep=’::’没有engine时会被识别为正则，本意是数据确实就是以::分隔的，用engine=python来区别</p></li><li><p>converters：置指定列的处理函数，可以用”序号”也可以使用“列名”进行列的指定</p></li><li><p>skiprows：默认值 None 需要忽略的行数即header的后xx行开始，，或需要跳过的行号列表（从0开始）</p><blockquote><p>如果是一个csv文件，excel打开默认header为第一行，要从第15行开始读取则设置skiprows=14，但这样header也会被跳过，所以一般是skiprows=[i for i in rang(1,14)]</p></blockquote></li><li><p>skipfooters：从文件尾部开始忽略</p></li><li><p>nrows：从文件中只读取多少数据行，需要读取的行数（从文件头开始算起）</p></li></ul><p>对应的是Dataframe.to_csv()，参数都类似，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置index=None，写入时除去index，这样正常读入就没有unnamed了</span></span><br><span class="line">df.to_csv(xxx,index=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h2 id="写入txt"><a href="#写入txt" class="headerlink" title="写入txt"></a>写入txt</h2><p><em>这个要提一下，因为很多人都会忽略to_csv的sep参数。</em></p><div class="tip success"><p>csv本质是：分割的txt文件，所以实质上pandas也兼容了写入txt </p></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用模板如下</span></span><br><span class="line"><span class="comment"># 只需声明分割符就行了</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;path&#x27;</span>,sep=<span class="string">&#x27;\t&#x27;</span>,header=<span class="literal">None</span>,index=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h2 id="read-excel"><a href="#read-excel" class="headerlink" title="read_excel"></a>read_excel</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html"><em>Pandas.read_excel(io,sheet_name,sep,header,dtype,engine,converters,skiprows,skipfooter,nrows)</em></a></p><p>与read_csv参数基本相同，这里只介绍额外增加的参数</p><ul><li>io：文件类对象 ，pandas Excel 文件或 xlrd 工作簿。该字符串可能是一个URL。URL包括http，ftp，s3和文件。例如，本地文件可写成file://localhost/path/to/workbook.xlsx</li><li>sheet_name：默认是sheetname为0，返回多表使用sheetname=[0,1]，若sheetname=None是返回全表 。注意：int/string返回的是dataframe，而none和list返回的是dict of dataframe，表名用字符串表示，索引表位置用整数表示；</li></ul><h2 id="read-json"><a href="#read-json" class="headerlink" title="read_json"></a>read_json</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.read_json.html"><em>Pandas.read_json(filepath_or_buffer,orient,header,type,dtype,convert_dates,keep_default_dates,numpy,encoding,lines)</em></a></p><ul><li>orient：预期的json字符串格式，orient的设置有以下几个值：<ol><li>‘split’ : dict like {index -&gt; [index], columns -&gt; [columns], data -&gt; [values]}</li><li>‘records’ : list like [{column -&gt; value}, … , {column -&gt; value}]</li><li>‘index’ : dict like {index -&gt; {column -&gt; value}}</li><li>‘columns’ : dict like {column -&gt; {index -&gt; value}}</li><li>‘values’ : just the values array</li></ol></li><li>type：返回的格式(series or frame), 默认是 ‘frame’</li><li>dtype：同csv，列的数据类型</li><li>convert_dates：解析日期的列列表；如果为True，则尝试解析类似日期的列，默认值为True</li><li>keep_default_dates：default True。如果解析日期，则解析默认的日期样列</li><li>numpy：直接解码为numpy数组。默认为False；仅支持数字数据，但标签可能是非数字的。</li><li>encoding：json编码</li><li>lines：将每行读取为一个json对象</li></ul><h2 id="read-html"><a href="#read-html" class="headerlink" title="read_html"></a>read_html</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.read_html.html"><em>Pandas.read_html(io,match,flavor,header,index_col,skiprows,attrs,parse_dates)</em></a></p><ul><li>io：接收网址、文件、字符串。网址不接受https，尝试去掉s后爬去</li><li>match：正则表达式，返回与正则表达式匹配的表格</li><li>flavor：html解释器</li><li>index_col：同csv</li><li>skip_rows：同csv</li><li>attrs：属性，比如 attrs = {‘id’: ‘table’}<del>不是很懂</del></li><li>parse_dates：解析日期</li></ul><h1 id="pandas查询数据"><a href="#pandas查询数据" class="headerlink" title="pandas查询数据"></a>pandas查询数据</h1><h2 id="pandas-loc"><a href="#pandas-loc" class="headerlink" title="pandas.loc"></a>pandas.loc</h2><p><del>无敌好吧，我只能说无敌</del></p><p>dataframe.iloc和loc相似，不过只能接受整数的传参。而loc可以接受整数，字符串，bool的传参（注意先行后列就行了）</p><p>缺点就是必须按照顺序索引（比如muti index 必须先level 1再索引level 2），而且如果要按行操作需要reset index</p><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.loc.html#pandas.DataFrame.loc">Dataframe.loc</a></p><p>初始表格</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">tuples = [</span><br><span class="line">   (<span class="string">&#x27;cobra&#x27;</span>, <span class="string">&#x27;mark i&#x27;</span>), (<span class="string">&#x27;cobra&#x27;</span>, <span class="string">&#x27;mark ii&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;sidewinder&#x27;</span>, <span class="string">&#x27;mark i&#x27;</span>), (<span class="string">&#x27;sidewinder&#x27;</span>, <span class="string">&#x27;mark ii&#x27;</span>),</span><br><span class="line">   (<span class="string">&#x27;viper&#x27;</span>, <span class="string">&#x27;mark ii&#x27;</span>), (<span class="string">&#x27;viper&#x27;</span>, <span class="string">&#x27;mark iii&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">index = pd.MultiIndex.from_tuples(tuples)</span><br><span class="line">values = [[<span class="number">12</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">4</span>], [<span class="number">10</span>, <span class="number">20</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">4</span>], [<span class="number">7</span>, <span class="number">1</span>], [<span class="number">16</span>, <span class="number">36</span>]]</span><br><span class="line">df = pd.DataFrame(values, columns=[<span class="string">&#x27;max_speed&#x27;</span>, <span class="string">&#x27;shield&#x27;</span>], index=index)</span><br><span class="line">df</span><br></pre></td></tr></table></figure><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210114195313.png" alt="image-20210114195313389"></p><h3 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回dataframe</span></span><br><span class="line">df.loc[[<span class="string">&#x27;viper&#x27;</span>],:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回series</span></span><br><span class="line">df.loc[<span class="string">&#x27;viper&#x27;</span>,:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 间隔取(这样只能返回dataframe</span></span><br><span class="line"><span class="comment"># 不加[]会报错</span></span><br><span class="line">df.loc[[<span class="string">&#x27;cobra&#x27;</span>,<span class="string">&#x27;viper&#x27;</span>],:]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连续取值(只能返回dataframe)</span></span><br><span class="line"><span class="comment"># 行切片则是前闭后闭，列切片也是前闭后闭（不然怎么取全列</span></span><br><span class="line">df.loc[<span class="string">&#x27;cobra&#x27;</span>:<span class="string">&#x27;sidewinder&#x27;</span>,<span class="string">&#x27;max_speed&#x27;</span>:<span class="string">&#x27;temp&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有单列查询才会返回series否则其他的全是dataframe</span></span><br><span class="line"><span class="comment"># series</span></span><br><span class="line">df.loc[<span class="string">&#x27;cobra&#x27;</span>:<span class="string">&#x27;viper&#x27;</span>,<span class="string">&#x27;shield&#x27;</span>]</span><br><span class="line"><span class="comment"># dataframe</span></span><br><span class="line">df.loc[<span class="string">&#x27;cobra&#x27;</span>:<span class="string">&#x27;sidewinder&#x27;</span>,[<span class="string">&#x27;shield&#x27;</span>]]</span><br><span class="line">df.loc[[<span class="string">&#x27;cobra&#x27;</span>,<span class="string">&#x27;viper&#x27;</span>],<span class="string">&#x27;max_speed&#x27;</span>:<span class="string">&#x27;shield&#x27;</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210114200045.png" alt="image-20210114200044927"></p><h3 id="bool类型传参"><a href="#bool类型传参" class="headerlink" title="bool类型传参"></a>bool类型传参</h3><p>dataframe.loc[bool]和dataframe[bool]不一样！！！</p><p><del>dataframe.loc[bool]是遍历行，dataframe[bool]是遍历所有元素，但是当index是muti index时不能用index</del></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列的bool值要带入新的loc的行部分</span></span><br><span class="line">df.loc[df.loc[:,<span class="string">&#x27;shield&#x27;</span>]&gt;<span class="number">30</span>,:]</span><br><span class="line"><span class="comment"># 等效</span></span><br><span class="line">df[df.shield&gt;<span class="number">30</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行的bool值要带入新的loc的列部分</span></span><br><span class="line">df.loc[(<span class="string">&#x27;cobra&#x27;</span>,<span class="string">&#x27;mark ii&#x27;</span>)]&gt;<span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.loc[:,df.loc[(<span class="string">&#x27;cobra&#x27;</span>,<span class="string">&#x27;mark ii&#x27;</span>)]&gt;<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑 判断</span></span><br><span class="line"><span class="comment"># |是or，&amp;是and每个条件要括号括起</span></span><br><span class="line">df.loc[:,(df.loc[(<span class="string">&#x27;cobra&#x27;</span>,<span class="string">&#x27;mark ii&#x27;</span>)]&gt;<span class="number">3</span>)&amp;(df.loc[(<span class="string">&#x27;cobra&#x27;</span>,<span class="string">&#x27;mark ii&#x27;</span>)]&lt;<span class="number">3</span>)]</span><br><span class="line"><span class="comment"># isin([xx,xx]) 是否存在</span></span><br><span class="line"><span class="comment"># 通过~取反相当于!</span></span><br><span class="line">df.loc[:,df.loc[(<span class="string">&#x27;cobra&#x27;</span>,<span class="string">&#x27;mark ii&#x27;</span>)].isin([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])]</span><br><span class="line">df.loc[:,~(df.loc[(<span class="string">&#x27;cobra&#x27;</span>,<span class="string">&#x27;mark ii&#x27;</span>)].isin([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))]</span><br><span class="line"><span class="comment"># serise.str.contain(xxx|xx|x)</span></span><br><span class="line"><span class="comment"># 不完全匹配字符串</span></span><br></pre></td></tr></table></figure><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20210114201447.png" alt="image-20210114201447424"></p><h3 id="设置values"><a href="#设置values" class="headerlink" title="设置values"></a>设置values</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.loc[[<span class="string">&#x27;viper&#x27;</span>, <span class="string">&#x27;sidewinder&#x27;</span>], [<span class="string">&#x27;shield&#x27;</span>]] = <span class="number">50</span></span><br></pre></td></tr></table></figure><h2 id="dataframe-xs-函数"><a href="#dataframe-xs-函数" class="headerlink" title="dataframe.xs()函数"></a>dataframe.xs()函数</h2><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.xs.html">pandas.DataFrame.xs(key,axis=0,level=None,drop_level=True)</a> <sup><a href="#fn_4" id="reffn_4">4</a></sup></p><ul><li>key: 行index或列的name</li><li>axis: index或columns</li><li>level: 指定行的level等级</li></ul><h2 id="iter遍历"><a href="#iter遍历" class="headerlink" title="iter遍历"></a>iter遍历</h2><ul><li>遍历整行:Dataframe.iterrows():</li><li>遍历全部列:Dataframe.iteritems():</li></ul><h1 id="pandas数据处理"><a href="#pandas数据处理" class="headerlink" title="pandas数据处理"></a>pandas数据处理</h1><h2 id="nan的处理"><a href="#nan的处理" class="headerlink" title="nan的处理"></a>nan的处理</h2><h3 id="dataframe-fillna"><a href="#dataframe-fillna" class="headerlink" title="dataframe.fillna()"></a>dataframe.fillna()</h3><p><a href="https://github.com/pandas-dev/pandas/blob/v1.1.5/pandas/core/frame.py#L4311-L4328">DataFrame.fillna<em>(value=None,method=None</em>,<em>axis=None</em>,<em>inplace=False</em>, <em>limit=None</em>,<em>downcast=None</em>)</a></p><ul><li>value：将nan填充为的value</li><li>method：填充方法bfill：向后寻找第一个非空进行填充,  ffill：向前寻找第一个非空进行填充</li><li>axis：填充的坐标轴</li><li>inplace是否赋值到原dataframe</li></ul><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读入转换</span></span><br><span class="line">pd.read_csv(<span class="string">&#x27;xxx&#x27;</span>,dtype=&#123;<span class="string">&#x27;columns_name&#x27;</span>:columns_type,<span class="string">&#x27;xxx&#x27;</span>:xx&#125;)</span><br><span class="line"><span class="comment"># 强制转换</span></span><br><span class="line">df.column_name.astype(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><h3 id="dataframe-dropna"><a href="#dataframe-dropna" class="headerlink" title="dataframe.dropna()"></a>dataframe.dropna()</h3><p><a href="https://github.com/pandas-dev/pandas/blob/v1.1.5/pandas/core/frame.py#L4887-L5026">DataFrame.dropna(<em>axis=0</em>, <em>how=’any’,</em>thresh=None<em>, </em>subset=None<em>, </em>inplace=False*)</a></p><ul><li>axis：axis=0丢掉包含nan值的行，axis=1则为丢掉列</li><li>how：决定是是所有行或列包含nan丢弃(all)还是只有一个就丢弃(any)</li></ul><h3 id="dataframe-isnull"><a href="#dataframe-isnull" class="headerlink" title="dataframe.isnull()"></a>dataframe.isnull()</h3><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.isnull.html?highlight=isnull#pandas.isnull">pandas.isnull(obj)</a></p><p>判断obj类里面所有值是否为null，返回bool类型</p><h2 id="pandas-drop"><a href="#pandas-drop" class="headerlink" title="pandas.drop"></a>pandas.drop</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop.html?highlight=drop#pandas.DataFrame.drop">DataFrame.drop(<em>labels=None</em>,<em>axis=0</em>, <em>index=None</em>, <em>columns=None</em>,<em>level=None</em>,<em>inplace=False</em>, <em>errors=’raise’</em></a></p><ul><li>labels：字符串或数组，需要删去的对应关键字</li><li>axis：axis默认为0 ，即默认删除行</li><li>index：index=labels等价于labels=labels，axis=0</li><li>inplace：是否替换原数据</li></ul><h2 id="dataframe-reset-index"><a href="#dataframe-reset-index" class="headerlink" title="dataframe.reset_index()"></a>dataframe.reset_index()</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.reset_index.html?highlight=reset_index#pandas.DataFrame.reset_index">dataframe.reset_index(level=None,drop=False,inplace=False,col_level=0,col_fill=’’)</a></p><ul><li>level:从index 移除的level index，默认全部移除index重新标号</li><li>inplace：是否替换原数据</li><li>如果列是muti columns 则选择插入到第几个level</li><li>col_fill:选择列插入时其他列的命名，默认repeat</li></ul><h2 id="dataframe-rename"><a href="#dataframe-rename" class="headerlink" title="dataframe.rename()"></a>dataframe.rename()</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html?highlight=rename#pandas.DataFrame.rename">dataframe.rename(mapper=None,index=None,columns=None,axis=None,copy=True,inplace=False,level=None,errors=’ignore’)</a></p><ul><li>mapper:函数或字典</li><li>index：如果axis=0 则mapper作用与index</li><li>columns：axis=1 mapper作用与columns</li><li>axis:指定坐标轴</li><li>inplace：是否替换原数据</li></ul><p>该函数也能用在series上</p><h1 id="pandas-数据统计"><a href="#pandas-数据统计" class="headerlink" title="pandas 数据统计"></a>pandas 数据统计</h1><h2 id="dataframe-info-函数"><a href="#dataframe-info-函数" class="headerlink" title="dataframe.info()函数"></a>dataframe.info()函数</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.info.html?highlight=info"><em>Dataframe.info(verbose=None,buf=None,max_col=None,memory_usage=None,null_counts=None)</em></a></p><ul><li>verbose:是否返回全部信息</li><li>是否输出到文件，默认输出到屏幕</li></ul><h2 id="dataframe-describe-函数"><a href="#dataframe-describe-函数" class="headerlink" title="dataframe.describe()函数"></a>dataframe.describe()函数</h2><p><del>管他的，用默认参数就完事了</del></p><p>还有series.describe()，和这个类似</p><h2 id="dataframe-value-counts-函数"><a href="#dataframe-value-counts-函数" class="headerlink" title="dataframe.value_counts()函数"></a>dataframe.value_counts()函数</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.value_counts.html?highlight=value_count"><em>Dataframe.value_counts(subset=None,normalize=False,sort=True,ascending=False,dropna=True)</em></a></p><ul><li>subset: 需要计数的列</li><li>normalize：返回频数（False）还是比例（True）</li><li>sort：是否排序</li><li>ascending：是否降序排列（默认降序）</li><li>dropna:是否不统计na</li><li>返回的是去重后对应的key和value</li></ul><p>series.value_counts()和这个类似不过没有了subset而已。</p><p>但是奇怪的是用Dataframe会报错很神奇。</p><h1 id="pandas-数据整理"><a href="#pandas-数据整理" class="headerlink" title="pandas 数据整理"></a>pandas 数据整理</h1><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.concat.html?highlight=concat#pandas.concat"><em>pandas.concat(objs=[],axis=0,join=outer,ignore_index=False)</em></a></p><ul><li>opt：需要合并的series或dataframe</li><li>axis：合并的轴，1为列（横向拼接），0按为行（向下拼接）</li><li>join：合并的方式</li><li>ignore_index: 是否忽略index，如果忽略新的index将按0，1…编号</li></ul><p><del>感觉这一个万能，merge只能两个合并，这个可以多个合并</del></p><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.merge.html?highlight=merge#pandas.merge"><em>pandas.DataFrame.merge(left,right,how=’inner’, on=None, left_index=False,right_index=False,sort=False, validate=None)</em></a></p><ul><li>left :dataframe</li><li>right: dataframe或者series （需要被merge的对象）</li><li>left_index: 新index用左边的</li><li>right_index: 新index用右边的</li><li>how: <strong>left, right, outer, inner, cross</strong>, 默认inner，<ul><li>left：按左边关键字合并</li><li>right：按右边关键字合并</li><li>outer：取并集关键字合并，没有的关键字用na替代</li><li>inner：取交集关键字合并</li><li>cross： 笛卡尔积合并</li></ul></li><li>sort：是否排序</li><li>validate：str，optional 对应关系</li></ul><p>还有些append什么的就算了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#df 1 </span></span><br><span class="line"><span class="comment">#       a  b</span></span><br><span class="line"><span class="comment"># 0   foo  1</span></span><br><span class="line"><span class="comment"># 1   bar  2</span></span><br><span class="line"><span class="comment"># df 2</span></span><br><span class="line"><span class="comment">#       a  c</span></span><br><span class="line"><span class="comment"># 0   foo  3</span></span><br><span class="line"><span class="comment"># 1   cz  4</span></span><br><span class="line"></span><br><span class="line">df1.merge(df2, how=<span class="string">&#x27;inner&#x27;</span>, on=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#       a  b  c</span></span><br><span class="line"><span class="comment"># 0   foo  1  3</span></span><br></pre></td></tr></table></figure><h2 id="groupby"><a href="#groupby" class="headerlink" title="groupby"></a>groupby</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html?highlight=groupby#pandas.DataFrame.groupby"><em>DataFrame.groupby(by=None, axis=0, level=None, as_index=True, sort=True, group_keys=True,observed=False, dropna=True)</em></a></p><ul><li>by:通过什么group 可以是function，list，dic…</li><li>axis: 按行还是按列group，（通常是行</li><li>sort:是否按key值排序，默认排序</li><li>dropna：是否丢弃na值，默认丢弃</li><li>返回的是一个dataframe！！！</li></ul><p>当然series也有groupby，参数相同，只是返回的是一个series。</p><blockquote><p>在pandas读取文件的过程中，最常出现的问题，就是中文问题与格式问题，希望当你碰到的时候，可以完美的解决。</p></blockquote><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.apply.html?highlight=apply#pandas.DataFrame.apply">pd.DataFrame.apply(<em>func</em>,<em>axis=0</em>,<em>raw=False</em>,<em>result_type=None</em>,<em>args=()</em>,<em>kwargs</em></a></p><ul><li><p>axis：0|index 传入按每行，1|columns依次按每列值传入（通常是axis=1来用）</p>  <figure class="highlight tap"><table><tr><td class="code"><pre><span class="line"><span class="comment">#df</span></span><br><span class="line">A  B</span><br><span class="line">0 <span class="number"> 4 </span> 9</span><br><span class="line">1 <span class="number"> 4 </span> 9</span><br><span class="line">2 <span class="number"> 4 </span> 9</span><br><span class="line"></span><br><span class="line"><span class="comment"># axis=0 按行传入的值分别为</span></span><br><span class="line">[4,4,4],[9,9,9]</span><br><span class="line"></span><br><span class="line"><span class="comment"># axis=1 按列传入的值分别为</span></span><br><span class="line">[4,9],[4,9],[4,9]</span><br></pre></td></tr></table></figure></li><li><p>raw：False 代表传入函数为一个Series，True代表传入函数的是一个np.arrary</p></li><li><p>result_type：expand，reduce，broadcast，当axis=1才有效</p></li></ul><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><p>虽然官网上搜索不到了，但还可以用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm </span><br><span class="line">tqdm.pandas(desc=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="comment"># 与正常apply一样传参</span></span><br><span class="line">data.progress_apply()</span><br></pre></td></tr></table></figure><p><strong>最后附上<a href="https://pyecharts.org/#/zh-cn/basic_charts">pyechart可视化官方文档</a>，配合pandas使用</strong><sup><a href="#fn_3^" id="reffn_3^">3^</a></sup></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote id="fn_1"><sup>1</sup>.  本文因上次训练拉跨了，遂有感而发，pandas基础学习主要是看<a href="https://www.bilibili.com/video/BV1UJ411A7Fs?p=14">这个视频</a>，顺便附上<a href="https://pandas.pydata.org/docs/">pandas官网链接</a><a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>.  读取文件参数基本参考了：<a href="https://www.cnblogs.com/happymeng/p/10481293.html">https://www.cnblogs.com/happymeng/p/10481293.html</a><a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 3"><sup> 3</sup>. 上次训练又拉跨了，pyechart也该总结一下了…/(ㄒoㄒ)/~~<a href="#reffn_ 3" title="Jump back to footnote [ 3] in the text."> &#8617;</a></blockquote><blockquote id="fn_ 4"><sup> 4</sup>. <a href="https://mlln.cn/">索引部分参考</a><a href="#reffn_ 4" title="Jump back to footnote [ 4] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分赌注问题</title>
      <link href="/p/466.html"/>
      <url>/p/466.html</url>
      
        <content type="html"><![CDATA[<h1 id="分赌注问题"><a href="#分赌注问题" class="headerlink" title="分赌注问题"></a>分赌注问题</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>​    水平相同的两个赌徒A，B，约定先胜t局的人赢得赌注，在赌博的某时刻，两赌徒终止赌博，此时A胜r局，B胜s局，应如何分配赌注？</p><p>​    这个问题通常称为点数问题，是嗜好赌博的法国学者梅雷于1654年向数学家帕斯卡提出的。为此帕斯卡和法国数学家费马于1654年7月到10月之间进行了一系列通信讨论赌注分配问题，成为了概率论的起源</p><p>​    当荷兰数学家惠更斯到巴黎时，听说费马和帕斯卡在研究赌注问题，他也进行了研究，并在1657年撰写了《论赌博问题中的计算》一书，提出数学期望，推动了概率论的发展。</p><p>​    1713年，瑞士数学家伯努利的《猜度术》一书的面世，标示着概率论已成为数学的一个重要分支。</p><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><ul><li>显然赌注最少会在t-max(r,s)局结束，因为r，s相对大小不影响问题分析的结构，所以不妨假设r&gt;s</li><li>依据获胜概率来分赌注，即若记两人分别取得最后胜利的概率为$P_A$, $P_B$ ,且$P_A$ +$P_B$ = 1,则两人应按照$P_A : P_B$的比例分赌注。</li><li>没有人作弊，故假设两个人分别每一次博弈获胜的概率均为0.5，且博弈相互独立。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">事件</th><th style="text-align:center">事件说明</th></tr></thead><tbody><tr><td style="text-align:center">t</td><td style="text-align:center">获得奖金最少需要获胜的次数</td></tr><tr><td style="text-align:center">r</td><td style="text-align:center">A已经获胜的次数</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">B已经获胜的次数</td></tr><tr><td style="text-align:center">i</td><td style="text-align:center">比赛结束时的比赛次数</td></tr><tr><td style="text-align:center">$P_A$</td><td style="text-align:center">A先获胜t局的概率</td></tr><tr><td style="text-align:center">$P_B$</td><td style="text-align:center">B先获胜t局的概率</td></tr><tr><td style="text-align:center">$P_a$</td><td style="text-align:center">A获胜一局的概率</td></tr><tr><td style="text-align:center">$P_b$</td><td style="text-align:center">B获胜一局的概率</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">总奖金数</td></tr></tbody></table></div><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>显然，最少t-r局结束，最多2*t-r-s-1局结束所以 $i\in [t-r,2t-r-s-1)$</p><p>设第i场博弈后,A获胜$P<em>{A(i)}=C</em>{i-1}^{t-r-1} P_a^{t-r-1}P_b^{i-1-(t-r-1)} *P_a$</p><p>将$P<em>a=P_b=0.5$带入化简得：$P</em>{A(i)}=0.5^iC<em>{i-1}^{t-r-1}$ 对其求和$P_A=\sum</em>{i=t-r}^{2t-r-s-1}P_{A(i)}$，</p><p>假设A，B每一局获胜概率相同，先赢得18局的人赢得赌注，并假设A胜10局且B胜7局的时候终止赌博，则有:</p><script type="math/tex; mode=display">\begin{cases}t=18\\r=10\\s=7\\P_a=0.5\\P_b=0.5\\P_A+P_B=1\\P_{A(i)}=C_{i-1}^{t-r-1} P_a^{t-r-1}P_b^{i-1-(t-r-1)} *P_a\\P_A=\sum_{i=t-r}^{2t-r-s-1}P_{A(i)}\end{cases}</script><p>计算得P~A理论值~=0.7596588134765625，故A应拿走$M * P_A$的奖金，B拿走剩下的奖金</p><p>不妨设产生随机数为1则认为单局赌博A获胜，以<strong>A获胜频率/仿真次数</strong>视为概率可得仿真结果如下表</p><div class="table-container"><table><thead><tr><th style="text-align:center">仿真次数</th><th style="text-align:center">100</th><th style="text-align:center">1000</th><th style="text-align:center">1万</th><th style="text-align:center">10万</th></tr></thead><tbody><tr><td style="text-align:center">A获胜频率</td><td style="text-align:center">0.74</td><td style="text-align:center">0.75</td><td style="text-align:center">0.7633</td><td style="text-align:center">0.76064</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="计算理论值概论代码"><a href="#计算理论值概论代码" class="headerlink" title="计算理论值概论代码"></a>计算理论值概论代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2020/12/20 12:35</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> perm,comb</span><br><span class="line">t=<span class="number">18</span></span><br><span class="line">r=<span class="number">10</span></span><br><span class="line">s=<span class="number">7</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">P_a</span>(<span class="params">x</span>):</span></span><br><span class="line">    s1=<span class="built_in">pow</span>(<span class="number">0.5</span>,x)</span><br><span class="line">    s2=comb(x-<span class="number">1</span>,t-r-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;s1:%lf s2:%lf&#x27;</span> %(s1,s2))</span><br><span class="line">    <span class="keyword">return</span> s1*s2</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    P_A=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t-r,<span class="number">2</span>*t-r-s):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i:&#x27;</span> ,i)</span><br><span class="line">        P_A=P_A+P_a(i)</span><br><span class="line">    <span class="built_in">print</span>(P_A)</span><br></pre></td></tr></table></figure><h3 id="仿真代码"><a href="#仿真代码" class="headerlink" title="仿真代码"></a>仿真代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2020/12/20 12:55</span></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">t=<span class="number">18</span></span><br><span class="line">r=<span class="number">10</span></span><br><span class="line">s=<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Echo=[<span class="number">100</span>,<span class="number">1000</span>,<span class="number">10000</span>,<span class="number">100000</span>,<span class="number">1000000</span>]</span><br><span class="line">    <span class="keyword">for</span> echo <span class="keyword">in</span> Echo:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;echo:&#x27;</span>,echo)</span><br><span class="line">        tot_A=<span class="number">0</span></span><br><span class="line">        tot_B=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(echo):</span><br><span class="line">            tempr=r</span><br><span class="line">            temps=s</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>*t-r-s+<span class="number">20</span>):</span><br><span class="line">                rad=np.random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span> rad==<span class="number">1</span>:</span><br><span class="line">                    tempr+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    temps+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> tempr==t:</span><br><span class="line">                    tot_A+=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> temps==t:</span><br><span class="line">                    tot_B+=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;tot_A:%d tot_B:%d P_A:%lf P_B:%lf&#x27;</span> %(tot_A,tot_B,tot_A/echo,tot_B/echo))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间序列</title>
      <link href="/p/65094.html"/>
      <url>/p/65094.html</url>
      
        <content type="html"><![CDATA[<h1 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h1><p>时间序列是按<strong>时间顺序排列</strong>的、<strong>随时间变化且相互关联</strong>的数据序列。分析时间序 列的方法构成数据分析的一个重要领域，即时间序列分析。 时间序列根据所研究的依据不同，可有不同的分类。</p><p>1．按所<strong>研究的对象的多少</strong>分，有一元时间序列和多元时间序列。</p><p>2．按<strong>时间的连续性</strong>可将时间序列分为<strong>离散</strong>时间序列和<strong>连续</strong>时间序列两种。</p><p>3．按<strong>序列的统计特性</strong>分，有<strong>平稳</strong>时间序列和<strong>非平稳</strong>时间序列。如果一个<strong>时间序列的概率分布与时间t无关</strong>，则称该序列为<strong>严格的（狭义的）平稳</strong>时间序列。如果序列的 <strong>一、二阶矩存在</strong>，而且对任意时刻t满足：</p><p>（1）均值为常数</p><p>（2）协方差为时间间隔 <img src= "/img/lazyload.svg" data-src="https://private.codecogs.com/gif.latex?\dpi{150} \small \tau" alt="\small \tau"> 的函数。 则称该序列为宽平稳时间序列，也叫广义平稳时间序列。我们以后所研究的时间序列主 要是<strong>宽平稳</strong>时间序列。 </p><p>4．按时间序列的分布规律来分，有高斯型时间序列和非高斯型时间序列。 （1）均值为常数</p><p>（2）协方差为时间间隔$\tau$的函数。 则称该序列为宽平稳时间序列，也叫广义平稳时间序列。我们以后所研究的时间序列主要是<strong>宽平稳</strong>时间序列。 </p><h2 id="时间序列的组成部分"><a href="#时间序列的组成部分" class="headerlink" title="时间序列的组成部分"></a>时间序列的组成部分</h2><p>时间序列预测技术就是通过对预测目标自身时间序列的处理，来研究其变化趋势 的。一个时间序列往往是以下几类变化形式的叠加或耦合。 我们<strong>常认为一个时间序列可以分解为以下四大部分</strong>：</p><p>（1）<strong>长期趋势变动</strong>。它是指时间序列朝着一定的方向持续上升或下降，或停留在 某一水平上的倾向，它反映了客观事物的主要变化趋势。</p><p>（2）<strong>季节变动</strong>。</p><p>（3）<strong>循环变动</strong>。通常是指周期为一年以上，由非季节因素引起的涨落起伏波形相 似的波动。</p><p>（4）<strong>不规则变动</strong>。通常它分为突然变动和随机变动。 </p><h2 id="三种时间序列模型"><a href="#三种时间序列模型" class="headerlink" title="　三种时间序列模型"></a>　三种时间序列模型</h2><p>设 </p><script type="math/tex; mode=display">设:\\\begin{cases}T_t &长期趋势项\\S_t &季节变动趋势项\\C_t &循环变动趋势项\\R_t &随机干扰项\end{cases}</script><ul><li>加法模型</li></ul><script type="math/tex; mode=display">y_t=T_t+S_t+R_t+C_t</script><ul><li>乘法模型</li></ul><script type="math/tex; mode=display">Y_t=T_t*S_t*C_t*R_t</script><ul><li>混合模型</li></ul><script type="math/tex; mode=display">\begin{cases}Y_t=T_t*S_t+R_t\\Y_t=S_t+T_t*C_t*R_t\\\end{cases}\\Y_y是观测目标的观测记录,\ E(R_t)=0 \quad E(R_t^2)=\sigma^2</script><p>可以说这三个模型是适用于所有时间序列的</p><h2 id="移动平均法"><a href="#移动平均法" class="headerlink" title="移动平均法"></a>移动平均法</h2><p>​    移动平均法是根据时间序列资料逐渐推移，依次计算包含一定项数的时序平均数，以反映长期趋势的方法。当时间序列的数值由于受周期变动和不规则变动的影响，起伏较大，不易显示出发展趋势时，可用移动平均法，消除这些因素的影响，分析、预测序列的长期趋势。移动平均法有简单移动平均法，加权移动平均法，趋势移动平均法等。</p><h3 id="简单移动平均法"><a href="#简单移动平均法" class="headerlink" title="简单移动平均法"></a>简单移动平均法</h3><script type="math/tex; mode=display">设观测序列 y_1..y_T,取移动平均项N<T,一次简单移动平均值计算公式为：\\M_t^{(1)}=\frac{1}{N}(y_t+...+y_{t-N+1})=\frac{1}{N}(y_{t-1}+...+y_{t-N})+\frac{1}{N}(y_t-y_{t-N})=M_{t-1}^{(1)}+\frac{1}{N}(y_t-y_{t-N})</script><p>当预测目标的基本趋势是在某一水平上下波动时，可用一次简单移动平均方法建立预测模型</p><p>$ \hat y<em>{t+1}=M_t^{(1)}=\frac{1}{N}(y_t+…+y</em>{t-N+1}),t\in[N,T] $</p><p>其预测标准误差为$S=\sqrt{\frac{\sum_{t=N+1}^{T}(\hat y_t-y_t)^2}{T-N}}$</p><p>​    最近 <em>N</em> 期序列值的平均值作为未来各期的预测结果。一般 <em>N</em> 取值范围：5 ≤ <em>N</em> ≤ 200 。当历史序列的基本趋势变化不大且序列中随机变动成分较多时， <em>N</em> 的取值应较大一些。否则 <em>N</em> 的取值应小一些。在有确定的季节变动周期的资料中，移动平均的项数应取周期长度。选择最佳 <em>N</em> 值的一个有效方法是，比较若干模型的预测误差。预测标准误差最小者为好。</p><h3 id="加权移动平均法"><a href="#加权移动平均法" class="headerlink" title="加权移动平均法"></a>加权移动平均法</h3><p>​    在简单移动平均公式中，每期数据在求平均时的作用是等同的。但是，每期数据所包含的信息量不一样，近期数据包含着更多关于未来情况的信息。因此，把各期数据等同看待是不尽合理的，应考虑各期数据的重要性，对近期数据给予较大的权重，这就是加权移动平均法的基本思想。</p><p>​    在加权移动平均法中， w*t 的选择，同样具有一定的经验性。一般的原则是：近期数据的权数大，远期数据的权数小。至于大到什么程度和小到什么程度，则需要按照预测者对序列的了解和分析来确定。</p><h2 id="指数平滑法"><a href="#指数平滑法" class="headerlink" title="指数平滑法"></a>指数平滑法</h2><p>一次移动平均实际上认为最近 <em>N</em> 期数据对未来值影响相同，都加权$\frac{1}{N}$ ；而 <em>N</em> 期以前的数据对未来值没有影响，加权为 0。但是，二次及更高次移动平均数的权数却不是 $\frac{1}{N}$ ，且次数越高，权数的结构越复杂，但永远保持对称的权数，即两端项权数小，中间项权数大，不符合一般系统的动态性。一般说来历史数据对未来值的影响是随时间间隔的增长而递减的。所以，更切合实际的方法应是对各期观测值依时间顺序进行加权平均作为预测值。指数平滑法可满足这一要求，而且具有简单的递推形式。指数平滑法根据平滑次数的不同，又分为一次指数平滑法、二次指数平滑法和三次指数平滑法等。</p><h3 id="一次指数平滑法（SES）"><a href="#一次指数平滑法（SES）" class="headerlink" title="一次指数平滑法（SES）"></a>一次指数平滑法（SES）</h3><script type="math/tex; mode=display">设时间序列y_1,y_2...y_t,\alpha 为加权系数，\alpha \in[0,1] 一次指数平滑公式为\\S_t^{(1)}=\alpha y_t+(1-\alpha)S_{t-1}^{(1)}=S_{t-1}^{(1)}+\alpha(y_t-S_{t-1}^{(1)})  \quad (13)</script><p>上式（13）是由移动平均公式改进而来的。由式（1）知，移动平均数的递推公式为$M<em>{t-1}^{(1)}+\frac{1}{N}(y_t-y</em>{t-N})$</p><p>以$M<em>{t-1}^{(1)}$作为$y</em>{t-N}$的最佳估计，则有$M<em>{t-1}^{(1)}=\frac{y_t}{N}+(1-\frac{1}{N})M</em>{t-1}^{(1)} 令\alpha=\frac{1}{N},S<em>{t}^{(1)}$代替$M</em>{t}^{(1)}$则可得(13)</p><p>$S<em>t^{(1)}=\alpha\sum</em>{j=0}^{\infty} (1-\alpha)^j y<em>{j-1}$ 此式表明 $S_t^{(1)}$是全部历史数据的加权平均，加权系数分别为$α,α(1−α),α(1−α)^2$ ；显然有$\sum</em>{j=0}^{\infty} \alpha(1-\alpha)^j=1$  由于加权系数符合指数规律，又具有平滑数据的功能，故称为指数平滑。以这种平滑值进行预测，就是一次指数平滑法。预测模型为:</p><p>$\hat y<em>{t+1}=S</em>{t}^{(1)} \ \hat y_1=S_0^{(1)}$         即</p><p>$\hat y_{t+1}=\alpha y_t+(1-\alpha)\hat y_t$ ！！！<strong>最终式子</strong></p><p>预测模型$\hat y_{n+1}=\alpha y_n+(1-\alpha)\hat y_n$</p><h4 id="加权系数选择"><a href="#加权系数选择" class="headerlink" title="加权系数选择"></a>加权系数选择</h4><p>在进行指数平滑时，加权系数的选择是很重要的。<em>α</em> 值应根据时间序列的具体性质在 0～1 之间选择。具体如何选择一般可遵循下列原则：①如果时间序列波动不大，比较平稳，则<em>α</em> 应取小一点，如（0.1～0.5）。以减少修正幅度，使预测模型能包含较长时间序列的信息；②如果时间序列具有迅速且明显的变动倾向，则<em>α</em> 应取大一点，如（0.6～0.8）。使预测模型灵敏度高一些，以便迅速跟上数据的变化。<strong>在实用上，类似移动平均法，多取几个<em>α</em> 值进行试算，看哪个预测误差小，就采用哪个。</strong></p><h4 id="初始值设定"><a href="#初始值设定" class="headerlink" title="初始值设定"></a>初始值设定</h4><p>用一次指数平滑法进行预测，除了选择合适的<em>α</em> 外，还要确定初始值 $S_0^{(1)}$。初始值是由预测者估计或指定的。当时间序列的数据较多，比如在 20 个以上时，初始值对以后的预测值影响很少，可选用第一期数据为初始值。如果时间序列的数据较少，在 20个以下时，初始值对以后的预测值影响很大，这时，就必须认真研究如何正确确定初始值，<strong>一般以最初几期实际值的平均值作为初始值</strong>。</p><h3 id="二次指数平滑法"><a href="#二次指数平滑法" class="headerlink" title="二次指数平滑法"></a>二次指数平滑法</h3><p>​    一次指数平滑法虽然克服了移动平均法的缺点。但当时间序列的变动出现<strong>直线趋势</strong>时，用一次指数平滑法进行预测，<strong>仍存在明显的滞后偏差</strong>。因此，也必须加以修正。修正的方法与趋势移动平均法相同，即再作二次指数平滑，利用滞后偏差的规律建立直线趋势模型。这就是二次指数平滑法。二次指数平滑考虑了序列的baseline和趋势，相当于加强版的一阶指数平滑法</p><script type="math/tex; mode=display">S_{t}^{(1)}=\alpha y_t+(1-\alpha)S_{t-1}^{(1)}\\S_{t}^{(2)}=\alpha S_t^{(1)}+(1-\alpha)S_t^{(2)}\\</script><p>式中$S_{t}^{(1)}$ 为一次指数的平滑值； $S_t^{(2)}$ 为二次指数的平滑值。当时间序列$y_t$ ，从某时期开始具有直线趋势时，类似趋势移动平均法，可用<strong>直线趋势模型</strong>进行预测。还有一个趋势模型</p><script type="math/tex; mode=display">\hat y_{t+m}=a_t+b_tm\\\begin{cases}a_t=2S_t^{(1)}-S_t^{(2)}\\b_t=\frac{\alpha}{1-\alpha}(S_t^{(1)}-S_t^{(2)})\end{cases}</script><p>同理可得三次指数平滑法（Holt’s Winters方法）</p><script type="math/tex; mode=display">\begin{cases}S_{t}^{(1)}=\alpha y_t+(1-\alpha)S_{t-1}^{(1)}\\S_{t}^{(2)}=\alpha S_t^{(1)}+(1-\alpha)S_t^{(2)}\\S_{t}^{(3)}=\alpha S_t^{(2)}+(1-\alpha)S_t^{(3)}\\\end{cases}</script><p>预测模型为</p><script type="math/tex; mode=display">\hat y_{t+m}=a_t+b_tm+C_tm^2\\\begin{cases}a_t=3S_t^{(1)}-3S_t^{(2)}+S_t^{(3)}\\b_t=\frac{\alpha}{2(1-\alpha)^2}((6-5\alpha )S_t^{(1)}-2(5-4\alpha)S_t^{(2)}+(4-3\alpha )S_t^{(3)})\\C_t=\frac{\alpha}{2(1-\alpha)^2}(S_t^{(1)}-2S_t^{(2)}+S_t^{(3)})\end{cases}</script><p>​    但是三阶指数平滑法可以针对有趋势也有季节性的序列。当一个序列在每个固定的时间间隔中都出现某种重复的模式，就称之具有季节性特征，而这样的一个时间间隔称为一个季节(理解：比如说在一个周内，销量呈现出重复的模式)。一个季节的长度k为它所包含的序列点个数。    </p><h3 id="Holt特性曲线趋势法"><a href="#Holt特性曲线趋势法" class="headerlink" title="Holt特性曲线趋势法"></a>Holt特性曲线趋势法</h3><script type="math/tex; mode=display">\begin{cases}Forecast\ eq:\hat y_{t+h|t}=\zeta_t+hb_t\\Level\ eq:\zeta_t=ay_t+(1-a)(\zeta_{t-1}+b_{t-1})\\Trend\ eq:b_t=\beta(\zeta_t-\zeta_{t-1}+(1-\beta)b_{t-1})\end{cases}</script><p>当曲线趋势成指数级增加或下降则可选择相乘模型。</p><h3 id="Holt-winters-季节性预测模型"><a href="#Holt-winters-季节性预测模型" class="headerlink" title="Holt-winters 季节性预测模型"></a>Holt-winters 季节性预测模型</h3><p>​    Holt-winter线性趋势方法的问题在于，趋势在未来是恒定的，无限增加或减少。对于长期预测视野，这可能会有问题。因此，阻尼趋势法是一种增加阻尼参数的方法，以使趋势在未来收敛到恒定值（它使趋势变平）。参数由φ代替。</p><script type="math/tex; mode=display">\begin{cases}Seasonal\ eq: S_t=\gamma (y_t-L_t)+(1-\gamma)S_{t-s} \\Level\ eq:\zeta_t=ay_t+(1-a)(\zeta_{t-1}+b_{t-1})\\Trend\ eq:b_t=\beta(\zeta_t-\zeta_{t-1}+(1-\beta)b_{t-1})\\Forecast\ eq:\hat y_{t+h|t}=\zeta_t+hb_t\\\end{cases}</script><h3 id="指数平滑法功能解析"><a href="#指数平滑法功能解析" class="headerlink" title="指数平滑法功能解析"></a>指数平滑法功能解析</h3><p>具体可参考<a href="https://www.cnblogs.com/harrylyx/p/11852149.html">model</a><del>是书上讲的不全吗</del></p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">trend</th><th style="text-align:center">Seasonlity</th></tr></thead><tbody><tr><td style="text-align:center">SES</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">Hlot</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">Hlot-Winter</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table></div><p>平滑方法中不同分量的平滑参数</p><div class="table-container"><table><thead><tr><th>level</th><th>trend</th><th>damping</th><th>seasonality</th></tr></thead><tbody><tr><td>$\alpha$</td><td>$\beta$</td><td>$\varphi$</td><td>$\gamma$</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table></div><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>​    <strong>通过某市1976~1987年电器销售额来预测1988年电器销售额。</strong></p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201216214938.png" alt="image-20201216214938121"></p><p><strong>code</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2020/12/16 21:59</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa <span class="keyword">import</span> holtwinters <span class="keyword">as</span> ht</span><br><span class="line"><span class="keyword">import</span> statsmodels <span class="keyword">as</span> sm</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exponential_smoothing</span>(<span class="params">data,alpha</span>):</span></span><br><span class="line">    s=[]</span><br><span class="line">    s.append((data[<span class="number">0</span>]+data[<span class="number">1</span>]+data[<span class="number">2</span>]+data[<span class="number">3</span>])/<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(data)):</span><br><span class="line">        s.append((alpha*data[i-<span class="number">1</span>]+(<span class="number">1</span>-alpha)*s[i-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">second_exponential_smoothing</span>(<span class="params">data,alpha</span>):</span></span><br><span class="line">    s1=exponential_smoothing(data,alpha)</span><br><span class="line">    s2=exponential_smoothing(s1,alpha)</span><br><span class="line"></span><br><span class="line">    a=[]</span><br><span class="line">    b=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s1)+<span class="number">1</span>):</span><br><span class="line">        a.append(<span class="number">2</span>*s1[i]-s2[i])</span><br><span class="line">        b.append((s1[i]-s2[i])*alpha/(<span class="number">1</span>-alpha))</span><br><span class="line">    <span class="keyword">return</span> a,b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cubic_index_exponential_smoothing</span>(<span class="params">data,alpha</span>):</span></span><br><span class="line">    s1=exponential_smoothing(data,alpha)</span><br><span class="line">    s2=exponential_smoothing(s1,alpha)</span><br><span class="line">    s3=exponential_smoothing(s2,alpha)</span><br><span class="line"></span><br><span class="line">    a=[]</span><br><span class="line">    b=[]</span><br><span class="line">    c=[]</span><br><span class="line">    pre=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data)):</span><br><span class="line">        a.append(<span class="number">3</span>*s1[i]-<span class="number">3</span>*s2[i]+s3[i])</span><br><span class="line">        b.append(((<span class="number">6</span>-<span class="number">5</span>*alpha)*s1[i]-(<span class="number">10</span>-<span class="number">8</span>*alpha)*s2[i]+(<span class="number">4</span>-<span class="number">3</span>*alpha)*s3[i]*alpha)/(<span class="number">2</span>*(<span class="number">1</span>-alpha)**<span class="number">2</span>))</span><br><span class="line">        c.append(s1[i]-<span class="number">2</span>*s2[i]+s3[i])</span><br><span class="line"></span><br><span class="line">    pre.append(a[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">        pre.append(a[i]+b[i]+c[i])</span><br><span class="line"></span><br><span class="line">    plt.plot(t,pre,marker=<span class="string">&#x27;o&#x27;</span>,label=<span class="string">&#x27;cubic_index_exponential_smoothing&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> a,b,c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    data2 = [<span class="number">253993</span>,<span class="number">275396.2</span>,<span class="number">315229.5</span>,<span class="number">356949.6</span>,<span class="number">400158.2</span>,<span class="number">442431.7</span>,<span class="number">495102.9</span>,<span class="number">570164.8</span>,<span class="number">640993.1</span>,<span class="number">704250.4</span>,<span class="number">767455.4</span>,<span class="number">781807.8</span>,<span class="number">776332.3</span>,<span class="number">794161.7</span>,<span class="number">834177.7</span>,<span class="number">931651.5</span>,<span class="number">1028390</span>,<span class="number">1114914</span>]</span><br><span class="line"></span><br><span class="line">    data=[<span class="number">20.4</span>,<span class="number">20.6</span>,<span class="number">25.72</span>,<span class="number">34.61</span>,<span class="number">51.77</span>,<span class="number">55.92</span>,<span class="number">80.65</span>,<span class="number">131.11</span>,<span class="number">148.58</span>,<span class="number">162.67</span>,<span class="number">232.26</span>]</span><br><span class="line">    t_ = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        t_.append(i)</span><br><span class="line"></span><br><span class="line">    f=plt.figure(<span class="string">&#x27;exponential_smoothing&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    t=t_+[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)+<span class="number">1</span>,<span class="built_in">len</span>(data)+<span class="number">5</span>)]</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line">    ses=ht.SimpleExpSmoothing(data).fit()</span><br><span class="line">    plt.plot(t,<span class="built_in">list</span>(ses.fittedvalues)+<span class="built_in">list</span>(ses.forecast(<span class="number">4</span>)),color=<span class="string">&#x27;y&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>,label=<span class="string">&#x27;SES&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#有加法模型和指数模型，这里用指数模型</span></span><br><span class="line">    holt=ht.Holt(data,exponential=<span class="literal">True</span>).fit(smoothing_level=<span class="number">0.8</span>,smoothing_trend=<span class="number">0.2</span>,optimized=<span class="literal">False</span>)</span><br><span class="line">    plt.plot(t,<span class="built_in">list</span>(holt.fittedvalues)+<span class="built_in">list</span>(holt.forecast(<span class="number">4</span>)),color=<span class="string">&#x27;r&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>,label=<span class="string">&#x27;holt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    holt_winter=ht.ExponentialSmoothing(data,seasonal_periods=<span class="number">4</span>,trend=<span class="string">&#x27;add&#x27;</span>,seasonal=<span class="string">&#x27;add&#x27;</span>).fit(use_boxcox=<span class="literal">True</span>)</span><br><span class="line">    plt.plot(t,<span class="built_in">list</span>(holt_winter.fittedvalues)+<span class="built_in">list</span>(holt_winter.forecast(<span class="number">4</span>)),color=<span class="string">&#x27;g&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>,label=<span class="string">&#x27;holt_winter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.plot(t_, data, color=<span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;raw&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201217135335.png" alt="image-20201217135335405"></p><h3 id="指数平滑法总结"><a href="#指数平滑法总结" class="headerlink" title="指数平滑法总结"></a>指数平滑法总结</h3><p>指数平滑是当今行业中应用最广泛、最成功的预测方法之一。</p><p>但是由各预测函数和图像可知：</p><p>一次只能预测序列后<strong>一个值</strong>，二次只能预测直线，三次只能预测二次曲线，局限性极强。</p><p>并且$\hat y<em>{t+m}对应的是y</em>{t+m-1} 而不是y_{t+m}$</p><p>比如m=1时 $\hat y<em>{1+1}对应的是y</em>{1}而不是y_2$</p><p>表示没看到差分指数平滑法的解析，是不常用吗❓</p><h2 id="平稳时间序列模型"><a href="#平稳时间序列模型" class="headerlink" title="平稳时间序列模型"></a>平稳时间序列模型</h2><p>这里的平稳是指序列的统计特性不随时间平移而变化，即均值和协方差不随时间的平移变化。<del>简单点理解为图像看的有一种‘美感’</del></p><p>这里对ARMA进行介绍，而ARIMA进行主要说明</p><p>在此之前还需自行了解 <del>不了解也无妨</del></p><ul><li>ACF:自相关系数</li><li>PACF:偏自相关系数</li><li>白噪声检验</li><li>单位根检验</li></ul><h4 id="AR-p-序列"><a href="#AR-p-序列" class="headerlink" title="AR(p)序列"></a>AR(p)序列</h4><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201218233358.png" alt="image-20201217141133731"></p><h4 id="MA-p-序列"><a href="#MA-p-序列" class="headerlink" title="MA(p)序列"></a>MA(p)序列</h4><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201217141107.png" alt="image-20201217141107449"></p><h4 id="自回归移动平均序列（ARMA）"><a href="#自回归移动平均序列（ARMA）" class="headerlink" title="自回归移动平均序列（ARMA）"></a>自回归移动平均序列（ARMA）</h4><p>ARMA包括</p><ul><li>AR序列 自回归序列(Auto Regressive Model)</li><li>MA序列 移动平均序列(Moving Average Model)</li></ul><h4 id="ARMA-p-序列"><a href="#ARMA-p-序列" class="headerlink" title="ARMA(p)序列"></a>ARMA(p)序列</h4><p>​    设{X~t~ ,t = 0,±1,±2…} 是零均值平稳序列，满足下列模型：$X<em>t-\varphi X</em>{t-1}-…-\varphi X<em>{t-p}=\epsilon_t-\theta_1\epsilon</em>{t-1}-…-\theta<em>q\epsilon</em>{t-q}$ （70）其中 <em>t</em> <em>ε</em> 是零均值、方差是 σ~ε~^2^ 的平稳白噪声，则称X~t~是阶数为p, q的自回归滑动平均序列，简记为ARMA( <em>p</em>, <em>q</em>) 序列。当 <em>q</em> = 0时，它是 AR( <em>p</em>) 序列；当 <em>p</em> = 0 时，它为MA(<em>q</em>) 序列。</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201217165703.png" alt="image-20201217165703509"></p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201217165758.png" alt="image-20201217165758754"></p><h4 id="差分自回归移动平均模型（ARIMA）"><a href="#差分自回归移动平均模型（ARIMA）" class="headerlink" title="差分自回归移动平均模型（ARIMA）"></a>差分自回归移动平均模型（ARIMA）</h4><p>ARIMA模型(包括ARMA模型、AR模型和MA模型)是预测平稳时间序列的一类通用模型。ARIMA模型由三部分组成:</p><ul><li>序列滞后值的加权和（自回归（AR）部分）</li><li>序列滞后预测误差的加权和（移动平均值（MA）部分）</li><li>时间序列的差分(Integrated (I)部分)</li></ul><p>ARIMA模型通常被标注为ARIMA（p，d，q），其中p表示AR部分的顺序，d表示差分的顺序（“ I”部分），q表示MA的顺序。ARIMA模型相对ARMA模型，仅多了差分操作，ARIMA模型几乎是所有时间序列软件都支持的，差分的实现与还原都非常方便。而statsmodel中，对差分的支持不是很好，它不支持高阶和多阶差分，为什么不支持，作者大概的意思是说预测方法中并没有解决高于2阶的差分，不过没关系，我们可以先用pandas将序列差分好，然后在对差分好的序列进行ARIMA拟合，只不过这样后面会多了一步人工还原的工作。</p><p><strong>ARIMA步骤</strong></p><p>因为ARMA不能差分所以说经常不使用（差分就变成ARIMA了)所以仅列出ARIMA的步骤，ARMA步骤类似就不再赘述了</p><ul><li><p>画出自相关图 ACF</p></li><li><p>画出偏自相关图 PACF</p></li><li><p>进行单位根检验：如果检验p值大于0.05则说明时间序列是非平稳的需要进行差分<del>下图是一阶差分后的adf 很接近于0了，画图也能看出来非常平稳</del>，否则是平稳的。</p><p>  <img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201217172654.png" alt="image-20201217172654298"></p><p>  <img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201217174156.png" alt="image-20201217174156369"></p></li><li><p>白噪声检： 验主要是检验p值是否大于0.05，大于0.05的时间序列是平稳的白噪声时间序列，<strong>p值小于0.05</strong>的是平稳的非白噪声的时间序列，<strong>是平稳的非白噪声的时间序列</strong>才可以进行下一步的ARMA分析(p&lt;0.05才能进行ARMA分析，否则应回到上一步继续差分)</p><p>  <img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201217174553.png" alt="image-20201217174553784"></p><p>  <img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201217174531.png" alt="image-20201217174530922"></p></li><li><p>通过枚举进行参数分析求得最佳的p，q（类似灵敏度分析）</p></li><li><p>将参数带入模型，得到预测矩阵</p></li><li>forecas预测已有数据集，predict预测未知数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : Dummerfu</span></span><br><span class="line"><span class="comment"># @Contact : https://github.com/dummerchen </span></span><br><span class="line"><span class="comment"># @Time : 2020/12/17 16:58</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima_model <span class="keyword">import</span> ARIMA</span><br><span class="line"><span class="keyword">from</span> dataprocessing <span class="keyword">import</span> data_process</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.stattools <span class="keyword">import</span>  adfuller <span class="keyword">as</span> adf</span><br><span class="line"><span class="keyword">from</span> statsmodels.stats.diagnostic <span class="keyword">import</span> acorr_ljungbox <span class="keyword">as</span> al</span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_pacf,plot_acf</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>, <span class="string">&#x27;statsmodels.tsa.arima_model.ARMA&#x27;</span>,</span><br><span class="line">                        FutureWarning)</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>, <span class="string">&#x27;statsmodels.tsa.arima_model.ARIMA&#x27;</span>,</span><br><span class="line">                        FutureWarning)</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bf_arima</span>(<span class="params">data</span>):</span></span><br><span class="line">    pq = [(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)]</span><br><span class="line">    best_acc = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pq:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            model = ARIMA(data, order=i)</span><br><span class="line">            arima = model.fit(disp=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            acc = arima.aic</span><br><span class="line">            <span class="keyword">if</span> acc &lt; best_acc:</span><br><span class="line">                best_acc = acc</span><br><span class="line">                best_model = arima</span><br><span class="line">                best_param = i</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment">#print(e)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(best_acc, best_param, best_model.summary())</span><br><span class="line">    <span class="keyword">return</span> best_param</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data,raw_data=data_process()</span><br><span class="line">    <span class="comment">#print(len(data[&#x27;Count&#x27;]),data.head())</span></span><br><span class="line">    <span class="comment"># arima_param=bf_arima(data[&#x27;Count&#x27;])</span></span><br><span class="line">    arima=ARIMA(data,order=(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    res=arima.fit(disp=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.summary())</span><br><span class="line">    <span class="comment"># predict 得到的是序列内的预测值，最多向后只能预测1个（没有自动还原差分</span></span><br><span class="line">    <span class="comment"># forecast 是向后预测，自动还原差分值</span></span><br><span class="line">    fig,ax=plt.subplots(figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line">    plt.plot(raw_data,label=<span class="string">&#x27;raw_data&#x27;</span>)</span><br><span class="line">    forecast=res.forecast(steps=<span class="built_in">len</span>(raw_data)-<span class="built_in">len</span>(data))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(forecast[0],predict)</span></span><br><span class="line">    <span class="comment">#res.plot_predict(start=raw_data.index[4],end=raw_data.index[-1],plot_insample=False,dynamic=False,ax=ax)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># forecast[0].plot(ax=ax,label=&#x27;forecast&#x27;)</span></span><br><span class="line">    plt.plot(pd.to_datetime(raw_data.index[<span class="number">700</span>:]),forecast[<span class="number">0</span>],label=<span class="string">&#x27;forecast&#x27;</span>,color=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">    plt.axvline(x=data.index[<span class="number">699</span>],ymin=<span class="number">0</span>,ymax=<span class="number">20000</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;Start forecast&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201218145128.png" alt="image-20201218145127951"></p><p>相同数据集下指数平滑法的比较：</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201218145428.png" alt="image-20201218145428405"></p><p>可以使用季节性的ARIMA-&gt;SARIMA 从而得到季节性特征</p><h2 id="ARIMA和指数平滑法的优略"><a href="#ARIMA和指数平滑法的优略" class="headerlink" title="ARIMA和指数平滑法的优略"></a>ARIMA和指数平滑法的优略</h2><p>指数平滑方法适用于非平稳数据，ARIMA模型仅应用于平稳数据，因此应删除数据的趋势，然后查看序列。</p><p><strong>简单指数平滑和线性指数平滑</strong></p><ul><li>少数数据点</li><li>不规则数据</li></ul><p><strong>Holt-winter</strong></p><ul><li>数据具有趋势并且是季节性的</li><li>使用乘法版本，除非数据之前已经logged过。在这种情况下，使用加法版本</li></ul><p><del>然而都只能预测一个点？</del></p><h2 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h2><ul><li><p>全部tsa模块功能可<a href="https://blog.csdn.net/weixin_43982642/article/details/106422538">参考</a></p></li><li><p>ARMA，ARIMA步骤<a href="https://blog.csdn.net/qq_33333002/article/details/106171234">参考</a></p><ul><li><a href="https://www.statsmodels.org/stable/index.html">statsmodel官网</a></li><li><a href="https://www.bilibili.com/video/BV1uT4y1L7za?p=11">时间序列讲解视频</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】基于时频分析和卷积神经网路的模式识别</title>
      <link href="/p/13246.html"/>
      <url>/p/13246.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spectrum-Analysis-and-Convolutional-Neural-Network-for-Automatic-Modulation-Recognition"><a href="#Spectrum-Analysis-and-Convolutional-Neural-Network-for-Automatic-Modulation-Recognition" class="headerlink" title="Spectrum Analysis and Convolutional Neural Network for Automatic Modulation Recognition"></a>Spectrum Analysis and Convolutional Neural Network for Automatic Modulation Recognition</h1><center>Yuan Zeng, Meng Zhang, Fei Han, Yi Gong , Senior Member, IEEE, and Jin Zhang </center><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p><em>Recent convolutional neural networks (CNNs)-based image processing methods have proven that CNNs are good at extracting features of spatial data. In this letter, we present a CNN-based modulation recognition framework for the detection of radio signals in communication systems……略</em></p><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>​    在通信系统中,发射的信号通常会被用不同的方式调节来达到数据更高效的传输.作为信号侦察和信号解调的中间过程,自动调制识别(AMR)能提供信号调制后的信息,并在各个领域中起到了关键的作用。</p><p>​    在过去几十年里,已经有很多算法为AMR打下了基础,总的来说分为两大类：基于似然方法(likelihood based method)和特征匹配的方法。似然方法用了概率理论、假设检验理论和合适的决策标准(prob-ability theory, hypothesis testing theory and a proper decision criterion)来解决问题<a href="#1">[1]</a>.而特征匹配方法通过特征提取和分类来解决问题.在特征匹配方法中识别的表现与人工设置的特征数量成正比,各种统计特征如瞬时振幅,频率相位已经被用到调制分类识别中,如高阶统计(HOS)<a href="#2">[2]</a>,网络循环稳态特征曲线图<a href="#3">[3]</a>.关于分类的过程(the classification process),目前存在的分类器已经有决策树(decision tree)<a href="#4">[4]</a>和机器学习算法，例如支持向量机(support vector machine)<a href="#5">[5]</a>,神经网络(artificial neural network)<a href="#6">[6]</a>。</p><p>​    近来，深度学习作为一个强有力的机器学习方法，已经成功在图像识别和语音识别等中取得了成功。基于深度学习的方法是基于多层非线性处理单元的连接来做到特征的提取和转换.它也能自动优化提取的特征来达到分类误差最小.深度学习也被应用于调制识别。论文<a href="#7">[7]</a>概述了深度学习在无线电信号处理中的新兴应用，并使用GNU无线电生成了具有同相和正交(IQ)信息的调制信号的开放数据集，用于调制识别。O’Sheaet<a href="#8">[8]</a>等人研究了卷积神经网络(CNN)对数据集的适应性，并比较了所提出的CNN与基于专家循环矩特征的方法的识别性能(the expert cyclic moment features based methods.)。 后来，论文根据中的数据对CNN，残差网络，深度解析，长短期记忆网络神经网络(CNN-LSTM)进行了比较，实验结果表明调制识别不受到网络深度的限制。 </p><p>​    此外，论文<a href="#10">[10]</a>提出了一种预处理信号表示，该信号利用IQ信息和调制信号的HOS特征来提高其呈现的深度学习架构的识别性能。</p><p>​    CNNs在提取空间数据的特征取得了显著的效果比如图像处理中的图像分类、语义分割,利用图像的光谱特征进行调制识别等方面。论文<a href="#11">[11]</a>使用ambiguity  function(AF)把图像作为信号表示，并使用栈式自动编码器<a href="#12">[12]</a>执行调制识别。这个使用spectral correlation function(SCF)作为signal representation和deep belief network (DBN)作为分类器来达到自动识别调制类型的方法广受好评<a href="#13">[13]</a>。本文提出了一种对调制信号进行时频分析的方法，利用短时傅立叶变换将一维信号转换为二维谱图图像，并设计一个CNN网络架构进行自动调制识别。我们把这个算法命名为spectrum  CNN  (SCNN)。此外我们使用高斯滤波来降噪。我们将这种方法称为SCNN2。我们利用公共数据集<a href="#7">[7]</a>和11种常用的调制类型对所提方法的识别性能进行评估，并将SCNN2与<a href="#8">[8]</a>和<a href="#10">[10]</a>方法进行识别精度的比较。此外我们还将评估三个方法的效果：使用基于CNN来比较用短时傅里叶变换图片，AF图片，SCF图片的性能差别。并从空间复杂度、学习参数和每个信号的在实验中的训练时间等方面计算了复杂度。</p><h1 id="TIME-FREQUENCY-ANALYSIS-AND-NOISE-REDUCTION"><a href="#TIME-FREQUENCY-ANALYSIS-AND-NOISE-REDUCTION" class="headerlink" title="TIME-FREQUENCY ANALYSIS AND NOISE REDUCTION"></a>TIME-FREQUENCY ANALYSIS AND NOISE REDUCTION</h1><h2 id="Time-Frequency-Analysis"><a href="#Time-Frequency-Analysis" class="headerlink" title="Time-Frequency Analysis"></a>Time-Frequency Analysis</h2><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201107161013.png#pic_center" alt="img"></p><p>​        我们来考虑一个简单只由一个发射器(transmitter)，通道(channal)，接收器(receiver)的通讯系统(Fig. 1.),设s(t)表示要发送到接收方的传输符号，首先使用调制函数F将传输符号s(t)转换为传输信号，然后该信号通过通信信道h(t)传输到接收机。设y(t)表示传输符号s(t)在接收端的观测信号，将接收信号y(t) 给定为y(t) = x(t)+v(t)，其中$x(t)=F(s(t))*h(t)$为接收到的干净信号，v(t) 是the additive white Gaussian noise(AWGN，高斯白噪)。已知观测信号y(t)，调制识别的目的是预测调制函数F，从而提供从观测信号y(t)估计s(t)的调制信息(thus to provide modulation information for estimating the transmitted symbol s(t) from the observed signal y(t).)。设y(n)表示时间采样指标n处的离散观测信号。 y(n)可以通过在时间$\frac{n}{fs}$采样连续时间信号y(t)来获得，即$y(n)= y(t)| t = \frac{n}{f_s}$，并且$n \in (-\infty,\infty)$。</p><p>​    本文，我们使用时频图作为观察到的信号随时间变化的频率谱的视觉表示。通过计算观测信号的短时离散傅里叶变换(STFT)的平方幅值，得到了谱图。设w(·)表示长度为J的窗口函数，K为窗口位移。利用短时傅立叶变换将观测信号加窗并转换到频域，即</p><script type="math/tex; mode=display">Y(f,m)=\sum_{n=mK+1}^{mK+J} y(n)w(n-mk)e^{-jw_f(n-mk)}\quad,(1)</script><p>​    其中Y(f,m)是frequency bin index f和discrete-time frame index m处的DFT系数并且在f处的离散频率变量为$w_f=\frac{2\pi f}{J}$。频谱图为$\tilde{Y}(f,m)=|Y(f,m)|^2$。$\tilde{Y}(f,m)$是Y (n)的时频混合表示，因为$\tilde{Y} (f,m)$上的每个位置对应于频率和时间上的一个点。</p><h2 id="Noise-reduction"><a href="#Noise-reduction" class="headerlink" title="Noise reduction"></a>Noise reduction</h2><p>​    附加噪声v(t)会严重影响调制识别的性能。由于发射的是基带信号，而噪声的功率谱密度与频率无关并且均匀分布于整个频域，用高斯滤波器 直接 对谱图图像进行降噪，只能得到模糊的图像，frequency rejection的能力有限。我们这里，在进行时频分析之前，使用低通滤波器来降低信号y(t)的噪声。为了降低观测信号的噪声，我们设计了一个高斯滤波器，即x(n)=y(n)G(n)，其中x(n)是滤波后的信号，$G(n)=\frac{1}{\sqrt{2\pi}}e^{-\frac{n^2}{2}}$</p><hr><h1 id="CONVOLUTIONAL-NEURAL-NETWORK-FOR-MODULATION-RECOGNITION"><a href="#CONVOLUTIONAL-NEURAL-NETWORK-FOR-MODULATION-RECOGNITION" class="headerlink" title="CONVOLUTIONAL NEURAL NETWORK FOR MODULATION RECOGNITION"></a>CONVOLUTIONAL NEURAL NETWORK FOR MODULATION RECOGNITION</h1><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201108232818.png#pic_center" alt="image-20201108232818057"></p><p>​    Fig. 2.展示了我们提出的CNN架构，这是一个具有多层非线性的神经网络，它们能很好的表示频谱图特征与调制方法之间的映射关系这种非线性的分类函数。(which is a neural network with many levels of non-linearities allowing them to represent a highly non-linear classification function that maps spectrogram features to modulation methods)。神经网络由一个输入层，4个卷积层组成，并且前三个卷积层还包含最大池化层(max-pooling)。卷积层后还连接着一个全连接层和Softmax层。该神经网络采用ReLU作为激活函数。输入图像的维数是(100,100,3),卷积层的filter个数分别是64，32，12，8，维数都是3X3，padding和stride都是1。池化层的pooling size都是2X2。全连接层包含128个神经元。这种网络架构的设计和图片分类中的推荐参数设置比如filter，filter size， the numbers oflayer 参考了<a href="#8">[8]</a>和<a href="#10">[10]</a>实验。之后，通过对不同的参数进行多次实验，比较它们的识别精度，确定网络架构。网络的输出是频谱图图像的调制方法。此外，网络使用随机梯度下降(SGD)来减小交叉熵损失函数<a href="#14">14</a>:</p><script type="math/tex; mode=display">W=argmin_w \frac{1}{N}\sum_{i=1}^{N}\mathcal{L}(w;x^i,t^i)</script><p>其中$N$是样本数量，$t^i$是正确的labels，$x^i$​​是预测的labels</p><hr><h1 id="EXPERIMENTS"><a href="#EXPERIMENTS" class="headerlink" title="EXPERIMENTS"></a>EXPERIMENTS</h1><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>​    这个实验使用RadioML2016.10a<a href="#7">[7]</a>作为基本数据集。它有11种被广泛应用于离散和连续二进制的实际通信系统中的调制方法：BPSK, QPSK, 8PSK, 16QAM, 64QAM, BFSK, CPFSK, PAM4, WB-FM, AM-SSB and AM-DSB。该数据集考虑20种从-20 dB到18 dB的不同的信噪比(SNRs)，每个调制模式每个信噪比有1000个信号(1000 signals per modulation mode per SNR.)。每个信号由128个包含实部和虚部的样本组成。</p><p>​    本论文号通过基于帧的处理转换为频谱图，帧长为40个样本，有90%重叠的Hann窗口。我们使用MATLAB R2017b中的spectrogram函数生成频谱图像，并保存为(200,200,3)维度的RGB图像。然后，利用最近邻插值方法( nearest interpolation)把(200,200,3)的光谱图图像的分辨率调整为(100,100,3)。我们把这个框架称作SCNN。关于降噪，我们使用size为7的高斯滤波器(Gaussian filter)对观测信号y(n)进行预处理，我们把带有降噪预处理的SCNN方法称为SCNN2。</p><h2 id="Experimental-setup"><a href="#Experimental-setup" class="headerlink" title="Experimental setup"></a>Experimental setup</h2><p>​    为了评估框架的识别性能，在这部分我们考虑了两个实验。首先我们将SCNN,SCNN2和CNN-IQ<a href="#8">[8]</a>,CNN-IQFOC<a href="#10">[10]</a>进行了识别准确率的比较。本论文也将CNN-IQ,CNN-IQFOC在相同数据集上对模式识别进行了分类。此外，我们还将SCNN2与CNNR-IQ和CNNR-IQFOC进行了复杂度，内存消耗、学习参数个数和每个信号的训练时间等方面比较。</p><p>​    之后，为了评估所提出的调制信号频谱分析的有效性，我们进一步使用模糊函数图像和频谱相关函数图像作为信号表示，我们分别称为AF-CNN和SCF-CNN。我们也比较了SCNN2与AF-CNN和SCF-CNN在不同信噪比下的识别性能。</p><p>我们实验随机选取700 signals/modulation/SNR (700 signals per modulation mode per SNR)作为训练数据，剩下的信号分为验证数据(100 signals\modulation\SNR)(100 signals per modulation mode per SNR)和测试数据(200 signal/modulation/SNR)(200 signals per modulation mode per SNR)。具体来说，我们用(700,11)\SNR (per SNR with 700 × 11 images)的图像训练分类模型。在处理前，先对所有图像进行正则化，学习率从0.0005开始并且每100次迭代除10。当交叉验证损失在15次迭代内不减少时停止训练并保存模型和最小的交叉验证损失。每步的SCNN2识别准确率如Fig.3.所示。</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201109130806.png#pic_center" alt="image-20201109130805931"></p><p>​    然后，利用训练好的模型对每个测试图像的调制类型进行预测。实验种的CNN是基于Tensorflow的Keras和Nvidia TITAN X GPU实现的。</p><h2 id="Experiment-result"><a href="#Experiment-result" class="headerlink" title="Experiment result"></a>Experiment result</h2><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201109130826.png#pic_center" alt="image-20201109130826345"></p><p>​    图4为SCNN、SCNN2、CNNR-IQ和CNNR-IQFOC与SNRs对比识别准确率的结果。从图4中可以看出，在18db信噪比下，SCNN2方法的识别精度比SCNN方法低约4%，但当信噪比低于4d时，比SCNN高出约2%。因为在信号严重失真和接近清洁的情况下，降噪算法提高信噪比的能力有限。此外，当信噪比在4db ~ 16db之间时，识别精度提高约10%。并且，我们观察到SCNN2和CNNR-IQFOC的识别精度都优于CNNR-IQ。更具体来讲，当信噪比低于4 dB时，SCNN2的识别性能比CNNR-IQ高出约5%，当信噪比高于2 dB时，SCNN2的识别性能比CNNR-IQ高出约15% ~ 20%。当信噪比低于8 dB时，SCNN2和CNNR-IQFOC的识别性能非常相似。在8d B、6 dB和4d B时，SCNN2的准确率比CNNR-IQFOC低5%左右。然而，当信噪比在2db - 18db之间时，SCNN2的精度比CNNR-IQFOC高出约8%。这表明，在信噪比低于2 dB时，SCNN2的性能总体上与CNNR-IQFOC相似或略差，但在信噪比高于2d B时，SCNN2的性能优于CNNR-IQFOC。</p><p>​    接下来，我们比较了SCNN2与AF-CNN和SCF-CNN的识别性能。图5中的实验结果表明，SCNN2的性能优于AF-CNN和SCF-CNN。具体来说，SCNN2的准确率比SCF-CNN高出15%左右并且当信噪比大于2 dB时比AF-CNN的精度高20%左右。当SNR电平低于8 dB时，SCNN2和SCF-CNN的识别性能非常相似。 这可以解释为，基于学习的分类方法的识别性能与输入数据的多样性成正比，而SCNN2中的频谱图分析提供了比模糊函数图像(AF-CNN)中信号更丰富的时频表示。 SCF-CNN中的频谱相关函数图像如Fig.6.所示</p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201109130838.png#pic_center" alt="image-20201109130838886"></p><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201109194905.png" alt="image-20201109194905209"></p><h2 id="Computational-Complexity"><a href="#Computational-Complexity" class="headerlink" title="Computational Complexity"></a>Computational Complexity</h2><p><img src= "/img/lazyload.svg" data-src="https://gitee.com/dummerchen/MY_IMAGE_BED/raw/master/20201109194929.png" alt="image-20201109194929362"></p><p>​    SCNN2、CNNR-IQ和CNNR-IQFOC的计算复杂度是通过比较空间消耗、学习参数的数量和每个信号的平均训练时间来评估的。从表I可以看出，SCNN2比CNNR-IQ和CNNR-IQFOC需要更多的内存，因为SCNN2、CNNR-IQ和CNNR-IQFOC的输入数据大小分别为(100,100,3)、(2,128)和(3,128)。然而，SCNN2学习参数的数量小于其他的方法，因为SCNN2少量的过滤层和使用池化访问每个卷积，而CNNR-IQ网络体系结构不包括池层，CNNR-IQFOC的每个卷积层使用更多的过滤器。另外，SCNN2的训练时间比CNNR-IQ大，但比CNNR-IQFOC小。</p><hr><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>​    本文，我们提出了调制无线电信号的时频分析，并设计了一种新的基于频谱分析的卷积神经网络(SCNN)框架自动调制识别…略</p><hr><h1 id="个人哔哔"><a href="#个人哔哔" class="headerlink" title="个人哔哔"></a>个人哔哔</h1><p>个人尝试复现了一下，很多细节都没有讲所以挺难复现的。<del>先在站在上帝视角看感觉是好水的一篇论文</del></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><em><span id="1">[1] W. Wei and J. M. Mendel, “Maximum-likelihood classification for digi-tal amplitude-phase modulations,”IEEE Trans. Commun., vol. 48, no. 2,pp. 189–193, Feb. 2000.</span></em></p><p><em><span id="2">[2]   A.  Swami  and  B.  M.  Sadler,  “Hierarchical  digital  modulation  clas-sification  using  cumulants,”IEEE  Trans.  Commun.,  vol.  48,  no.  3,pp. 416–429, Mar. 2000.</span></em></p><p><em><span id="3">[3]   L. Hong, “Classification of BPSK and QPSK signals in fading environ-ment using the ICA technique,” inProc. 37th Southeastern Symp. Syst.Theory (SSST), Tuskegee, AL, USA, Mar. 2005, pp. 491–494.</span></em></p><p><em><span id="4" > [4]   S.  R.  Safavian  and  D.  Landgrebe, “A  survey  of  decision  tree  classifiermethodology,”IEEE  Trans.  Syst.,  Man,  Cybern.,  Syst.,  vol.  21,  no.  3,pp. 660–674, May/Jun. 1991.</span></em></p><p><em><span id="5">[5]   B. Scholkopf, K. Tsuda, and J. Vert,Advanced Application of SupportVector Machines. London, U.K.: MIT Press, 2004, p. 275.</span></em></p><p><em><span id="6">[6]   R.  Lippmann,  “An  introduction  to  computing  with  neural  nets,”IEEEASSP Mag., vol. 4, no. 2, pp. 4–22, Apr. 1987</span></em></p><p><em><span id="7">[7]   T. J. O’Shea and N. West, “Radio machine learning dataset generationwith GNU radio,” inProc. GNU Radio Conf., vol. 1, 2016, pp. 1–6</span></em></p><p><em><span id="8">[8]   T. J. O’Shea, J. Corgan, and T. C. Clancy, “Convolutional radio modula-tion recognition networks,” inProc. Int. Conf. Eng. Appl. Neural Netw.,vol. 629. Aberdeen, U.K., 2016, pp. 213–226</span></em></p><p><em><span id="9">[9]   N.  E.  West  and  T.  O’Shea,  “Deep  architectures  for  modulation  recog-nition,” inProc. IEEE Int. Symp. Dyn. Spectr. Access Netw. (DySPAN),Mar. 2017, pp. 1–6</span></em></p><p><em><span id="10">[10]  M.  Zhang,  Y.  Zeng,  Z.  Han,  and  Y.  Gong,  “Automatic  modulationrecognition using deep learning architectures,” inProc. 19th IEEE Int.Workshop Signal Process. Adv. Wireless Commun. (SPAWC), Jun. 2018,pp. 1–5</span></em></p><p><em><span id="9">[11]  A.  Dai,  H.  Zhang,  and  H.  Sun,  “Automatic  modulation  classificationusing stacked sparse auto-encoders,” inProc. IEEE 13th Int. Conf. SignalProcess. (ICSP), Chengdu, China, Nov. 2016, pp. 248–252.</span></em></p><p><em><span id="12">[12]  Q.  V.  Leet  al.,  “On  optimization  methods  for  deep  learning,”  inProc.  28th  Int.  Conf.  Int.  Conf.  Mach.  Learn.  (ICML),  Bellevue,  WA,USA, 2011, pp. 265–272</span></em></p><p><em><span id="13">[13]  G. J. Mendis, J. Wei, and A. Madanayake, “Deep learning-based auto-mated modulation classification for cognitive radio,” inProc. IEEE Int.Conf. Commun. Syst. (ICCS), Shenzhen, China, Dec. 2016, pp. 1–6.</span></em></p><p><em><span id="14">[14]C.M.Bishop,PatternRecognitionandMachineLearning(InformationScienceandStatistics).Heidelberg,Germany:Springer-Verlag,2006.Authorized licensed use limited to: XIDIAN UNIVERSITY. Downloaded on October 01,2020 at 14:20:32 UTC from IEEE Xplore.  Restrictions apply.</span></em></p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
